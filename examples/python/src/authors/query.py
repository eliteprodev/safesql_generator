# Code generated by sqlc. DO NOT EDIT.
from typing import AsyncIterator, Awaitable, Iterator, Optional, overload

import sqlc_runtime as sqlc

from authors import models


CREATE_AUTHOR = """-- name: create_author :one
INSERT INTO authors (
          name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
"""


DELETE_AUTHOR = """-- name: delete_author :exec
DELETE FROM authors
WHERE id = $1
"""


GET_AUTHOR = """-- name: get_author :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
"""


LIST_AUTHORS = """-- name: list_authors :many
SELECT id, name, bio FROM authors
ORDER BY name
"""


@overload
def create_author(conn: sqlc.Connection, name: str, bio: Optional[str]) -> Optional[models.Author]:
    pass


@overload
def create_author(conn: sqlc.AsyncConnection, name: str, bio: Optional[str]) -> Awaitable[Optional[models.Author]]:
    pass


def create_author(conn: sqlc.GenericConnection, name: str, bio: Optional[str]) -> sqlc.ReturnType[Optional[models.Author]]:
    return conn.execute_one_model(models.Author, CREATE_AUTHOR, name, bio)


@overload
def delete_author(conn: sqlc.Connection, id: int) -> None:
    pass


@overload
def delete_author(conn: sqlc.AsyncConnection, id: int) -> Awaitable[None]:
    pass


def delete_author(conn: sqlc.GenericConnection, id: int) -> sqlc.ReturnType[None]:
    return conn.execute_none(DELETE_AUTHOR, id)


@overload
def get_author(conn: sqlc.Connection, id: int) -> Optional[models.Author]:
    pass


@overload
def get_author(conn: sqlc.AsyncConnection, id: int) -> Awaitable[Optional[models.Author]]:
    pass


def get_author(conn: sqlc.GenericConnection, id: int) -> sqlc.ReturnType[Optional[models.Author]]:
    return conn.execute_one_model(models.Author, GET_AUTHOR, id)


@overload
def list_authors(conn: sqlc.Connection) -> Iterator[models.Author]:
    pass


@overload
def list_authors(conn: sqlc.AsyncConnection) -> AsyncIterator[models.Author]:
    pass


def list_authors(conn: sqlc.GenericConnection) -> sqlc.IteratorReturn[models.Author]:
    return conn.execute_many_model(models.Author, LIST_AUTHORS)


