// Code generated by sqlc. DO NOT EDIT.

package com.example.authors

import java.sql.Connection
import java.sql.SQLException

const val createAuthor = """-- name: createAuthor :one
INSERT INTO authors (
          name, bio
) VALUES (
  ?, ?
)
RETURNING id, name, bio
"""

data class CreateAuthorParams (
  val name: String,
  val bio: String?
)

const val deleteAuthor = """-- name: deleteAuthor :exec
DELETE FROM authors
WHERE id = ?
"""

const val getAuthor = """-- name: getAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1
"""

const val listAuthors = """-- name: listAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
"""

class QueriesImpl(private val conn: Connection) {

  @Throws(SQLException::class)
  fun createAuthor(arg: CreateAuthorParams): Author {
    val stmt = conn.prepareStatement(createAuthor)
    stmt.setString(1, arg.name)
    stmt.setString(2, arg.bio)

    return stmt.executeQuery().use { results ->
      if (!results.next()) {
        throw SQLException("no rows in result set")
      }
      val ret = Author(
      results.getLong(1),
      results.getString(2),
      results.getString(3)
    )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

  @Throws(SQLException::class)
  fun deleteAuthor(id: Long) {
    val stmt = conn.prepareStatement(deleteAuthor)
    stmt.setLong(1, id)

    stmt.execute()
    stmt.close()
  }

  @Throws(SQLException::class)
  fun getAuthor(id: Long): Author {
    val stmt = conn.prepareStatement(getAuthor)
    stmt.setLong(1, id)

    return stmt.executeQuery().use { results ->
      if (!results.next()) {
        throw SQLException("no rows in result set")
      }
      val ret = Author(
      results.getLong(1),
      results.getString(2),
      results.getString(3)
    )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

  @Throws(SQLException::class)
  fun listAuthors(): List<Author> {
    val stmt = conn.prepareStatement(listAuthors)
    
    return stmt.executeQuery().use { results ->
      val ret = mutableListOf<Author>()
      while (results.next()) {
          ret.add(Author(
      results.getLong(1),
      results.getString(2),
      results.getString(3)
    ))
      }
      ret
    }
  }

}

