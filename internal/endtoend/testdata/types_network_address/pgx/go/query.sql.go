// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package querytest

import (
	"context"

	"github.com/jackc/pgtype"
)

const findBarByAddr = `-- name: FindBarByAddr :one
SELECT addr, nullable_addr FROM bar
WHERE addr = $1
`

func (q *Queries) FindBarByAddr(ctx context.Context, addr pgtype.Macaddr) (Bar, error) {
	row := q.db.QueryRow(ctx, findBarByAddr, addr)
	var i Bar
	err := row.Scan(&i.Addr, &i.NullableAddr)
	return i, err
}

const findFooByCIDR = `-- name: FindFooByCIDR :one
SELECT present_ip, nullable_ip, present_cidr, nullable_cidr FROM foo
WHERE present_cidr = $1
`

func (q *Queries) FindFooByCIDR(ctx context.Context, presentCidr pgtype.CIDR) (Foo, error) {
	row := q.db.QueryRow(ctx, findFooByCIDR, presentCidr)
	var i Foo
	err := row.Scan(
		&i.PresentIp,
		&i.NullableIp,
		&i.PresentCidr,
		&i.NullableCidr,
	)
	return i, err
}

const findFooByIP = `-- name: FindFooByIP :one
SELECT present_ip, nullable_ip, present_cidr, nullable_cidr FROM foo
WHERE present_ip = $1
`

func (q *Queries) FindFooByIP(ctx context.Context, presentIp pgtype.Inet) (Foo, error) {
	row := q.db.QueryRow(ctx, findFooByIP, presentIp)
	var i Foo
	err := row.Scan(
		&i.PresentIp,
		&i.NullableIp,
		&i.PresentCidr,
		&i.NullableCidr,
	)
	return i, err
}

const listBar = `-- name: ListBar :many
SELECT addr, nullable_addr FROM bar
`

func (q *Queries) ListBar(ctx context.Context) ([]Bar, error) {
	rows, err := q.db.Query(ctx, listBar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bar
	for rows.Next() {
		var i Bar
		if err := rows.Scan(&i.Addr, &i.NullableAddr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFoo = `-- name: ListFoo :many
SELECT present_ip, nullable_ip, present_cidr, nullable_cidr FROM foo
`

func (q *Queries) ListFoo(ctx context.Context) ([]Foo, error) {
	rows, err := q.db.Query(ctx, listFoo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Foo
	for rows.Next() {
		var i Foo
		if err := rows.Scan(
			&i.PresentIp,
			&i.NullableIp,
			&i.PresentCidr,
			&i.NullableCidr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
