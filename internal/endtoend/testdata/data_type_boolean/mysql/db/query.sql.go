// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const listBar = `-- name: ListBar :many
SELECT col_a, col_b, col_c FROM bar
`

type ListBarRow struct {
	ColA sql.NullInt32
	ColB sql.NullInt32
	ColC sql.NullInt32
}

func (q *Queries) ListBar(ctx context.Context) ([]ListBarRow, error) {
	rows, err := q.db.QueryContext(ctx, listBar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBarRow
	for rows.Next() {
		var i ListBarRow
		if err := rows.Scan(&i.ColA, &i.ColB, &i.ColC); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFoo = `-- name: ListFoo :many
SELECT col_a, col_b, col_c FROM foo
`

type ListFooRow struct {
	ColA int32
	ColB int32
	ColC int32
}

func (q *Queries) ListFoo(ctx context.Context) ([]ListFooRow, error) {
	rows, err := q.db.QueryContext(ctx, listFoo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFooRow
	for rows.Next() {
		var i ListFooRow
		if err := rows.Scan(&i.ColA, &i.ColB, &i.ColC); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
