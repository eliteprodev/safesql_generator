// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package querytest

import (
	"context"
)

const selectUserArg = `-- name: SelectUserArg :many
SELECT first_name from
users where (? = id OR ? = 0)
`

func (q *Queries) SelectUserArg(ctx context.Context, id interface{}) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectUserArg, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var first_name string
		if err := rows.Scan(&first_name); err != nil {
			return nil, err
		}
		items = append(items, first_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserQuestion = `-- name: SelectUserQuestion :many
SELECT first_name from
users where (? = id OR  ? = 0)
`

type SelectUserQuestionParams struct {
	Column1 interface{}
	Column2 interface{}
}

func (q *Queries) SelectUserQuestion(ctx context.Context, arg SelectUserQuestionParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectUserQuestion, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var first_name string
		if err := rows.Scan(&first_name); err != nil {
			return nil, err
		}
		items = append(items, first_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
