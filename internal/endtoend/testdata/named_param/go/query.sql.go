// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package querytest

import (
	"context"
)

const atParams = `-- name: AtParams :many
SELECT name FROM foo WHERE name = $1 AND $2::bool
`

type AtParamsParams struct {
	Slug   string
	Filter bool
}

func (q *Queries) AtParams(ctx context.Context, arg AtParamsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, atParams, arg.Slug, arg.Filter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcParams = `-- name: FuncParams :many
SELECT name FROM foo WHERE name = $1 AND $2::bool
`

type FuncParamsParams struct {
	Slug   string
	Filter bool
}

func (q *Queries) FuncParams(ctx context.Context, arg FuncParamsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, funcParams, arg.Slug, arg.Filter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
