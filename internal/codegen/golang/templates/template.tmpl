{{define "dbFile"}}// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

{{template "dbCode" . }}
{{end}}

{{define "dbCode"}}

{{if eq .SQLPackage "pgx/v4"}}
	{{- template "dbCodeTemplatePgx" .}}
{{else}}
	{{- template "dbCodeTemplateStd" .}}
{{end}}

{{end}}

{{define "interfaceFile"}}// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

{{template "interfaceCode" . }}
{{end}}

{{define "interfaceCode"}}
	{{if eq .SQLPackage "pgx/v4"}}
		{{- template "interfaceCodePgx" .}}
	{{else}}
		{{- template "interfaceCodeStd" .}}
	{{end}}
{{end}}

{{define "modelsFile"}}// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

{{template "modelsCode" . }}
{{end}}

{{define "modelsCode"}}
{{range .Enums}}
{{if .Comment}}{{comment .Comment}}{{end}}
type {{.Name}} string

const (
	{{- range .Constants}}
	{{.Name}} {{.Type}} = "{{.Value}}"
	{{- end}}
)

func (e *{{.Name}}) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = {{.Name}}(s)
	case string:
		*e = {{.Name}}(s)
	default:
		return fmt.Errorf("unsupported scan type for {{.Name}}: %T", src)
	}
	return nil
}

type Null{{.Name}} struct {
	{{.Name}} {{.Name}}
	Valid  bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *Null{{.Name}}) Scan(value interface{}) error {
	if value == nil {
		ns.{{.Name}}, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.{{.Name}}.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns Null{{.Name}}) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.{{.Name}}, nil
}


{{ if $.EmitEnumValidMethod }}
func (e {{.Name}}) Valid() bool {
  switch e {
  case {{ range $idx, $name := .Constants }}{{ if ne $idx 0 }},{{ "\n" }}{{ end }}{{ .Name }}{{ end }}:
    return true
  }
  return false
}
{{ end }}

{{ if $.EmitAllEnumValues }}
func All{{ .Name }}Values() []{{ .Name }} {
	return []{{ .Name }}{ {{ range .Constants}}{{ "\n" }}{{ .Name }},{{ end }}
	}
}
{{ end }}
{{end}}

{{range .Structs}}
{{if .Comment}}{{comment .Comment}}{{end}}
type {{.Name}} struct { {{- range .Fields}}
  {{- if .Comment}}
  {{comment .Comment}}{{else}}
  {{- end}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{define "queryFile"}}// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}
// source: {{.SourceName}}

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

{{template "queryCode" . }}
{{end}}

{{define "queryCode"}}
{{if eq .SQLPackage "pgx/v4"}}
    {{- template "queryCodePgx" .}}
{{else}}
    {{- template "queryCodeStd" .}}
{{end}}
{{end}}

{{define "copyfromFile"}}// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}
// source: {{.SourceName}}

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)

{{template "copyfromCode" . }}
{{end}}

{{define "copyfromCode"}}
{{if eq .SQLPackage "pgx/v4"}}
    {{- template "copyfromCodePgx" .}}
{{end}}
{{end}}

{{define "batchFile"}}// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}
// source: {{.SourceName}}

package {{.Package}}

import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)
{{template "batchCode" . }}
{{end}}

{{define "batchCode"}}
{{if eq .SQLPackage "pgx/v4"}}
    {{- template "batchCodePgx" .}}
{{end}}
{{end}}
