// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: internal/remote/gen.proto

package remote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenClient is the client API for Gen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type genClient struct {
	cc grpc.ClientConnInterface
}

func NewGenClient(cc grpc.ClientConnInterface) GenClient {
	return &genClient{cc}
}

func (c *genClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, "/remote.sqlc.dev.Gen.v1.Gen/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenServer is the server API for Gen service.
// All implementations must embed UnimplementedGenServer
// for forward compatibility
type GenServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedGenServer()
}

// UnimplementedGenServer must be embedded to have forward compatible implementations.
type UnimplementedGenServer struct {
}

func (UnimplementedGenServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedGenServer) mustEmbedUnimplementedGenServer() {}

// UnsafeGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenServer will
// result in compilation errors.
type UnsafeGenServer interface {
	mustEmbedUnimplementedGenServer()
}

func RegisterGenServer(s grpc.ServiceRegistrar, srv GenServer) {
	s.RegisterService(&Gen_ServiceDesc, srv)
}

func _Gen_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.sqlc.dev.Gen.v1.Gen/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gen_ServiceDesc is the grpc.ServiceDesc for Gen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.sqlc.dev.Gen.v1.Gen",
	HandlerType: (*GenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _Gen_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/remote/gen.proto",
}
