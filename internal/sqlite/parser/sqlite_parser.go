// Code generated from SQLite.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // SQLite

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 159, 1679,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 3, 2, 7, 2, 168, 10, 2, 12, 2, 14, 2, 171,
	11, 2, 3, 2, 3, 2, 3, 3, 7, 3, 176, 10, 3, 12, 3, 14, 3, 179, 11, 3, 3,
	3, 3, 3, 6, 3, 183, 10, 3, 13, 3, 14, 3, 184, 3, 3, 7, 3, 188, 10, 3, 12,
	3, 14, 3, 191, 11, 3, 3, 3, 7, 3, 194, 10, 3, 12, 3, 14, 3, 197, 11, 3,
	3, 4, 3, 4, 3, 4, 5, 4, 202, 10, 4, 5, 4, 204, 10, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 5, 4, 236, 10, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5,
	243, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 251, 10, 5, 3, 5,
	5, 5, 254, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 263,
	10, 6, 3, 7, 3, 7, 5, 7, 267, 10, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8,
	5, 8, 275, 10, 8, 3, 8, 3, 8, 5, 8, 279, 10, 8, 5, 8, 281, 10, 8, 3, 9,
	3, 9, 3, 9, 5, 9, 286, 10, 9, 5, 9, 288, 10, 9, 3, 10, 5, 10, 291, 10,
	10, 3, 10, 3, 10, 3, 10, 5, 10, 296, 10, 10, 3, 10, 3, 10, 5, 10, 300,
	10, 10, 3, 10, 6, 10, 303, 10, 10, 13, 10, 14, 10, 304, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 7, 10, 312, 10, 10, 12, 10, 14, 10, 315, 11, 10, 5, 10,
	317, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 323, 10, 10, 5, 10, 325,
	10, 10, 3, 11, 3, 11, 5, 11, 329, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5,
	11, 335, 10, 11, 3, 11, 3, 11, 3, 11, 5, 11, 340, 10, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 7, 11, 349, 10, 11, 12, 11, 14, 11,
	352, 11, 11, 3, 11, 3, 11, 3, 11, 5, 11, 357, 10, 11, 3, 12, 3, 12, 5,
	12, 361, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 367, 10, 12, 3, 12,
	3, 12, 3, 12, 5, 12, 372, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7,
	12, 379, 10, 12, 12, 12, 14, 12, 382, 11, 12, 3, 12, 3, 12, 7, 12, 386,
	10, 12, 12, 12, 14, 12, 389, 11, 12, 3, 12, 3, 12, 3, 12, 5, 12, 394, 10,
	12, 3, 12, 3, 12, 5, 12, 398, 10, 12, 3, 13, 3, 13, 5, 13, 402, 10, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 408, 10, 13, 3, 13, 3, 13, 3, 13, 5,
	13, 413, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 420, 10, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7, 13, 429, 10, 13, 12,
	13, 14, 13, 432, 11, 13, 5, 13, 434, 10, 13, 5, 13, 436, 10, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 5, 13, 442, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5,
	13, 448, 10, 13, 3, 13, 3, 13, 5, 13, 452, 10, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 5, 13, 459, 10, 13, 3, 13, 3, 13, 6, 13, 463, 10, 13, 13,
	13, 14, 13, 464, 3, 13, 3, 13, 3, 14, 3, 14, 5, 14, 471, 10, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 5, 14, 477, 10, 14, 3, 14, 3, 14, 3, 14, 5, 14, 482,
	10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 5, 15, 494, 10, 15, 3, 15, 3, 15, 3, 15, 5, 15, 499, 10, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 508, 10, 15, 12, 15,
	14, 15, 511, 11, 15, 3, 15, 3, 15, 5, 15, 515, 10, 15, 3, 16, 5, 16, 518,
	10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 525, 10, 16, 3, 17, 5,
	17, 528, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 535, 10, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 7, 17, 542, 10, 17, 12, 17, 14, 17,
	545, 11, 17, 5, 17, 547, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 553,
	10, 17, 5, 17, 555, 10, 17, 3, 18, 3, 18, 5, 18, 559, 10, 18, 3, 18, 3,
	18, 3, 19, 3, 19, 3, 19, 3, 19, 5, 19, 567, 10, 19, 3, 19, 3, 19, 3, 19,
	5, 19, 572, 10, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 580,
	10, 20, 3, 20, 3, 20, 3, 20, 5, 20, 585, 10, 20, 3, 20, 3, 20, 3, 21, 3,
	21, 3, 21, 3, 21, 5, 21, 593, 10, 21, 3, 21, 3, 21, 3, 21, 5, 21, 598,
	10, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 606, 10, 22, 3,
	22, 3, 22, 3, 22, 5, 22, 611, 10, 22, 3, 22, 3, 22, 3, 23, 5, 23, 616,
	10, 23, 3, 23, 3, 23, 3, 23, 3, 23, 7, 23, 622, 10, 23, 12, 23, 14, 23,
	625, 11, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 7, 23, 632, 10, 23, 12,
	23, 14, 23, 635, 11, 23, 5, 23, 637, 10, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	5, 23, 643, 10, 23, 5, 23, 645, 10, 23, 3, 24, 5, 24, 648, 10, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 667, 10, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 5, 24, 673, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7,
	24, 680, 10, 24, 12, 24, 14, 24, 683, 11, 24, 3, 24, 3, 24, 5, 24, 687,
	10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 694, 10, 24, 12, 24,
	14, 24, 697, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 705,
	10, 24, 12, 24, 14, 24, 708, 11, 24, 3, 24, 3, 24, 7, 24, 712, 10, 24,
	12, 24, 14, 24, 715, 11, 24, 3, 24, 3, 24, 3, 24, 5, 24, 720, 10, 24, 3,
	25, 3, 25, 3, 25, 3, 25, 5, 25, 726, 10, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 5, 25, 735, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 5, 26, 742, 10, 26, 3, 26, 3, 26, 5, 26, 746, 10, 26, 5, 26, 748, 10,
	26, 3, 27, 3, 27, 5, 27, 752, 10, 27, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28,
	5, 28, 759, 10, 28, 5, 28, 761, 10, 28, 3, 28, 3, 28, 5, 28, 765, 10, 28,
	3, 28, 5, 28, 768, 10, 28, 3, 29, 3, 29, 3, 29, 3, 30, 5, 30, 774, 10,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 782, 10, 30, 12, 30,
	14, 30, 785, 11, 30, 5, 30, 787, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5,
	30, 793, 10, 30, 5, 30, 795, 10, 30, 3, 31, 5, 31, 798, 10, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 7, 31, 804, 10, 31, 12, 31, 14, 31, 807, 11, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 7, 31, 814, 10, 31, 12, 31, 14, 31, 817,
	11, 31, 5, 31, 819, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 825, 10,
	31, 5, 31, 827, 10, 31, 3, 32, 3, 32, 5, 32, 831, 10, 32, 3, 32, 3, 32,
	3, 32, 7, 32, 836, 10, 32, 12, 32, 14, 32, 839, 11, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 7, 32, 845, 10, 32, 12, 32, 14, 32, 848, 11, 32, 3, 32, 5, 32,
	851, 10, 32, 5, 32, 853, 10, 32, 3, 32, 3, 32, 5, 32, 857, 10, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 7, 32, 864, 10, 32, 12, 32, 14, 32, 867, 11,
	32, 3, 32, 3, 32, 5, 32, 871, 10, 32, 5, 32, 873, 10, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 7, 32, 880, 10, 32, 12, 32, 14, 32, 883, 11, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 7, 32, 891, 10, 32, 12, 32, 14,
	32, 894, 11, 32, 3, 32, 3, 32, 7, 32, 898, 10, 32, 12, 32, 14, 32, 901,
	11, 32, 5, 32, 903, 10, 32, 3, 33, 5, 33, 906, 10, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 919,
	10, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 7, 33, 931, 10, 33, 12, 33, 14, 33, 934, 11, 33, 3, 33, 3, 33, 5,
	33, 938, 10, 33, 3, 34, 5, 34, 941, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 954, 10, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 7, 34,
	966, 10, 34, 12, 34, 14, 34, 969, 11, 34, 3, 34, 3, 34, 5, 34, 973, 10,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 7, 34, 980, 10, 34, 12, 34, 14,
	34, 983, 11, 34, 5, 34, 985, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34,
	991, 10, 34, 5, 34, 993, 10, 34, 3, 35, 3, 35, 3, 36, 3, 36, 5, 36, 999,
	10, 36, 3, 36, 7, 36, 1002, 10, 36, 12, 36, 14, 36, 1005, 11, 36, 3, 37,
	6, 37, 1008, 10, 37, 13, 37, 14, 37, 1009, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1022, 10, 37, 3, 38, 3,
	38, 5, 38, 1026, 10, 38, 3, 38, 3, 38, 3, 38, 5, 38, 1031, 10, 38, 3, 38,
	3, 38, 5, 38, 1035, 10, 38, 3, 38, 5, 38, 1038, 10, 38, 3, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38,
	3, 38, 3, 38, 3, 38, 5, 38, 1056, 10, 38, 3, 38, 3, 38, 3, 38, 5, 38, 1061,
	10, 38, 3, 39, 3, 39, 3, 39, 5, 39, 1066, 10, 39, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 5, 40, 1074, 10, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1079,
	10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1088, 10,
	40, 3, 40, 3, 40, 3, 40, 7, 40, 1093, 10, 40, 12, 40, 14, 40, 1096, 11,
	40, 3, 40, 5, 40, 1099, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1115, 10,
	40, 3, 40, 5, 40, 1118, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	5, 40, 1126, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 6, 40, 1133, 10,
	40, 13, 40, 14, 40, 1134, 3, 40, 3, 40, 5, 40, 1139, 10, 40, 3, 40, 3,
	40, 3, 40, 5, 40, 1144, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	5, 40, 1173, 10, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1178, 10, 40, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1187, 10, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 7, 40, 1195, 10, 40, 12, 40, 14, 40, 1198,
	11, 40, 5, 40, 1200, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1206, 10,
	40, 3, 40, 5, 40, 1209, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40,
	1216, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1222, 10, 40, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 5, 40, 1229, 10, 40, 7, 40, 1231, 10, 40, 12,
	40, 14, 40, 1234, 11, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 7,
	41, 1242, 10, 41, 12, 41, 14, 41, 1245, 11, 41, 3, 41, 3, 41, 5, 41, 1249,
	10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 5, 41, 1261, 10, 41, 3, 41, 3, 41, 5, 41, 1265, 10, 41, 7, 41, 1267,
	10, 41, 12, 41, 14, 41, 1270, 11, 41, 3, 41, 5, 41, 1273, 10, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1280, 10, 41, 5, 41, 1282, 10, 41, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1290, 10, 42, 3, 42, 3, 42,
	3, 43, 3, 43, 3, 43, 5, 43, 1297, 10, 43, 3, 43, 5, 43, 1300, 10, 43, 3,
	44, 3, 44, 5, 44, 1304, 10, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1309, 10, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 7, 44, 1315, 10, 44, 12, 44, 14, 44, 1318,
	11, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 7, 44, 1334, 10, 44, 12, 44, 14, 44,
	1337, 11, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1342, 10, 44, 3, 45, 3, 45, 5,
	45, 1346, 10, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1351, 10, 45, 12, 45, 14,
	45, 1354, 11, 45, 3, 46, 3, 46, 3, 46, 5, 46, 1359, 10, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 1367, 10, 46, 3, 47, 3, 47, 3, 47, 5,
	47, 1372, 10, 47, 3, 47, 5, 47, 1375, 10, 47, 3, 48, 3, 48, 3, 48, 5, 48,
	1380, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 7, 49, 1387, 10, 49, 12,
	49, 14, 49, 1390, 11, 49, 3, 49, 3, 49, 5, 49, 1394, 10, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	5, 50, 1408, 10, 50, 3, 50, 5, 50, 1411, 10, 50, 5, 50, 1413, 10, 50, 3,
	51, 3, 51, 3, 51, 5, 51, 1418, 10, 51, 3, 51, 3, 51, 5, 51, 1422, 10, 51,
	3, 51, 5, 51, 1425, 10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1432,
	10, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1437, 10, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 7, 51, 1444, 10, 51, 12, 51, 14, 51, 1447, 11, 51, 5, 51,
	1449, 10, 51, 3, 51, 3, 51, 5, 51, 1453, 10, 51, 3, 51, 5, 51, 1456, 10,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 7, 51, 1462, 10, 51, 12, 51, 14, 51, 1465,
	11, 51, 3, 51, 5, 51, 1468, 10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 5, 51, 1476, 10, 51, 3, 51, 5, 51, 1479, 10, 51, 5, 51, 1481, 10,
	51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 7, 52, 1488, 10, 52, 12, 52, 14,
	52, 1491, 11, 52, 3, 53, 3, 53, 5, 53, 1495, 10, 53, 3, 53, 3, 53, 5, 53,
	1499, 10, 53, 3, 53, 3, 53, 5, 53, 1503, 10, 53, 3, 53, 5, 53, 1506, 10,
	53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 7, 54, 1515, 10, 54,
	12, 54, 14, 54, 1518, 11, 54, 3, 54, 3, 54, 5, 54, 1522, 10, 54, 3, 55,
	3, 55, 5, 55, 1526, 10, 55, 3, 55, 3, 55, 3, 55, 7, 55, 1531, 10, 55, 12,
	55, 14, 55, 1534, 11, 55, 3, 55, 3, 55, 3, 55, 3, 55, 7, 55, 1540, 10,
	55, 12, 55, 14, 55, 1543, 11, 55, 3, 55, 5, 55, 1546, 10, 55, 5, 55, 1548,
	10, 55, 3, 55, 3, 55, 5, 55, 1552, 10, 55, 3, 55, 3, 55, 3, 55, 3, 55,
	3, 55, 7, 55, 1559, 10, 55, 12, 55, 14, 55, 1562, 11, 55, 3, 55, 3, 55,
	5, 55, 1566, 10, 55, 5, 55, 1568, 10, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3,
	55, 7, 55, 1575, 10, 55, 12, 55, 14, 55, 1578, 11, 55, 3, 55, 3, 55, 3,
	55, 3, 55, 3, 55, 3, 55, 7, 55, 1586, 10, 55, 12, 55, 14, 55, 1589, 11,
	55, 3, 55, 3, 55, 7, 55, 1593, 10, 55, 12, 55, 14, 55, 1596, 11, 55, 5,
	55, 1598, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 1605, 10, 56,
	3, 57, 5, 57, 1608, 10, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 59, 3, 59, 3,
	60, 3, 60, 3, 61, 3, 61, 5, 61, 1620, 10, 61, 3, 62, 3, 62, 3, 63, 3, 63,
	3, 64, 3, 64, 3, 65, 3, 65, 3, 66, 3, 66, 3, 67, 3, 67, 3, 68, 3, 68, 3,
	69, 3, 69, 3, 70, 3, 70, 3, 71, 3, 71, 3, 72, 3, 72, 3, 73, 3, 73, 3, 74,
	3, 74, 3, 75, 3, 75, 3, 76, 3, 76, 3, 77, 3, 77, 3, 78, 3, 78, 3, 79, 3,
	79, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1666,
	10, 81, 3, 82, 3, 82, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83,
	5, 83, 1677, 10, 83, 3, 83, 4, 380, 1009, 3, 78, 84, 2, 4, 6, 8, 10, 12,
	14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48,
	50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,
	86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116,
	118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146,
	148, 150, 152, 154, 156, 158, 160, 162, 164, 2, 21, 5, 2, 60, 60, 71, 71,
	84, 84, 4, 2, 49, 49, 68, 68, 4, 2, 7, 7, 108, 108, 3, 2, 133, 134, 4,
	2, 31, 31, 64, 64, 4, 2, 36, 36, 62, 62, 7, 2, 27, 27, 74, 74, 83, 83,
	124, 124, 127, 127, 4, 2, 9, 9, 14, 15, 3, 2, 10, 11, 3, 2, 16, 19, 3,
	2, 20, 23, 4, 2, 8, 8, 24, 26, 6, 2, 79, 79, 99, 99, 101, 101, 120, 120,
	4, 2, 61, 61, 141, 141, 5, 2, 27, 27, 74, 74, 127, 127, 6, 2, 54, 56, 106,
	106, 152, 152, 154, 155, 4, 2, 10, 12, 104, 104, 4, 2, 151, 151, 154, 154,
	3, 2, 27, 150, 2, 1933, 2, 169, 3, 2, 2, 2, 4, 177, 3, 2, 2, 2, 6, 203,
	3, 2, 2, 2, 8, 237, 3, 2, 2, 2, 10, 255, 3, 2, 2, 2, 12, 264, 3, 2, 2,
	2, 14, 272, 3, 2, 2, 2, 16, 282, 3, 2, 2, 2, 18, 290, 3, 2, 2, 2, 20, 326,
	3, 2, 2, 2, 22, 358, 3, 2, 2, 2, 24, 399, 3, 2, 2, 2, 26, 468, 3, 2, 2,
	2, 28, 487, 3, 2, 2, 2, 30, 517, 3, 2, 2, 2, 32, 527, 3, 2, 2, 2, 34, 556,
	3, 2, 2, 2, 36, 562, 3, 2, 2, 2, 38, 575, 3, 2, 2, 2, 40, 588, 3, 2, 2,
	2, 42, 601, 3, 2, 2, 2, 44, 615, 3, 2, 2, 2, 46, 647, 3, 2, 2, 2, 48, 721,
	3, 2, 2, 2, 50, 736, 3, 2, 2, 2, 52, 749, 3, 2, 2, 2, 54, 755, 3, 2, 2,
	2, 56, 769, 3, 2, 2, 2, 58, 773, 3, 2, 2, 2, 60, 797, 3, 2, 2, 2, 62, 902,
	3, 2, 2, 2, 64, 905, 3, 2, 2, 2, 66, 940, 3, 2, 2, 2, 68, 994, 3, 2, 2,
	2, 70, 996, 3, 2, 2, 2, 72, 1007, 3, 2, 2, 2, 74, 1025, 3, 2, 2, 2, 76,
	1065, 3, 2, 2, 2, 78, 1143, 3, 2, 2, 2, 80, 1235, 3, 2, 2, 2, 82, 1283,
	3, 2, 2, 2, 84, 1293, 3, 2, 2, 2, 86, 1303, 3, 2, 2, 2, 88, 1343, 3, 2,
	2, 2, 90, 1358, 3, 2, 2, 2, 92, 1368, 3, 2, 2, 2, 94, 1379, 3, 2, 2, 2,
	96, 1381, 3, 2, 2, 2, 98, 1412, 3, 2, 2, 2, 100, 1480, 3, 2, 2, 2, 102,
	1482, 3, 2, 2, 2, 104, 1505, 3, 2, 2, 2, 106, 1521, 3, 2, 2, 2, 108, 1597,
	3, 2, 2, 2, 110, 1604, 3, 2, 2, 2, 112, 1607, 3, 2, 2, 2, 114, 1611, 3,
	2, 2, 2, 116, 1613, 3, 2, 2, 2, 118, 1615, 3, 2, 2, 2, 120, 1619, 3, 2,
	2, 2, 122, 1621, 3, 2, 2, 2, 124, 1623, 3, 2, 2, 2, 126, 1625, 3, 2, 2,
	2, 128, 1627, 3, 2, 2, 2, 130, 1629, 3, 2, 2, 2, 132, 1631, 3, 2, 2, 2,
	134, 1633, 3, 2, 2, 2, 136, 1635, 3, 2, 2, 2, 138, 1637, 3, 2, 2, 2, 140,
	1639, 3, 2, 2, 2, 142, 1641, 3, 2, 2, 2, 144, 1643, 3, 2, 2, 2, 146, 1645,
	3, 2, 2, 2, 148, 1647, 3, 2, 2, 2, 150, 1649, 3, 2, 2, 2, 152, 1651, 3,
	2, 2, 2, 154, 1653, 3, 2, 2, 2, 156, 1655, 3, 2, 2, 2, 158, 1657, 3, 2,
	2, 2, 160, 1665, 3, 2, 2, 2, 162, 1667, 3, 2, 2, 2, 164, 1676, 3, 2, 2,
	2, 166, 168, 5, 4, 3, 2, 167, 166, 3, 2, 2, 2, 168, 171, 3, 2, 2, 2, 169,
	167, 3, 2, 2, 2, 169, 170, 3, 2, 2, 2, 170, 172, 3, 2, 2, 2, 171, 169,
	3, 2, 2, 2, 172, 173, 7, 2, 2, 3, 173, 3, 3, 2, 2, 2, 174, 176, 7, 3, 2,
	2, 175, 174, 3, 2, 2, 2, 176, 179, 3, 2, 2, 2, 177, 175, 3, 2, 2, 2, 177,
	178, 3, 2, 2, 2, 178, 180, 3, 2, 2, 2, 179, 177, 3, 2, 2, 2, 180, 189,
	5, 6, 4, 2, 181, 183, 7, 3, 2, 2, 182, 181, 3, 2, 2, 2, 183, 184, 3, 2,
	2, 2, 184, 182, 3, 2, 2, 2, 184, 185, 3, 2, 2, 2, 185, 186, 3, 2, 2, 2,
	186, 188, 5, 6, 4, 2, 187, 182, 3, 2, 2, 2, 188, 191, 3, 2, 2, 2, 189,
	187, 3, 2, 2, 2, 189, 190, 3, 2, 2, 2, 190, 195, 3, 2, 2, 2, 191, 189,
	3, 2, 2, 2, 192, 194, 7, 3, 2, 2, 193, 192, 3, 2, 2, 2, 194, 197, 3, 2,
	2, 2, 195, 193, 3, 2, 2, 2, 195, 196, 3, 2, 2, 2, 196, 5, 3, 2, 2, 2, 197,
	195, 3, 2, 2, 2, 198, 201, 7, 73, 2, 2, 199, 200, 7, 116, 2, 2, 200, 202,
	7, 113, 2, 2, 201, 199, 3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 204, 3,
	2, 2, 2, 203, 198, 3, 2, 2, 2, 203, 204, 3, 2, 2, 2, 204, 235, 3, 2, 2,
	2, 205, 236, 5, 8, 5, 2, 206, 236, 5, 10, 6, 2, 207, 236, 5, 12, 7, 2,
	208, 236, 5, 14, 8, 2, 209, 236, 5, 16, 9, 2, 210, 236, 5, 18, 10, 2, 211,
	236, 5, 20, 11, 2, 212, 236, 5, 22, 12, 2, 213, 236, 5, 24, 13, 2, 214,
	236, 5, 26, 14, 2, 215, 236, 5, 28, 15, 2, 216, 236, 5, 30, 16, 2, 217,
	236, 5, 32, 17, 2, 218, 236, 5, 34, 18, 2, 219, 236, 5, 36, 19, 2, 220,
	236, 5, 38, 20, 2, 221, 236, 5, 40, 21, 2, 222, 236, 5, 42, 22, 2, 223,
	236, 5, 44, 23, 2, 224, 236, 5, 46, 24, 2, 225, 236, 5, 48, 25, 2, 226,
	236, 5, 50, 26, 2, 227, 236, 5, 52, 27, 2, 228, 236, 5, 54, 28, 2, 229,
	236, 5, 56, 29, 2, 230, 236, 5, 58, 30, 2, 231, 236, 5, 60, 31, 2, 232,
	236, 5, 64, 33, 2, 233, 236, 5, 66, 34, 2, 234, 236, 5, 68, 35, 2, 235,
	205, 3, 2, 2, 2, 235, 206, 3, 2, 2, 2, 235, 207, 3, 2, 2, 2, 235, 208,
	3, 2, 2, 2, 235, 209, 3, 2, 2, 2, 235, 210, 3, 2, 2, 2, 235, 211, 3, 2,
	2, 2, 235, 212, 3, 2, 2, 2, 235, 213, 3, 2, 2, 2, 235, 214, 3, 2, 2, 2,
	235, 215, 3, 2, 2, 2, 235, 216, 3, 2, 2, 2, 235, 217, 3, 2, 2, 2, 235,
	218, 3, 2, 2, 2, 235, 219, 3, 2, 2, 2, 235, 220, 3, 2, 2, 2, 235, 221,
	3, 2, 2, 2, 235, 222, 3, 2, 2, 2, 235, 223, 3, 2, 2, 2, 235, 224, 3, 2,
	2, 2, 235, 225, 3, 2, 2, 2, 235, 226, 3, 2, 2, 2, 235, 227, 3, 2, 2, 2,
	235, 228, 3, 2, 2, 2, 235, 229, 3, 2, 2, 2, 235, 230, 3, 2, 2, 2, 235,
	231, 3, 2, 2, 2, 235, 232, 3, 2, 2, 2, 235, 233, 3, 2, 2, 2, 235, 234,
	3, 2, 2, 2, 236, 7, 3, 2, 2, 2, 237, 238, 7, 32, 2, 2, 238, 242, 7, 132,
	2, 2, 239, 240, 5, 130, 66, 2, 240, 241, 7, 4, 2, 2, 241, 243, 3, 2, 2,
	2, 242, 239, 3, 2, 2, 2, 242, 243, 3, 2, 2, 2, 243, 244, 3, 2, 2, 2, 244,
	253, 5, 136, 69, 2, 245, 246, 7, 123, 2, 2, 246, 247, 7, 136, 2, 2, 247,
	254, 5, 140, 71, 2, 248, 250, 7, 29, 2, 2, 249, 251, 7, 48, 2, 2, 250,
	249, 3, 2, 2, 2, 250, 251, 3, 2, 2, 2, 251, 252, 3, 2, 2, 2, 252, 254,
	5, 70, 36, 2, 253, 245, 3, 2, 2, 2, 253, 248, 3, 2, 2, 2, 254, 9, 3, 2,
	2, 2, 255, 262, 7, 33, 2, 2, 256, 263, 5, 130, 66, 2, 257, 263, 5, 138,
	70, 2, 258, 259, 5, 130, 66, 2, 259, 260, 7, 4, 2, 2, 260, 261, 5, 138,
	70, 2, 261, 263, 3, 2, 2, 2, 262, 256, 3, 2, 2, 2, 262, 257, 3, 2, 2, 2,
	262, 258, 3, 2, 2, 2, 262, 263, 3, 2, 2, 2, 263, 11, 3, 2, 2, 2, 264, 266,
	7, 37, 2, 2, 265, 267, 7, 57, 2, 2, 266, 265, 3, 2, 2, 2, 266, 267, 3,
	2, 2, 2, 267, 268, 3, 2, 2, 2, 268, 269, 5, 78, 40, 2, 269, 270, 7, 35,
	2, 2, 270, 271, 5, 130, 66, 2, 271, 13, 3, 2, 2, 2, 272, 274, 7, 40, 2,
	2, 273, 275, 9, 2, 2, 2, 274, 273, 3, 2, 2, 2, 274, 275, 3, 2, 2, 2, 275,
	280, 3, 2, 2, 2, 276, 278, 7, 137, 2, 2, 277, 279, 5, 162, 82, 2, 278,
	277, 3, 2, 2, 2, 278, 279, 3, 2, 2, 2, 279, 281, 3, 2, 2, 2, 280, 276,
	3, 2, 2, 2, 280, 281, 3, 2, 2, 2, 281, 15, 3, 2, 2, 2, 282, 287, 9, 3,
	2, 2, 283, 285, 7, 137, 2, 2, 284, 286, 5, 162, 82, 2, 285, 284, 3, 2,
	2, 2, 285, 286, 3, 2, 2, 2, 286, 288, 3, 2, 2, 2, 287, 283, 3, 2, 2, 2,
	287, 288, 3, 2, 2, 2, 288, 17, 3, 2, 2, 2, 289, 291, 5, 88, 45, 2, 290,
	289, 3, 2, 2, 2, 290, 291, 3, 2, 2, 2, 291, 292, 3, 2, 2, 2, 292, 302,
	5, 108, 55, 2, 293, 295, 7, 139, 2, 2, 294, 296, 7, 31, 2, 2, 295, 294,
	3, 2, 2, 2, 295, 296, 3, 2, 2, 2, 296, 300, 3, 2, 2, 2, 297, 300, 7, 92,
	2, 2, 298, 300, 7, 70, 2, 2, 299, 293, 3, 2, 2, 2, 299, 297, 3, 2, 2, 2,
	299, 298, 3, 2, 2, 2, 300, 301, 3, 2, 2, 2, 301, 303, 5, 108, 55, 2, 302,
	299, 3, 2, 2, 2, 303, 304, 3, 2, 2, 2, 304, 302, 3, 2, 2, 2, 304, 305,
	3, 2, 2, 2, 305, 316, 3, 2, 2, 2, 306, 307, 7, 111, 2, 2, 307, 308, 7,
	42, 2, 2, 308, 313, 5, 92, 47, 2, 309, 310, 7, 7, 2, 2, 310, 312, 5, 92,
	47, 2, 311, 309, 3, 2, 2, 2, 312, 315, 3, 2, 2, 2, 313, 311, 3, 2, 2, 2,
	313, 314, 3, 2, 2, 2, 314, 317, 3, 2, 2, 2, 315, 313, 3, 2, 2, 2, 316,
	306, 3, 2, 2, 2, 316, 317, 3, 2, 2, 2, 317, 324, 3, 2, 2, 2, 318, 319,
	7, 100, 2, 2, 319, 322, 5, 78, 40, 2, 320, 321, 9, 4, 2, 2, 321, 323, 5,
	78, 40, 2, 322, 320, 3, 2, 2, 2, 322, 323, 3, 2, 2, 2, 323, 325, 3, 2,
	2, 2, 324, 318, 3, 2, 2, 2, 324, 325, 3, 2, 2, 2, 325, 19, 3, 2, 2, 2,
	326, 328, 7, 52, 2, 2, 327, 329, 7, 140, 2, 2, 328, 327, 3, 2, 2, 2, 328,
	329, 3, 2, 2, 2, 329, 330, 3, 2, 2, 2, 330, 334, 7, 86, 2, 2, 331, 332,
	7, 82, 2, 2, 332, 333, 7, 104, 2, 2, 333, 335, 7, 72, 2, 2, 334, 331, 3,
	2, 2, 2, 334, 335, 3, 2, 2, 2, 335, 339, 3, 2, 2, 2, 336, 337, 5, 130,
	66, 2, 337, 338, 7, 4, 2, 2, 338, 340, 3, 2, 2, 2, 339, 336, 3, 2, 2, 2,
	339, 340, 3, 2, 2, 2, 340, 341, 3, 2, 2, 2, 341, 342, 5, 148, 75, 2, 342,
	343, 7, 109, 2, 2, 343, 344, 5, 136, 69, 2, 344, 345, 7, 5, 2, 2, 345,
	350, 5, 84, 43, 2, 346, 347, 7, 7, 2, 2, 347, 349, 5, 84, 43, 2, 348, 346,
	3, 2, 2, 2, 349, 352, 3, 2, 2, 2, 350, 348, 3, 2, 2, 2, 350, 351, 3, 2,
	2, 2, 351, 353, 3, 2, 2, 2, 352, 350, 3, 2, 2, 2, 353, 356, 7, 6, 2, 2,
	354, 355, 7, 148, 2, 2, 355, 357, 5, 78, 40, 2, 356, 354, 3, 2, 2, 2, 356,
	357, 3, 2, 2, 2, 357, 21, 3, 2, 2, 2, 358, 360, 7, 52, 2, 2, 359, 361,
	9, 5, 2, 2, 360, 359, 3, 2, 2, 2, 360, 361, 3, 2, 2, 2, 361, 362, 3, 2,
	2, 2, 362, 366, 7, 132, 2, 2, 363, 364, 7, 82, 2, 2, 364, 365, 7, 104,
	2, 2, 365, 367, 7, 72, 2, 2, 366, 363, 3, 2, 2, 2, 366, 367, 3, 2, 2, 2,
	367, 371, 3, 2, 2, 2, 368, 369, 5, 130, 66, 2, 369, 370, 7, 4, 2, 2, 370,
	372, 3, 2, 2, 2, 371, 368, 3, 2, 2, 2, 371, 372, 3, 2, 2, 2, 372, 373,
	3, 2, 2, 2, 373, 397, 5, 136, 69, 2, 374, 375, 7, 5, 2, 2, 375, 380, 5,
	70, 36, 2, 376, 377, 7, 7, 2, 2, 377, 379, 5, 70, 36, 2, 378, 376, 3, 2,
	2, 2, 379, 382, 3, 2, 2, 2, 380, 381, 3, 2, 2, 2, 380, 378, 3, 2, 2, 2,
	381, 387, 3, 2, 2, 2, 382, 380, 3, 2, 2, 2, 383, 384, 7, 7, 2, 2, 384,
	386, 5, 86, 44, 2, 385, 383, 3, 2, 2, 2, 386, 389, 3, 2, 2, 2, 387, 385,
	3, 2, 2, 2, 387, 388, 3, 2, 2, 2, 388, 390, 3, 2, 2, 2, 389, 387, 3, 2,
	2, 2, 390, 393, 7, 6, 2, 2, 391, 392, 7, 150, 2, 2, 392, 394, 7, 151, 2,
	2, 393, 391, 3, 2, 2, 2, 393, 394, 3, 2, 2, 2, 394, 398, 3, 2, 2, 2, 395,
	396, 7, 35, 2, 2, 396, 398, 5, 60, 31, 2, 397, 374, 3, 2, 2, 2, 397, 395,
	3, 2, 2, 2, 398, 23, 3, 2, 2, 2, 399, 401, 7, 52, 2, 2, 400, 402, 9, 5,
	2, 2, 401, 400, 3, 2, 2, 2, 401, 402, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2,
	403, 407, 7, 138, 2, 2, 404, 405, 7, 82, 2, 2, 405, 406, 7, 104, 2, 2,
	406, 408, 7, 72, 2, 2, 407, 404, 3, 2, 2, 2, 407, 408, 3, 2, 2, 2, 408,
	412, 3, 2, 2, 2, 409, 410, 5, 130, 66, 2, 410, 411, 7, 4, 2, 2, 411, 413,
	3, 2, 2, 2, 412, 409, 3, 2, 2, 2, 412, 413, 3, 2, 2, 2, 413, 414, 3, 2,
	2, 2, 414, 419, 5, 150, 76, 2, 415, 420, 7, 39, 2, 2, 416, 420, 7, 30,
	2, 2, 417, 418, 7, 91, 2, 2, 418, 420, 7, 107, 2, 2, 419, 415, 3, 2, 2,
	2, 419, 416, 3, 2, 2, 2, 419, 417, 3, 2, 2, 2, 419, 420, 3, 2, 2, 2, 420,
	435, 3, 2, 2, 2, 421, 436, 7, 61, 2, 2, 422, 436, 7, 90, 2, 2, 423, 433,
	7, 141, 2, 2, 424, 425, 7, 107, 2, 2, 425, 430, 5, 142, 72, 2, 426, 427,
	7, 7, 2, 2, 427, 429, 5, 142, 72, 2, 428, 426, 3, 2, 2, 2, 429, 432, 3,
	2, 2, 2, 430, 428, 3, 2, 2, 2, 430, 431, 3, 2, 2, 2, 431, 434, 3, 2, 2,
	2, 432, 430, 3, 2, 2, 2, 433, 424, 3, 2, 2, 2, 433, 434, 3, 2, 2, 2, 434,
	436, 3, 2, 2, 2, 435, 421, 3, 2, 2, 2, 435, 422, 3, 2, 2, 2, 435, 423,
	3, 2, 2, 2, 436, 437, 3, 2, 2, 2, 437, 441, 7, 109, 2, 2, 438, 439, 5,
	130, 66, 2, 439, 440, 7, 4, 2, 2, 440, 442, 3, 2, 2, 2, 441, 438, 3, 2,
	2, 2, 441, 442, 3, 2, 2, 2, 442, 443, 3, 2, 2, 2, 443, 447, 5, 136, 69,
	2, 444, 445, 7, 75, 2, 2, 445, 446, 7, 66, 2, 2, 446, 448, 7, 128, 2, 2,
	447, 444, 3, 2, 2, 2, 447, 448, 3, 2, 2, 2, 448, 451, 3, 2, 2, 2, 449,
	450, 7, 147, 2, 2, 450, 452, 5, 78, 40, 2, 451, 449, 3, 2, 2, 2, 451, 452,
	3, 2, 2, 2, 452, 453, 3, 2, 2, 2, 453, 462, 7, 40, 2, 2, 454, 459, 5, 64,
	33, 2, 455, 459, 5, 46, 24, 2, 456, 459, 5, 30, 16, 2, 457, 459, 5, 60,
	31, 2, 458, 454, 3, 2, 2, 2, 458, 455, 3, 2, 2, 2, 458, 456, 3, 2, 2, 2,
	458, 457, 3, 2, 2, 2, 459, 460, 3, 2, 2, 2, 460, 461, 7, 3, 2, 2, 461,
	463, 3, 2, 2, 2, 462, 458, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 464, 462,
	3, 2, 2, 2, 464, 465, 3, 2, 2, 2, 465, 466, 3, 2, 2, 2, 466, 467, 7, 68,
	2, 2, 467, 25, 3, 2, 2, 2, 468, 470, 7, 52, 2, 2, 469, 471, 9, 5, 2, 2,
	470, 469, 3, 2, 2, 2, 470, 471, 3, 2, 2, 2, 471, 472, 3, 2, 2, 2, 472,
	476, 7, 145, 2, 2, 473, 474, 7, 82, 2, 2, 474, 475, 7, 104, 2, 2, 475,
	477, 7, 72, 2, 2, 476, 473, 3, 2, 2, 2, 476, 477, 3, 2, 2, 2, 477, 481,
	3, 2, 2, 2, 478, 479, 5, 130, 66, 2, 479, 480, 7, 4, 2, 2, 480, 482, 3,
	2, 2, 2, 481, 478, 3, 2, 2, 2, 481, 482, 3, 2, 2, 2, 482, 483, 3, 2, 2,
	2, 483, 484, 5, 152, 77, 2, 484, 485, 7, 35, 2, 2, 485, 486, 5, 60, 31,
	2, 486, 27, 3, 2, 2, 2, 487, 488, 7, 52, 2, 2, 488, 489, 7, 146, 2, 2,
	489, 493, 7, 132, 2, 2, 490, 491, 7, 82, 2, 2, 491, 492, 7, 104, 2, 2,
	492, 494, 7, 72, 2, 2, 493, 490, 3, 2, 2, 2, 493, 494, 3, 2, 2, 2, 494,
	498, 3, 2, 2, 2, 495, 496, 5, 130, 66, 2, 496, 497, 7, 4, 2, 2, 497, 499,
	3, 2, 2, 2, 498, 495, 3, 2, 2, 2, 498, 499, 3, 2, 2, 2, 499, 500, 3, 2,
	2, 2, 500, 501, 5, 136, 69, 2, 501, 502, 7, 142, 2, 2, 502, 514, 5, 154,
	78, 2, 503, 504, 7, 5, 2, 2, 504, 509, 5, 120, 61, 2, 505, 506, 7, 7, 2,
	2, 506, 508, 5, 120, 61, 2, 507, 505, 3, 2, 2, 2, 508, 511, 3, 2, 2, 2,
	509, 507, 3, 2, 2, 2, 509, 510, 3, 2, 2, 2, 510, 512, 3, 2, 2, 2, 511,
	509, 3, 2, 2, 2, 512, 513, 7, 6, 2, 2, 513, 515, 3, 2, 2, 2, 514, 503,
	3, 2, 2, 2, 514, 515, 3, 2, 2, 2, 515, 29, 3, 2, 2, 2, 516, 518, 5, 88,
	45, 2, 517, 516, 3, 2, 2, 2, 517, 518, 3, 2, 2, 2, 518, 519, 3, 2, 2, 2,
	519, 520, 7, 61, 2, 2, 520, 521, 7, 77, 2, 2, 521, 524, 5, 90, 46, 2, 522,
	523, 7, 148, 2, 2, 523, 525, 5, 78, 40, 2, 524, 522, 3, 2, 2, 2, 524, 525,
	3, 2, 2, 2, 525, 31, 3, 2, 2, 2, 526, 528, 5, 88, 45, 2, 527, 526, 3, 2,
	2, 2, 527, 528, 3, 2, 2, 2, 528, 529, 3, 2, 2, 2, 529, 530, 7, 61, 2, 2,
	530, 531, 7, 77, 2, 2, 531, 534, 5, 90, 46, 2, 532, 533, 7, 148, 2, 2,
	533, 535, 5, 78, 40, 2, 534, 532, 3, 2, 2, 2, 534, 535, 3, 2, 2, 2, 535,
	554, 3, 2, 2, 2, 536, 537, 7, 111, 2, 2, 537, 538, 7, 42, 2, 2, 538, 543,
	5, 92, 47, 2, 539, 540, 7, 7, 2, 2, 540, 542, 5, 92, 47, 2, 541, 539, 3,
	2, 2, 2, 542, 545, 3, 2, 2, 2, 543, 541, 3, 2, 2, 2, 543, 544, 3, 2, 2,
	2, 544, 547, 3, 2, 2, 2, 545, 543, 3, 2, 2, 2, 546, 536, 3, 2, 2, 2, 546,
	547, 3, 2, 2, 2, 547, 548, 3, 2, 2, 2, 548, 549, 7, 100, 2, 2, 549, 552,
	5, 78, 40, 2, 550, 551, 9, 4, 2, 2, 551, 553, 5, 78, 40, 2, 552, 550, 3,
	2, 2, 2, 552, 553, 3, 2, 2, 2, 553, 555, 3, 2, 2, 2, 554, 546, 3, 2, 2,
	2, 554, 555, 3, 2, 2, 2, 555, 33, 3, 2, 2, 2, 556, 558, 7, 63, 2, 2, 557,
	559, 7, 57, 2, 2, 558, 557, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559, 560,
	3, 2, 2, 2, 560, 561, 5, 130, 66, 2, 561, 35, 3, 2, 2, 2, 562, 563, 7,
	65, 2, 2, 563, 566, 7, 86, 2, 2, 564, 565, 7, 82, 2, 2, 565, 567, 7, 72,
	2, 2, 566, 564, 3, 2, 2, 2, 566, 567, 3, 2, 2, 2, 567, 571, 3, 2, 2, 2,
	568, 569, 5, 130, 66, 2, 569, 570, 7, 4, 2, 2, 570, 572, 3, 2, 2, 2, 571,
	568, 3, 2, 2, 2, 571, 572, 3, 2, 2, 2, 572, 573, 3, 2, 2, 2, 573, 574,
	5, 148, 75, 2, 574, 37, 3, 2, 2, 2, 575, 576, 7, 65, 2, 2, 576, 579, 7,
	132, 2, 2, 577, 578, 7, 82, 2, 2, 578, 580, 7, 72, 2, 2, 579, 577, 3, 2,
	2, 2, 579, 580, 3, 2, 2, 2, 580, 584, 3, 2, 2, 2, 581, 582, 5, 130, 66,
	2, 582, 583, 7, 4, 2, 2, 583, 585, 3, 2, 2, 2, 584, 581, 3, 2, 2, 2, 584,
	585, 3, 2, 2, 2, 585, 586, 3, 2, 2, 2, 586, 587, 5, 136, 69, 2, 587, 39,
	3, 2, 2, 2, 588, 589, 7, 65, 2, 2, 589, 592, 7, 138, 2, 2, 590, 591, 7,
	82, 2, 2, 591, 593, 7, 72, 2, 2, 592, 590, 3, 2, 2, 2, 592, 593, 3, 2,
	2, 2, 593, 597, 3, 2, 2, 2, 594, 595, 5, 130, 66, 2, 595, 596, 7, 4, 2,
	2, 596, 598, 3, 2, 2, 2, 597, 594, 3, 2, 2, 2, 597, 598, 3, 2, 2, 2, 598,
	599, 3, 2, 2, 2, 599, 600, 5, 150, 76, 2, 600, 41, 3, 2, 2, 2, 601, 602,
	7, 65, 2, 2, 602, 605, 7, 145, 2, 2, 603, 604, 7, 82, 2, 2, 604, 606, 7,
	72, 2, 2, 605, 603, 3, 2, 2, 2, 605, 606, 3, 2, 2, 2, 606, 610, 3, 2, 2,
	2, 607, 608, 5, 130, 66, 2, 608, 609, 7, 4, 2, 2, 609, 611, 3, 2, 2, 2,
	610, 607, 3, 2, 2, 2, 610, 611, 3, 2, 2, 2, 611, 612, 3, 2, 2, 2, 612,
	613, 5, 152, 77, 2, 613, 43, 3, 2, 2, 2, 614, 616, 5, 88, 45, 2, 615, 614,
	3, 2, 2, 2, 615, 616, 3, 2, 2, 2, 616, 617, 3, 2, 2, 2, 617, 623, 5, 108,
	55, 2, 618, 619, 5, 110, 56, 2, 619, 620, 5, 108, 55, 2, 620, 622, 3, 2,
	2, 2, 621, 618, 3, 2, 2, 2, 622, 625, 3, 2, 2, 2, 623, 621, 3, 2, 2, 2,
	623, 624, 3, 2, 2, 2, 624, 636, 3, 2, 2, 2, 625, 623, 3, 2, 2, 2, 626,
	627, 7, 111, 2, 2, 627, 628, 7, 42, 2, 2, 628, 633, 5, 92, 47, 2, 629,
	630, 7, 7, 2, 2, 630, 632, 5, 92, 47, 2, 631, 629, 3, 2, 2, 2, 632, 635,
	3, 2, 2, 2, 633, 631, 3, 2, 2, 2, 633, 634, 3, 2, 2, 2, 634, 637, 3, 2,
	2, 2, 635, 633, 3, 2, 2, 2, 636, 626, 3, 2, 2, 2, 636, 637, 3, 2, 2, 2,
	637, 644, 3, 2, 2, 2, 638, 639, 7, 100, 2, 2, 639, 642, 5, 78, 40, 2, 640,
	641, 9, 4, 2, 2, 641, 643, 5, 78, 40, 2, 642, 640, 3, 2, 2, 2, 642, 643,
	3, 2, 2, 2, 643, 645, 3, 2, 2, 2, 644, 638, 3, 2, 2, 2, 644, 645, 3, 2,
	2, 2, 645, 45, 3, 2, 2, 2, 646, 648, 5, 88, 45, 2, 647, 646, 3, 2, 2, 2,
	647, 648, 3, 2, 2, 2, 648, 666, 3, 2, 2, 2, 649, 667, 7, 90, 2, 2, 650,
	667, 7, 124, 2, 2, 651, 652, 7, 90, 2, 2, 652, 653, 7, 110, 2, 2, 653,
	667, 7, 124, 2, 2, 654, 655, 7, 90, 2, 2, 655, 656, 7, 110, 2, 2, 656,
	667, 7, 127, 2, 2, 657, 658, 7, 90, 2, 2, 658, 659, 7, 110, 2, 2, 659,
	667, 7, 27, 2, 2, 660, 661, 7, 90, 2, 2, 661, 662, 7, 110, 2, 2, 662, 667,
	7, 74, 2, 2, 663, 664, 7, 90, 2, 2, 664, 665, 7, 110, 2, 2, 665, 667, 7,
	83, 2, 2, 666, 649, 3, 2, 2, 2, 666, 650, 3, 2, 2, 2, 666, 651, 3, 2, 2,
	2, 666, 654, 3, 2, 2, 2, 666, 657, 3, 2, 2, 2, 666, 660, 3, 2, 2, 2, 666,
	663, 3, 2, 2, 2, 667, 668, 3, 2, 2, 2, 668, 672, 7, 93, 2, 2, 669, 670,
	5, 130, 66, 2, 670, 671, 7, 4, 2, 2, 671, 673, 3, 2, 2, 2, 672, 669, 3,
	2, 2, 2, 672, 673, 3, 2, 2, 2, 673, 674, 3, 2, 2, 2, 674, 686, 5, 136,
	69, 2, 675, 676, 7, 5, 2, 2, 676, 681, 5, 142, 72, 2, 677, 678, 7, 7, 2,
	2, 678, 680, 5, 142, 72, 2, 679, 677, 3, 2, 2, 2, 680, 683, 3, 2, 2, 2,
	681, 679, 3, 2, 2, 2, 681, 682, 3, 2, 2, 2, 682, 684, 3, 2, 2, 2, 683,
	681, 3, 2, 2, 2, 684, 685, 7, 6, 2, 2, 685, 687, 3, 2, 2, 2, 686, 675,
	3, 2, 2, 2, 686, 687, 3, 2, 2, 2, 687, 719, 3, 2, 2, 2, 688, 689, 7, 144,
	2, 2, 689, 690, 7, 5, 2, 2, 690, 695, 5, 78, 40, 2, 691, 692, 7, 7, 2,
	2, 692, 694, 5, 78, 40, 2, 693, 691, 3, 2, 2, 2, 694, 697, 3, 2, 2, 2,
	695, 693, 3, 2, 2, 2, 695, 696, 3, 2, 2, 2, 696, 698, 3, 2, 2, 2, 697,
	695, 3, 2, 2, 2, 698, 713, 7, 6, 2, 2, 699, 700, 7, 7, 2, 2, 700, 701,
	7, 5, 2, 2, 701, 706, 5, 78, 40, 2, 702, 703, 7, 7, 2, 2, 703, 705, 5,
	78, 40, 2, 704, 702, 3, 2, 2, 2, 705, 708, 3, 2, 2, 2, 706, 704, 3, 2,
	2, 2, 706, 707, 3, 2, 2, 2, 707, 709, 3, 2, 2, 2, 708, 706, 3, 2, 2, 2,
	709, 710, 7, 6, 2, 2, 710, 712, 3, 2, 2, 2, 711, 699, 3, 2, 2, 2, 712,
	715, 3, 2, 2, 2, 713, 711, 3, 2, 2, 2, 713, 714, 3, 2, 2, 2, 714, 720,
	3, 2, 2, 2, 715, 713, 3, 2, 2, 2, 716, 720, 5, 60, 31, 2, 717, 718, 7,
	58, 2, 2, 718, 720, 7, 144, 2, 2, 719, 688, 3, 2, 2, 2, 719, 716, 3, 2,
	2, 2, 719, 717, 3, 2, 2, 2, 720, 47, 3, 2, 2, 2, 721, 725, 7, 114, 2, 2,
	722, 723, 5, 130, 66, 2, 723, 724, 7, 4, 2, 2, 724, 726, 3, 2, 2, 2, 725,
	722, 3, 2, 2, 2, 725, 726, 3, 2, 2, 2, 726, 727, 3, 2, 2, 2, 727, 734,
	5, 156, 79, 2, 728, 729, 7, 8, 2, 2, 729, 735, 5, 94, 48, 2, 730, 731,
	7, 5, 2, 2, 731, 732, 5, 94, 48, 2, 732, 733, 7, 6, 2, 2, 733, 735, 3,
	2, 2, 2, 734, 728, 3, 2, 2, 2, 734, 730, 3, 2, 2, 2, 734, 735, 3, 2, 2,
	2, 735, 49, 3, 2, 2, 2, 736, 747, 7, 121, 2, 2, 737, 748, 5, 144, 73, 2,
	738, 739, 5, 130, 66, 2, 739, 740, 7, 4, 2, 2, 740, 742, 3, 2, 2, 2, 741,
	738, 3, 2, 2, 2, 741, 742, 3, 2, 2, 2, 742, 745, 3, 2, 2, 2, 743, 746,
	5, 136, 69, 2, 744, 746, 5, 148, 75, 2, 745, 743, 3, 2, 2, 2, 745, 744,
	3, 2, 2, 2, 746, 748, 3, 2, 2, 2, 747, 737, 3, 2, 2, 2, 747, 741, 3, 2,
	2, 2, 747, 748, 3, 2, 2, 2, 748, 51, 3, 2, 2, 2, 749, 751, 7, 122, 2, 2,
	750, 752, 7, 129, 2, 2, 751, 750, 3, 2, 2, 2, 751, 752, 3, 2, 2, 2, 752,
	753, 3, 2, 2, 2, 753, 754, 5, 158, 80, 2, 754, 53, 3, 2, 2, 2, 755, 760,
	7, 127, 2, 2, 756, 758, 7, 137, 2, 2, 757, 759, 5, 162, 82, 2, 758, 757,
	3, 2, 2, 2, 758, 759, 3, 2, 2, 2, 759, 761, 3, 2, 2, 2, 760, 756, 3, 2,
	2, 2, 760, 761, 3, 2, 2, 2, 761, 767, 3, 2, 2, 2, 762, 764, 7, 136, 2,
	2, 763, 765, 7, 129, 2, 2, 764, 763, 3, 2, 2, 2, 764, 765, 3, 2, 2, 2,
	765, 766, 3, 2, 2, 2, 766, 768, 5, 158, 80, 2, 767, 762, 3, 2, 2, 2, 767,
	768, 3, 2, 2, 2, 768, 55, 3, 2, 2, 2, 769, 770, 7, 129, 2, 2, 770, 771,
	5, 158, 80, 2, 771, 57, 3, 2, 2, 2, 772, 774, 5, 88, 45, 2, 773, 772, 3,
	2, 2, 2, 773, 774, 3, 2, 2, 2, 774, 775, 3, 2, 2, 2, 775, 786, 5, 108,
	55, 2, 776, 777, 7, 111, 2, 2, 777, 778, 7, 42, 2, 2, 778, 783, 5, 92,
	47, 2, 779, 780, 7, 7, 2, 2, 780, 782, 5, 92, 47, 2, 781, 779, 3, 2, 2,
	2, 782, 785, 3, 2, 2, 2, 783, 781, 3, 2, 2, 2, 783, 784, 3, 2, 2, 2, 784,
	787, 3, 2, 2, 2, 785, 783, 3, 2, 2, 2, 786, 776, 3, 2, 2, 2, 786, 787,
	3, 2, 2, 2, 787, 794, 3, 2, 2, 2, 788, 789, 7, 100, 2, 2, 789, 792, 5,
	78, 40, 2, 790, 791, 9, 4, 2, 2, 791, 793, 5, 78, 40, 2, 792, 790, 3, 2,
	2, 2, 792, 793, 3, 2, 2, 2, 793, 795, 3, 2, 2, 2, 794, 788, 3, 2, 2, 2,
	794, 795, 3, 2, 2, 2, 795, 59, 3, 2, 2, 2, 796, 798, 5, 88, 45, 2, 797,
	796, 3, 2, 2, 2, 797, 798, 3, 2, 2, 2, 798, 799, 3, 2, 2, 2, 799, 805,
	5, 62, 32, 2, 800, 801, 5, 110, 56, 2, 801, 802, 5, 62, 32, 2, 802, 804,
	3, 2, 2, 2, 803, 800, 3, 2, 2, 2, 804, 807, 3, 2, 2, 2, 805, 803, 3, 2,
	2, 2, 805, 806, 3, 2, 2, 2, 806, 818, 3, 2, 2, 2, 807, 805, 3, 2, 2, 2,
	808, 809, 7, 111, 2, 2, 809, 810, 7, 42, 2, 2, 810, 815, 5, 92, 47, 2,
	811, 812, 7, 7, 2, 2, 812, 814, 5, 92, 47, 2, 813, 811, 3, 2, 2, 2, 814,
	817, 3, 2, 2, 2, 815, 813, 3, 2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 819,
	3, 2, 2, 2, 817, 815, 3, 2, 2, 2, 818, 808, 3, 2, 2, 2, 818, 819, 3, 2,
	2, 2, 819, 826, 3, 2, 2, 2, 820, 821, 7, 100, 2, 2, 821, 824, 5, 78, 40,
	2, 822, 823, 9, 4, 2, 2, 823, 825, 5, 78, 40, 2, 824, 822, 3, 2, 2, 2,
	824, 825, 3, 2, 2, 2, 825, 827, 3, 2, 2, 2, 826, 820, 3, 2, 2, 2, 826,
	827, 3, 2, 2, 2, 827, 61, 3, 2, 2, 2, 828, 830, 7, 130, 2, 2, 829, 831,
	9, 6, 2, 2, 830, 829, 3, 2, 2, 2, 830, 831, 3, 2, 2, 2, 831, 832, 3, 2,
	2, 2, 832, 837, 5, 98, 50, 2, 833, 834, 7, 7, 2, 2, 834, 836, 5, 98, 50,
	2, 835, 833, 3, 2, 2, 2, 836, 839, 3, 2, 2, 2, 837, 835, 3, 2, 2, 2, 837,
	838, 3, 2, 2, 2, 838, 852, 3, 2, 2, 2, 839, 837, 3, 2, 2, 2, 840, 850,
	7, 77, 2, 2, 841, 846, 5, 100, 51, 2, 842, 843, 7, 7, 2, 2, 843, 845, 5,
	100, 51, 2, 844, 842, 3, 2, 2, 2, 845, 848, 3, 2, 2, 2, 846, 844, 3, 2,
	2, 2, 846, 847, 3, 2, 2, 2, 847, 851, 3, 2, 2, 2, 848, 846, 3, 2, 2, 2,
	849, 851, 5, 102, 52, 2, 850, 841, 3, 2, 2, 2, 850, 849, 3, 2, 2, 2, 851,
	853, 3, 2, 2, 2, 852, 840, 3, 2, 2, 2, 852, 853, 3, 2, 2, 2, 853, 856,
	3, 2, 2, 2, 854, 855, 7, 148, 2, 2, 855, 857, 5, 78, 40, 2, 856, 854, 3,
	2, 2, 2, 856, 857, 3, 2, 2, 2, 857, 872, 3, 2, 2, 2, 858, 859, 7, 80, 2,
	2, 859, 860, 7, 42, 2, 2, 860, 865, 5, 78, 40, 2, 861, 862, 7, 7, 2, 2,
	862, 864, 5, 78, 40, 2, 863, 861, 3, 2, 2, 2, 864, 867, 3, 2, 2, 2, 865,
	863, 3, 2, 2, 2, 865, 866, 3, 2, 2, 2, 866, 870, 3, 2, 2, 2, 867, 865,
	3, 2, 2, 2, 868, 869, 7, 81, 2, 2, 869, 871, 5, 78, 40, 2, 870, 868, 3,
	2, 2, 2, 870, 871, 3, 2, 2, 2, 871, 873, 3, 2, 2, 2, 872, 858, 3, 2, 2,
	2, 872, 873, 3, 2, 2, 2, 873, 903, 3, 2, 2, 2, 874, 875, 7, 144, 2, 2,
	875, 876, 7, 5, 2, 2, 876, 881, 5, 78, 40, 2, 877, 878, 7, 7, 2, 2, 878,
	880, 5, 78, 40, 2, 879, 877, 3, 2, 2, 2, 880, 883, 3, 2, 2, 2, 881, 879,
	3, 2, 2, 2, 881, 882, 3, 2, 2, 2, 882, 884, 3, 2, 2, 2, 883, 881, 3, 2,
	2, 2, 884, 899, 7, 6, 2, 2, 885, 886, 7, 7, 2, 2, 886, 887, 7, 5, 2, 2,
	887, 892, 5, 78, 40, 2, 888, 889, 7, 7, 2, 2, 889, 891, 5, 78, 40, 2, 890,
	888, 3, 2, 2, 2, 891, 894, 3, 2, 2, 2, 892, 890, 3, 2, 2, 2, 892, 893,
	3, 2, 2, 2, 893, 895, 3, 2, 2, 2, 894, 892, 3, 2, 2, 2, 895, 896, 7, 6,
	2, 2, 896, 898, 3, 2, 2, 2, 897, 885, 3, 2, 2, 2, 898, 901, 3, 2, 2, 2,
	899, 897, 3, 2, 2, 2, 899, 900, 3, 2, 2, 2, 900, 903, 3, 2, 2, 2, 901,
	899, 3, 2, 2, 2, 902, 828, 3, 2, 2, 2, 902, 874, 3, 2, 2, 2, 903, 63, 3,
	2, 2, 2, 904, 906, 5, 88, 45, 2, 905, 904, 3, 2, 2, 2, 905, 906, 3, 2,
	2, 2, 906, 907, 3, 2, 2, 2, 907, 918, 7, 141, 2, 2, 908, 909, 7, 110, 2,
	2, 909, 919, 7, 127, 2, 2, 910, 911, 7, 110, 2, 2, 911, 919, 7, 27, 2,
	2, 912, 913, 7, 110, 2, 2, 913, 919, 7, 124, 2, 2, 914, 915, 7, 110, 2,
	2, 915, 919, 7, 74, 2, 2, 916, 917, 7, 110, 2, 2, 917, 919, 7, 83, 2, 2,
	918, 908, 3, 2, 2, 2, 918, 910, 3, 2, 2, 2, 918, 912, 3, 2, 2, 2, 918,
	914, 3, 2, 2, 2, 918, 916, 3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 920,
	3, 2, 2, 2, 920, 921, 5, 90, 46, 2, 921, 922, 7, 131, 2, 2, 922, 923, 5,
	142, 72, 2, 923, 924, 7, 8, 2, 2, 924, 932, 5, 78, 40, 2, 925, 926, 7,
	7, 2, 2, 926, 927, 5, 142, 72, 2, 927, 928, 7, 8, 2, 2, 928, 929, 5, 78,
	40, 2, 929, 931, 3, 2, 2, 2, 930, 925, 3, 2, 2, 2, 931, 934, 3, 2, 2, 2,
	932, 930, 3, 2, 2, 2, 932, 933, 3, 2, 2, 2, 933, 937, 3, 2, 2, 2, 934,
	932, 3, 2, 2, 2, 935, 936, 7, 148, 2, 2, 936, 938, 5, 78, 40, 2, 937, 935,
	3, 2, 2, 2, 937, 938, 3, 2, 2, 2, 938, 65, 3, 2, 2, 2, 939, 941, 5, 88,
	45, 2, 940, 939, 3, 2, 2, 2, 940, 941, 3, 2, 2, 2, 941, 942, 3, 2, 2, 2,
	942, 953, 7, 141, 2, 2, 943, 944, 7, 110, 2, 2, 944, 954, 7, 127, 2, 2,
	945, 946, 7, 110, 2, 2, 946, 954, 7, 27, 2, 2, 947, 948, 7, 110, 2, 2,
	948, 954, 7, 124, 2, 2, 949, 950, 7, 110, 2, 2, 950, 954, 7, 74, 2, 2,
	951, 952, 7, 110, 2, 2, 952, 954, 7, 83, 2, 2, 953, 943, 3, 2, 2, 2, 953,
	945, 3, 2, 2, 2, 953, 947, 3, 2, 2, 2, 953, 949, 3, 2, 2, 2, 953, 951,
	3, 2, 2, 2, 953, 954, 3, 2, 2, 2, 954, 955, 3, 2, 2, 2, 955, 956, 5, 90,
	46, 2, 956, 957, 7, 131, 2, 2, 957, 958, 5, 142, 72, 2, 958, 959, 7, 8,
	2, 2, 959, 967, 5, 78, 40, 2, 960, 961, 7, 7, 2, 2, 961, 962, 5, 142, 72,
	2, 962, 963, 7, 8, 2, 2, 963, 964, 5, 78, 40, 2, 964, 966, 3, 2, 2, 2,
	965, 960, 3, 2, 2, 2, 966, 969, 3, 2, 2, 2, 967, 965, 3, 2, 2, 2, 967,
	968, 3, 2, 2, 2, 968, 972, 3, 2, 2, 2, 969, 967, 3, 2, 2, 2, 970, 971,
	7, 148, 2, 2, 971, 973, 5, 78, 40, 2, 972, 970, 3, 2, 2, 2, 972, 973, 3,
	2, 2, 2, 973, 992, 3, 2, 2, 2, 974, 975, 7, 111, 2, 2, 975, 976, 7, 42,
	2, 2, 976, 981, 5, 92, 47, 2, 977, 978, 7, 7, 2, 2, 978, 980, 5, 92, 47,
	2, 979, 977, 3, 2, 2, 2, 980, 983, 3, 2, 2, 2, 981, 979, 3, 2, 2, 2, 981,
	982, 3, 2, 2, 2, 982, 985, 3, 2, 2, 2, 983, 981, 3, 2, 2, 2, 984, 974,
	3, 2, 2, 2, 984, 985, 3, 2, 2, 2, 985, 986, 3, 2, 2, 2, 986, 987, 7, 100,
	2, 2, 987, 990, 5, 78, 40, 2, 988, 989, 9, 4, 2, 2, 989, 991, 5, 78, 40,
	2, 990, 988, 3, 2, 2, 2, 990, 991, 3, 2, 2, 2, 991, 993, 3, 2, 2, 2, 992,
	984, 3, 2, 2, 2, 992, 993, 3, 2, 2, 2, 993, 67, 3, 2, 2, 2, 994, 995, 7,
	143, 2, 2, 995, 69, 3, 2, 2, 2, 996, 998, 5, 142, 72, 2, 997, 999, 5, 72,
	37, 2, 998, 997, 3, 2, 2, 2, 998, 999, 3, 2, 2, 2, 999, 1003, 3, 2, 2,
	2, 1000, 1002, 5, 74, 38, 2, 1001, 1000, 3, 2, 2, 2, 1002, 1005, 3, 2,
	2, 2, 1003, 1001, 3, 2, 2, 2, 1003, 1004, 3, 2, 2, 2, 1004, 71, 3, 2, 2,
	2, 1005, 1003, 3, 2, 2, 2, 1006, 1008, 5, 126, 64, 2, 1007, 1006, 3, 2,
	2, 2, 1008, 1009, 3, 2, 2, 2, 1009, 1010, 3, 2, 2, 2, 1009, 1007, 3, 2,
	2, 2, 1010, 1021, 3, 2, 2, 2, 1011, 1012, 7, 5, 2, 2, 1012, 1013, 5, 112,
	57, 2, 1013, 1014, 7, 6, 2, 2, 1014, 1022, 3, 2, 2, 2, 1015, 1016, 7, 5,
	2, 2, 1016, 1017, 5, 112, 57, 2, 1017, 1018, 7, 7, 2, 2, 1018, 1019, 5,
	112, 57, 2, 1019, 1020, 7, 6, 2, 2, 1020, 1022, 3, 2, 2, 2, 1021, 1011,
	3, 2, 2, 2, 1021, 1015, 3, 2, 2, 2, 1021, 1022, 3, 2, 2, 2, 1022, 73, 3,
	2, 2, 2, 1023, 1024, 7, 51, 2, 2, 1024, 1026, 5, 126, 64, 2, 1025, 1023,
	3, 2, 2, 2, 1025, 1026, 3, 2, 2, 2, 1026, 1060, 3, 2, 2, 2, 1027, 1028,
	7, 115, 2, 2, 1028, 1030, 7, 97, 2, 2, 1029, 1031, 9, 7, 2, 2, 1030, 1029,
	3, 2, 2, 2, 1030, 1031, 3, 2, 2, 2, 1031, 1032, 3, 2, 2, 2, 1032, 1034,
	5, 76, 39, 2, 1033, 1035, 7, 38, 2, 2, 1034, 1033, 3, 2, 2, 2, 1034, 1035,
	3, 2, 2, 2, 1035, 1061, 3, 2, 2, 2, 1036, 1038, 7, 104, 2, 2, 1037, 1036,
	3, 2, 2, 2, 1037, 1038, 3, 2, 2, 2, 1038, 1039, 3, 2, 2, 2, 1039, 1040,
	7, 106, 2, 2, 1040, 1061, 5, 76, 39, 2, 1041, 1042, 7, 140, 2, 2, 1042,
	1061, 5, 76, 39, 2, 1043, 1044, 7, 46, 2, 2, 1044, 1045, 7, 5, 2, 2, 1045,
	1046, 5, 78, 40, 2, 1046, 1047, 7, 6, 2, 2, 1047, 1061, 3, 2, 2, 2, 1048,
	1055, 7, 58, 2, 2, 1049, 1056, 5, 112, 57, 2, 1050, 1056, 5, 114, 58, 2,
	1051, 1052, 7, 5, 2, 2, 1052, 1053, 5, 78, 40, 2, 1053, 1054, 7, 6, 2,
	2, 1054, 1056, 3, 2, 2, 2, 1055, 1049, 3, 2, 2, 2, 1055, 1050, 3, 2, 2,
	2, 1055, 1051, 3, 2, 2, 2, 1056, 1061, 3, 2, 2, 2, 1057, 1058, 7, 47, 2,
	2, 1058, 1061, 5, 144, 73, 2, 1059, 1061, 5, 80, 41, 2, 1060, 1027, 3,
	2, 2, 2, 1060, 1037, 3, 2, 2, 2, 1060, 1041, 3, 2, 2, 2, 1060, 1043, 3,
	2, 2, 2, 1060, 1048, 3, 2, 2, 2, 1060, 1057, 3, 2, 2, 2, 1060, 1059, 3,
	2, 2, 2, 1061, 75, 3, 2, 2, 2, 1062, 1063, 7, 109, 2, 2, 1063, 1064, 7,
	50, 2, 2, 1064, 1066, 9, 8, 2, 2, 1065, 1062, 3, 2, 2, 2, 1065, 1066, 3,
	2, 2, 2, 1066, 77, 3, 2, 2, 2, 1067, 1068, 8, 40, 1, 2, 1068, 1144, 5,
	114, 58, 2, 1069, 1144, 7, 153, 2, 2, 1070, 1071, 5, 130, 66, 2, 1071,
	1072, 7, 4, 2, 2, 1072, 1074, 3, 2, 2, 2, 1073, 1070, 3, 2, 2, 2, 1073,
	1074, 3, 2, 2, 2, 1074, 1075, 3, 2, 2, 2, 1075, 1076, 5, 136, 69, 2, 1076,
	1077, 7, 4, 2, 2, 1077, 1079, 3, 2, 2, 2, 1078, 1073, 3, 2, 2, 2, 1078,
	1079, 3, 2, 2, 2, 1079, 1080, 3, 2, 2, 2, 1080, 1144, 5, 142, 72, 2, 1081,
	1082, 5, 116, 59, 2, 1082, 1083, 5, 78, 40, 23, 1083, 1144, 3, 2, 2, 2,
	1084, 1085, 5, 128, 65, 2, 1085, 1098, 7, 5, 2, 2, 1086, 1088, 7, 64, 2,
	2, 1087, 1086, 3, 2, 2, 2, 1087, 1088, 3, 2, 2, 2, 1088, 1089, 3, 2, 2,
	2, 1089, 1094, 5, 78, 40, 2, 1090, 1091, 7, 7, 2, 2, 1091, 1093, 5, 78,
	40, 2, 1092, 1090, 3, 2, 2, 2, 1093, 1096, 3, 2, 2, 2, 1094, 1092, 3, 2,
	2, 2, 1094, 1095, 3, 2, 2, 2, 1095, 1099, 3, 2, 2, 2, 1096, 1094, 3, 2,
	2, 2, 1097, 1099, 7, 9, 2, 2, 1098, 1087, 3, 2, 2, 2, 1098, 1097, 3, 2,
	2, 2, 1098, 1099, 3, 2, 2, 2, 1099, 1100, 3, 2, 2, 2, 1100, 1101, 7, 6,
	2, 2, 1101, 1144, 3, 2, 2, 2, 1102, 1103, 7, 5, 2, 2, 1103, 1104, 5, 78,
	40, 2, 1104, 1105, 7, 6, 2, 2, 1105, 1144, 3, 2, 2, 2, 1106, 1107, 7, 45,
	2, 2, 1107, 1108, 7, 5, 2, 2, 1108, 1109, 5, 78, 40, 2, 1109, 1110, 7,
	35, 2, 2, 1110, 1111, 5, 72, 37, 2, 1111, 1112, 7, 6, 2, 2, 1112, 1144,
	3, 2, 2, 2, 1113, 1115, 7, 104, 2, 2, 1114, 1113, 3, 2, 2, 2, 1114, 1115,
	3, 2, 2, 2, 1115, 1116, 3, 2, 2, 2, 1116, 1118, 7, 72, 2, 2, 1117, 1114,
	3, 2, 2, 2, 1117, 1118, 3, 2, 2, 2, 1118, 1119, 3, 2, 2, 2, 1119, 1120,
	7, 5, 2, 2, 1120, 1121, 5, 60, 31, 2, 1121, 1122, 7, 6, 2, 2, 1122, 1144,
	3, 2, 2, 2, 1123, 1125, 7, 44, 2, 2, 1124, 1126, 5, 78, 40, 2, 1125, 1124,
	3, 2, 2, 2, 1125, 1126, 3, 2, 2, 2, 1126, 1132, 3, 2, 2, 2, 1127, 1128,
	7, 147, 2, 2, 1128, 1129, 5, 78, 40, 2, 1129, 1130, 7, 135, 2, 2, 1130,
	1131, 5, 78, 40, 2, 1131, 1133, 3, 2, 2, 2, 1132, 1127, 3, 2, 2, 2, 1133,
	1134, 3, 2, 2, 2, 1134, 1132, 3, 2, 2, 2, 1134, 1135, 3, 2, 2, 2, 1135,
	1138, 3, 2, 2, 2, 1136, 1137, 7, 67, 2, 2, 1137, 1139, 5, 78, 40, 2, 1138,
	1136, 3, 2, 2, 2, 1138, 1139, 3, 2, 2, 2, 1139, 1140, 3, 2, 2, 2, 1140,
	1141, 7, 68, 2, 2, 1141, 1144, 3, 2, 2, 2, 1142, 1144, 5, 82, 42, 2, 1143,
	1067, 3, 2, 2, 2, 1143, 1069, 3, 2, 2, 2, 1143, 1078, 3, 2, 2, 2, 1143,
	1081, 3, 2, 2, 2, 1143, 1084, 3, 2, 2, 2, 1143, 1102, 3, 2, 2, 2, 1143,
	1106, 3, 2, 2, 2, 1143, 1117, 3, 2, 2, 2, 1143, 1123, 3, 2, 2, 2, 1143,
	1142, 3, 2, 2, 2, 1144, 1232, 3, 2, 2, 2, 1145, 1146, 12, 22, 2, 2, 1146,
	1147, 7, 13, 2, 2, 1147, 1231, 5, 78, 40, 23, 1148, 1149, 12, 21, 2, 2,
	1149, 1150, 9, 9, 2, 2, 1150, 1231, 5, 78, 40, 22, 1151, 1152, 12, 20,
	2, 2, 1152, 1153, 9, 10, 2, 2, 1153, 1231, 5, 78, 40, 21, 1154, 1155, 12,
	19, 2, 2, 1155, 1156, 9, 11, 2, 2, 1156, 1231, 5, 78, 40, 20, 1157, 1158,
	12, 18, 2, 2, 1158, 1159, 9, 12, 2, 2, 1159, 1231, 5, 78, 40, 19, 1160,
	1161, 12, 17, 2, 2, 1161, 1162, 9, 13, 2, 2, 1162, 1231, 5, 78, 40, 18,
	1163, 1164, 12, 15, 2, 2, 1164, 1165, 7, 34, 2, 2, 1165, 1231, 5, 78, 40,
	16, 1166, 1167, 12, 14, 2, 2, 1167, 1168, 7, 110, 2, 2, 1168, 1231, 5,
	78, 40, 15, 1169, 1170, 12, 7, 2, 2, 1170, 1172, 7, 94, 2, 2, 1171, 1173,
	7, 104, 2, 2, 1172, 1171, 3, 2, 2, 2, 1172, 1173, 3, 2, 2, 2, 1173, 1174,
	3, 2, 2, 2, 1174, 1231, 5, 78, 40, 8, 1175, 1177, 12, 6, 2, 2, 1176, 1178,
	7, 104, 2, 2, 1177, 1176, 3, 2, 2, 2, 1177, 1178, 3, 2, 2, 2, 1178, 1179,
	3, 2, 2, 2, 1179, 1180, 7, 41, 2, 2, 1180, 1181, 5, 78, 40, 2, 1181, 1182,
	7, 34, 2, 2, 1182, 1183, 5, 78, 40, 7, 1183, 1231, 3, 2, 2, 2, 1184, 1186,
	12, 16, 2, 2, 1185, 1187, 7, 104, 2, 2, 1186, 1185, 3, 2, 2, 2, 1186, 1187,
	3, 2, 2, 2, 1187, 1188, 3, 2, 2, 2, 1188, 1208, 7, 85, 2, 2, 1189, 1199,
	7, 5, 2, 2, 1190, 1200, 5, 60, 31, 2, 1191, 1196, 5, 78, 40, 2, 1192, 1193,
	7, 7, 2, 2, 1193, 1195, 5, 78, 40, 2, 1194, 1192, 3, 2, 2, 2, 1195, 1198,
	3, 2, 2, 2, 1196, 1194, 3, 2, 2, 2, 1196, 1197, 3, 2, 2, 2, 1197, 1200,
	3, 2, 2, 2, 1198, 1196, 3, 2, 2, 2, 1199, 1190, 3, 2, 2, 2, 1199, 1191,
	3, 2, 2, 2, 1199, 1200, 3, 2, 2, 2, 1200, 1201, 3, 2, 2, 2, 1201, 1209,
	7, 6, 2, 2, 1202, 1203, 5, 130, 66, 2, 1203, 1204, 7, 4, 2, 2, 1204, 1206,
	3, 2, 2, 2, 1205, 1202, 3, 2, 2, 2, 1205, 1206, 3, 2, 2, 2, 1206, 1207,
	3, 2, 2, 2, 1207, 1209, 5, 136, 69, 2, 1208, 1189, 3, 2, 2, 2, 1208, 1205,
	3, 2, 2, 2, 1209, 1231, 3, 2, 2, 2, 1210, 1211, 12, 10, 2, 2, 1211, 1212,
	7, 47, 2, 2, 1212, 1231, 5, 144, 73, 2, 1213, 1215, 12, 9, 2, 2, 1214,
	1216, 7, 104, 2, 2, 1215, 1214, 3, 2, 2, 2, 1215, 1216, 3, 2, 2, 2, 1216,
	1217, 3, 2, 2, 2, 1217, 1218, 9, 14, 2, 2, 1218, 1221, 5, 78, 40, 2, 1219,
	1220, 7, 69, 2, 2, 1220, 1222, 5, 78, 40, 2, 1221, 1219, 3, 2, 2, 2, 1221,
	1222, 3, 2, 2, 2, 1222, 1231, 3, 2, 2, 2, 1223, 1228, 12, 8, 2, 2, 1224,
	1229, 7, 95, 2, 2, 1225, 1229, 7, 105, 2, 2, 1226, 1227, 7, 104, 2, 2,
	1227, 1229, 7, 106, 2, 2, 1228, 1224, 3, 2, 2, 2, 1228, 1225, 3, 2, 2,
	2, 1228, 1226, 3, 2, 2, 2, 1229, 1231, 3, 2, 2, 2, 1230, 1145, 3, 2, 2,
	2, 1230, 1148, 3, 2, 2, 2, 1230, 1151, 3, 2, 2, 2, 1230, 1154, 3, 2, 2,
	2, 1230, 1157, 3, 2, 2, 2, 1230, 1160, 3, 2, 2, 2, 1230, 1163, 3, 2, 2,
	2, 1230, 1166, 3, 2, 2, 2, 1230, 1169, 3, 2, 2, 2, 1230, 1175, 3, 2, 2,
	2, 1230, 1184, 3, 2, 2, 2, 1230, 1210, 3, 2, 2, 2, 1230, 1213, 3, 2, 2,
	2, 1230, 1223, 3, 2, 2, 2, 1231, 1234, 3, 2, 2, 2, 1232, 1230, 3, 2, 2,
	2, 1232, 1233, 3, 2, 2, 2, 1233, 79, 3, 2, 2, 2, 1234, 1232, 3, 2, 2, 2,
	1235, 1236, 7, 119, 2, 2, 1236, 1248, 5, 146, 74, 2, 1237, 1238, 7, 5,
	2, 2, 1238, 1243, 5, 142, 72, 2, 1239, 1240, 7, 7, 2, 2, 1240, 1242, 5,
	142, 72, 2, 1241, 1239, 3, 2, 2, 2, 1242, 1245, 3, 2, 2, 2, 1243, 1241,
	3, 2, 2, 2, 1243, 1244, 3, 2, 2, 2, 1244, 1246, 3, 2, 2, 2, 1245, 1243,
	3, 2, 2, 2, 1246, 1247, 7, 6, 2, 2, 1247, 1249, 3, 2, 2, 2, 1248, 1237,
	3, 2, 2, 2, 1248, 1249, 3, 2, 2, 2, 1249, 1268, 3, 2, 2, 2, 1250, 1251,
	7, 109, 2, 2, 1251, 1260, 9, 15, 2, 2, 1252, 1253, 7, 131, 2, 2, 1253,
	1261, 7, 106, 2, 2, 1254, 1255, 7, 131, 2, 2, 1255, 1261, 7, 58, 2, 2,
	1256, 1261, 7, 43, 2, 2, 1257, 1261, 7, 125, 2, 2, 1258, 1259, 7, 103,
	2, 2, 1259, 1261, 7, 28, 2, 2, 1260, 1252, 3, 2, 2, 2, 1260, 1254, 3, 2,
	2, 2, 1260, 1256, 3, 2, 2, 2, 1260, 1257, 3, 2, 2, 2, 1260, 1258, 3, 2,
	2, 2, 1261, 1265, 3, 2, 2, 2, 1262, 1263, 7, 101, 2, 2, 1263, 1265, 5,
	126, 64, 2, 1264, 1250, 3, 2, 2, 2, 1264, 1262, 3, 2, 2, 2, 1265, 1267,
	3, 2, 2, 2, 1266, 1264, 3, 2, 2, 2, 1267, 1270, 3, 2, 2, 2, 1268, 1266,
	3, 2, 2, 2, 1268, 1269, 3, 2, 2, 2, 1269, 1281, 3, 2, 2, 2, 1270, 1268,
	3, 2, 2, 2, 1271, 1273, 7, 104, 2, 2, 1272, 1271, 3, 2, 2, 2, 1272, 1273,
	3, 2, 2, 2, 1273, 1274, 3, 2, 2, 2, 1274, 1279, 7, 59, 2, 2, 1275, 1276,
	7, 88, 2, 2, 1276, 1280, 7, 60, 2, 2, 1277, 1278, 7, 88, 2, 2, 1278, 1280,
	7, 84, 2, 2, 1279, 1275, 3, 2, 2, 2, 1279, 1277, 3, 2, 2, 2, 1279, 1280,
	3, 2, 2, 2, 1280, 1282, 3, 2, 2, 2, 1281, 1272, 3, 2, 2, 2, 1281, 1282,
	3, 2, 2, 2, 1282, 81, 3, 2, 2, 2, 1283, 1284, 7, 117, 2, 2, 1284, 1289,
	7, 5, 2, 2, 1285, 1290, 7, 83, 2, 2, 1286, 1287, 9, 16, 2, 2, 1287, 1288,
	7, 7, 2, 2, 1288, 1290, 5, 118, 60, 2, 1289, 1285, 3, 2, 2, 2, 1289, 1286,
	3, 2, 2, 2, 1290, 1291, 3, 2, 2, 2, 1291, 1292, 7, 6, 2, 2, 1292, 83, 3,
	2, 2, 2, 1293, 1296, 5, 142, 72, 2, 1294, 1295, 7, 47, 2, 2, 1295, 1297,
	5, 144, 73, 2, 1296, 1294, 3, 2, 2, 2, 1296, 1297, 3, 2, 2, 2, 1297, 1299,
	3, 2, 2, 2, 1298, 1300, 9, 7, 2, 2, 1299, 1298, 3, 2, 2, 2, 1299, 1300,
	3, 2, 2, 2, 1300, 85, 3, 2, 2, 2, 1301, 1302, 7, 51, 2, 2, 1302, 1304,
	5, 126, 64, 2, 1303, 1301, 3, 2, 2, 2, 1303, 1304, 3, 2, 2, 2, 1304, 1341,
	3, 2, 2, 2, 1305, 1306, 7, 115, 2, 2, 1306, 1309, 7, 97, 2, 2, 1307, 1309,
	7, 140, 2, 2, 1308, 1305, 3, 2, 2, 2, 1308, 1307, 3, 2, 2, 2, 1309, 1310,
	3, 2, 2, 2, 1310, 1311, 7, 5, 2, 2, 1311, 1316, 5, 84, 43, 2, 1312, 1313,
	7, 7, 2, 2, 1313, 1315, 5, 84, 43, 2, 1314, 1312, 3, 2, 2, 2, 1315, 1318,
	3, 2, 2, 2, 1316, 1314, 3, 2, 2, 2, 1316, 1317, 3, 2, 2, 2, 1317, 1319,
	3, 2, 2, 2, 1318, 1316, 3, 2, 2, 2, 1319, 1320, 7, 6, 2, 2, 1320, 1321,
	5, 76, 39, 2, 1321, 1342, 3, 2, 2, 2, 1322, 1323, 7, 46, 2, 2, 1323, 1324,
	7, 5, 2, 2, 1324, 1325, 5, 78, 40, 2, 1325, 1326, 7, 6, 2, 2, 1326, 1342,
	3, 2, 2, 2, 1327, 1328, 7, 76, 2, 2, 1328, 1329, 7, 97, 2, 2, 1329, 1330,
	7, 5, 2, 2, 1330, 1335, 5, 142, 72, 2, 1331, 1332, 7, 7, 2, 2, 1332, 1334,
	5, 142, 72, 2, 1333, 1331, 3, 2, 2, 2, 1334, 1337, 3, 2, 2, 2, 1335, 1333,
	3, 2, 2, 2, 1335, 1336, 3, 2, 2, 2, 1336, 1338, 3, 2, 2, 2, 1337, 1335,
	3, 2, 2, 2, 1338, 1339, 7, 6, 2, 2, 1339, 1340, 5, 80, 41, 2, 1340, 1342,
	3, 2, 2, 2, 1341, 1308, 3, 2, 2, 2, 1341, 1322, 3, 2, 2, 2, 1341, 1327,
	3, 2, 2, 2, 1342, 87, 3, 2, 2, 2, 1343, 1345, 7, 149, 2, 2, 1344, 1346,
	7, 118, 2, 2, 1345, 1344, 3, 2, 2, 2, 1345, 1346, 3, 2, 2, 2, 1346, 1347,
	3, 2, 2, 2, 1347, 1352, 5, 96, 49, 2, 1348, 1349, 7, 7, 2, 2, 1349, 1351,
	5, 96, 49, 2, 1350, 1348, 3, 2, 2, 2, 1351, 1354, 3, 2, 2, 2, 1352, 1350,
	3, 2, 2, 2, 1352, 1353, 3, 2, 2, 2, 1353, 89, 3, 2, 2, 2, 1354, 1352, 3,
	2, 2, 2, 1355, 1356, 5, 130, 66, 2, 1356, 1357, 7, 4, 2, 2, 1357, 1359,
	3, 2, 2, 2, 1358, 1355, 3, 2, 2, 2, 1358, 1359, 3, 2, 2, 2, 1359, 1360,
	3, 2, 2, 2, 1360, 1366, 5, 136, 69, 2, 1361, 1362, 7, 87, 2, 2, 1362, 1363,
	7, 42, 2, 2, 1363, 1367, 5, 148, 75, 2, 1364, 1365, 7, 104, 2, 2, 1365,
	1367, 7, 87, 2, 2, 1366, 1361, 3, 2, 2, 2, 1366, 1364, 3, 2, 2, 2, 1366,
	1367, 3, 2, 2, 2, 1367, 91, 3, 2, 2, 2, 1368, 1371, 5, 78, 40, 2, 1369,
	1370, 7, 47, 2, 2, 1370, 1372, 5, 144, 73, 2, 1371, 1369, 3, 2, 2, 2, 1371,
	1372, 3, 2, 2, 2, 1372, 1374, 3, 2, 2, 2, 1373, 1375, 9, 7, 2, 2, 1374,
	1373, 3, 2, 2, 2, 1374, 1375, 3, 2, 2, 2, 1375, 93, 3, 2, 2, 2, 1376, 1380,
	5, 112, 57, 2, 1377, 1380, 5, 126, 64, 2, 1378, 1380, 7, 154, 2, 2, 1379,
	1376, 3, 2, 2, 2, 1379, 1377, 3, 2, 2, 2, 1379, 1378, 3, 2, 2, 2, 1380,
	95, 3, 2, 2, 2, 1381, 1393, 5, 136, 69, 2, 1382, 1383, 7, 5, 2, 2, 1383,
	1388, 5, 142, 72, 2, 1384, 1385, 7, 7, 2, 2, 1385, 1387, 5, 142, 72, 2,
	1386, 1384, 3, 2, 2, 2, 1387, 1390, 3, 2, 2, 2, 1388, 1386, 3, 2, 2, 2,
	1388, 1389, 3, 2, 2, 2, 1389, 1391, 3, 2, 2, 2, 1390, 1388, 3, 2, 2, 2,
	1391, 1392, 7, 6, 2, 2, 1392, 1394, 3, 2, 2, 2, 1393, 1382, 3, 2, 2, 2,
	1393, 1394, 3, 2, 2, 2, 1394, 1395, 3, 2, 2, 2, 1395, 1396, 7, 35, 2, 2,
	1396, 1397, 7, 5, 2, 2, 1397, 1398, 5, 60, 31, 2, 1398, 1399, 7, 6, 2,
	2, 1399, 97, 3, 2, 2, 2, 1400, 1413, 7, 9, 2, 2, 1401, 1402, 5, 136, 69,
	2, 1402, 1403, 7, 4, 2, 2, 1403, 1404, 7, 9, 2, 2, 1404, 1413, 3, 2, 2,
	2, 1405, 1410, 5, 78, 40, 2, 1406, 1408, 7, 35, 2, 2, 1407, 1406, 3, 2,
	2, 2, 1407, 1408, 3, 2, 2, 2, 1408, 1409, 3, 2, 2, 2, 1409, 1411, 5, 122,
	62, 2, 1410, 1407, 3, 2, 2, 2, 1410, 1411, 3, 2, 2, 2, 1411, 1413, 3, 2,
	2, 2, 1412, 1400, 3, 2, 2, 2, 1412, 1401, 3, 2, 2, 2, 1412, 1405, 3, 2,
	2, 2, 1413, 99, 3, 2, 2, 2, 1414, 1415, 5, 132, 67, 2, 1415, 1416, 7, 4,
	2, 2, 1416, 1418, 3, 2, 2, 2, 1417, 1414, 3, 2, 2, 2, 1417, 1418, 3, 2,
	2, 2, 1418, 1419, 3, 2, 2, 2, 1419, 1424, 5, 136, 69, 2, 1420, 1422, 7,
	35, 2, 2, 1421, 1420, 3, 2, 2, 2, 1421, 1422, 3, 2, 2, 2, 1422, 1423, 3,
	2, 2, 2, 1423, 1425, 5, 160, 81, 2, 1424, 1421, 3, 2, 2, 2, 1424, 1425,
	3, 2, 2, 2, 1425, 1431, 3, 2, 2, 2, 1426, 1427, 7, 87, 2, 2, 1427, 1428,
	7, 42, 2, 2, 1428, 1432, 5, 148, 75, 2, 1429, 1430, 7, 104, 2, 2, 1430,
	1432, 7, 87, 2, 2, 1431, 1426, 3, 2, 2, 2, 1431, 1429, 3, 2, 2, 2, 1431,
	1432, 3, 2, 2, 2, 1432, 1481, 3, 2, 2, 2, 1433, 1434, 5, 132, 67, 2, 1434,
	1435, 7, 4, 2, 2, 1435, 1437, 3, 2, 2, 2, 1436, 1433, 3, 2, 2, 2, 1436,
	1437, 3, 2, 2, 2, 1437, 1438, 3, 2, 2, 2, 1438, 1439, 5, 134, 68, 2, 1439,
	1448, 7, 5, 2, 2, 1440, 1445, 5, 78, 40, 2, 1441, 1442, 7, 7, 2, 2, 1442,
	1444, 5, 78, 40, 2, 1443, 1441, 3, 2, 2, 2, 1444, 1447, 3, 2, 2, 2, 1445,
	1443, 3, 2, 2, 2, 1445, 1446, 3, 2, 2, 2, 1446, 1449, 3, 2, 2, 2, 1447,
	1445, 3, 2, 2, 2, 1448, 1440, 3, 2, 2, 2, 1448, 1449, 3, 2, 2, 2, 1449,
	1450, 3, 2, 2, 2, 1450, 1455, 7, 6, 2, 2, 1451, 1453, 7, 35, 2, 2, 1452,
	1451, 3, 2, 2, 2, 1452, 1453, 3, 2, 2, 2, 1453, 1454, 3, 2, 2, 2, 1454,
	1456, 5, 160, 81, 2, 1455, 1452, 3, 2, 2, 2, 1455, 1456, 3, 2, 2, 2, 1456,
	1481, 3, 2, 2, 2, 1457, 1467, 7, 5, 2, 2, 1458, 1463, 5, 100, 51, 2, 1459,
	1460, 7, 7, 2, 2, 1460, 1462, 5, 100, 51, 2, 1461, 1459, 3, 2, 2, 2, 1462,
	1465, 3, 2, 2, 2, 1463, 1461, 3, 2, 2, 2, 1463, 1464, 3, 2, 2, 2, 1464,
	1468, 3, 2, 2, 2, 1465, 1463, 3, 2, 2, 2, 1466, 1468, 5, 102, 52, 2, 1467,
	1458, 3, 2, 2, 2, 1467, 1466, 3, 2, 2, 2, 1468, 1469, 3, 2, 2, 2, 1469,
	1470, 7, 6, 2, 2, 1470, 1481, 3, 2, 2, 2, 1471, 1472, 7, 5, 2, 2, 1472,
	1473, 5, 60, 31, 2, 1473, 1478, 7, 6, 2, 2, 1474, 1476, 7, 35, 2, 2, 1475,
	1474, 3, 2, 2, 2, 1475, 1476, 3, 2, 2, 2, 1476, 1477, 3, 2, 2, 2, 1477,
	1479, 5, 160, 81, 2, 1478, 1475, 3, 2, 2, 2, 1478, 1479, 3, 2, 2, 2, 1479,
	1481, 3, 2, 2, 2, 1480, 1417, 3, 2, 2, 2, 1480, 1436, 3, 2, 2, 2, 1480,
	1457, 3, 2, 2, 2, 1480, 1471, 3, 2, 2, 2, 1481, 101, 3, 2, 2, 2, 1482,
	1489, 5, 100, 51, 2, 1483, 1484, 5, 104, 53, 2, 1484, 1485, 5, 100, 51,
	2, 1485, 1486, 5, 106, 54, 2, 1486, 1488, 3, 2, 2, 2, 1487, 1483, 3, 2,
	2, 2, 1488, 1491, 3, 2, 2, 2, 1489, 1487, 3, 2, 2, 2, 1489, 1490, 3, 2,
	2, 2, 1490, 103, 3, 2, 2, 2, 1491, 1489, 3, 2, 2, 2, 1492, 1506, 7, 7,
	2, 2, 1493, 1495, 7, 102, 2, 2, 1494, 1493, 3, 2, 2, 2, 1494, 1495, 3,
	2, 2, 2, 1495, 1502, 3, 2, 2, 2, 1496, 1498, 7, 98, 2, 2, 1497, 1499, 7,
	112, 2, 2, 1498, 1497, 3, 2, 2, 2, 1498, 1499, 3, 2, 2, 2, 1499, 1503,
	3, 2, 2, 2, 1500, 1503, 7, 89, 2, 2, 1501, 1503, 7, 53, 2, 2, 1502, 1496,
	3, 2, 2, 2, 1502, 1500, 3, 2, 2, 2, 1502, 1501, 3, 2, 2, 2, 1502, 1503,
	3, 2, 2, 2, 1503, 1504, 3, 2, 2, 2, 1504, 1506, 7, 96, 2, 2, 1505, 1492,
	3, 2, 2, 2, 1505, 1494, 3, 2, 2, 2, 1506, 105, 3, 2, 2, 2, 1507, 1508,
	7, 109, 2, 2, 1508, 1522, 5, 78, 40, 2, 1509, 1510, 7, 142, 2, 2, 1510,
	1511, 7, 5, 2, 2, 1511, 1516, 5, 142, 72, 2, 1512, 1513, 7, 7, 2, 2, 1513,
	1515, 5, 142, 72, 2, 1514, 1512, 3, 2, 2, 2, 1515, 1518, 3, 2, 2, 2, 1516,
	1514, 3, 2, 2, 2, 1516, 1517, 3, 2, 2, 2, 1517, 1519, 3, 2, 2, 2, 1518,
	1516, 3, 2, 2, 2, 1519, 1520, 7, 6, 2, 2, 1520, 1522, 3, 2, 2, 2, 1521,
	1507, 3, 2, 2, 2, 1521, 1509, 3, 2, 2, 2, 1521, 1522, 3, 2, 2, 2, 1522,
	107, 3, 2, 2, 2, 1523, 1525, 7, 130, 2, 2, 1524, 1526, 9, 6, 2, 2, 1525,
	1524, 3, 2, 2, 2, 1525, 1526, 3, 2, 2, 2, 1526, 1527, 3, 2, 2, 2, 1527,
	1532, 5, 98, 50, 2, 1528, 1529, 7, 7, 2, 2, 1529, 1531, 5, 98, 50, 2, 1530,
	1528, 3, 2, 2, 2, 1531, 1534, 3, 2, 2, 2, 1532, 1530, 3, 2, 2, 2, 1532,
	1533, 3, 2, 2, 2, 1533, 1547, 3, 2, 2, 2, 1534, 1532, 3, 2, 2, 2, 1535,
	1545, 7, 77, 2, 2, 1536, 1541, 5, 100, 51, 2, 1537, 1538, 7, 7, 2, 2, 1538,
	1540, 5, 100, 51, 2, 1539, 1537, 3, 2, 2, 2, 1540, 1543, 3, 2, 2, 2, 1541,
	1539, 3, 2, 2, 2, 1541, 1542, 3, 2, 2, 2, 1542, 1546, 3, 2, 2, 2, 1543,
	1541, 3, 2, 2, 2, 1544, 1546, 5, 102, 52, 2, 1545, 1536, 3, 2, 2, 2, 1545,
	1544, 3, 2, 2, 2, 1546, 1548, 3, 2, 2, 2, 1547, 1535, 3, 2, 2, 2, 1547,
	1548, 3, 2, 2, 2, 1548, 1551, 3, 2, 2, 2, 1549, 1550, 7, 148, 2, 2, 1550,
	1552, 5, 78, 40, 2, 1551, 1549, 3, 2, 2, 2, 1551, 1552, 3, 2, 2, 2, 1552,
	1567, 3, 2, 2, 2, 1553, 1554, 7, 80, 2, 2, 1554, 1555, 7, 42, 2, 2, 1555,
	1560, 5, 78, 40, 2, 1556, 1557, 7, 7, 2, 2, 1557, 1559, 5, 78, 40, 2, 1558,
	1556, 3, 2, 2, 2, 1559, 1562, 3, 2, 2, 2, 1560, 1558, 3, 2, 2, 2, 1560,
	1561, 3, 2, 2, 2, 1561, 1565, 3, 2, 2, 2, 1562, 1560, 3, 2, 2, 2, 1563,
	1564, 7, 81, 2, 2, 1564, 1566, 5, 78, 40, 2, 1565, 1563, 3, 2, 2, 2, 1565,
	1566, 3, 2, 2, 2, 1566, 1568, 3, 2, 2, 2, 1567, 1553, 3, 2, 2, 2, 1567,
	1568, 3, 2, 2, 2, 1568, 1598, 3, 2, 2, 2, 1569, 1570, 7, 144, 2, 2, 1570,
	1571, 7, 5, 2, 2, 1571, 1576, 5, 78, 40, 2, 1572, 1573, 7, 7, 2, 2, 1573,
	1575, 5, 78, 40, 2, 1574, 1572, 3, 2, 2, 2, 1575, 1578, 3, 2, 2, 2, 1576,
	1574, 3, 2, 2, 2, 1576, 1577, 3, 2, 2, 2, 1577, 1579, 3, 2, 2, 2, 1578,
	1576, 3, 2, 2, 2, 1579, 1594, 7, 6, 2, 2, 1580, 1581, 7, 7, 2, 2, 1581,
	1582, 7, 5, 2, 2, 1582, 1587, 5, 78, 40, 2, 1583, 1584, 7, 7, 2, 2, 1584,
	1586, 5, 78, 40, 2, 1585, 1583, 3, 2, 2, 2, 1586, 1589, 3, 2, 2, 2, 1587,
	1585, 3, 2, 2, 2, 1587, 1588, 3, 2, 2, 2, 1588, 1590, 3, 2, 2, 2, 1589,
	1587, 3, 2, 2, 2, 1590, 1591, 7, 6, 2, 2, 1591, 1593, 3, 2, 2, 2, 1592,
	1580, 3, 2, 2, 2, 1593, 1596, 3, 2, 2, 2, 1594, 1592, 3, 2, 2, 2, 1594,
	1595, 3, 2, 2, 2, 1595, 1598, 3, 2, 2, 2, 1596, 1594, 3, 2, 2, 2, 1597,
	1523, 3, 2, 2, 2, 1597, 1569, 3, 2, 2, 2, 1598, 109, 3, 2, 2, 2, 1599,
	1605, 7, 139, 2, 2, 1600, 1601, 7, 139, 2, 2, 1601, 1605, 7, 31, 2, 2,
	1602, 1605, 7, 92, 2, 2, 1603, 1605, 7, 70, 2, 2, 1604, 1599, 3, 2, 2,
	2, 1604, 1600, 3, 2, 2, 2, 1604, 1602, 3, 2, 2, 2, 1604, 1603, 3, 2, 2,
	2, 1605, 111, 3, 2, 2, 2, 1606, 1608, 9, 10, 2, 2, 1607, 1606, 3, 2, 2,
	2, 1607, 1608, 3, 2, 2, 2, 1608, 1609, 3, 2, 2, 2, 1609, 1610, 7, 152,
	2, 2, 1610, 113, 3, 2, 2, 2, 1611, 1612, 9, 17, 2, 2, 1612, 115, 3, 2,
	2, 2, 1613, 1614, 9, 18, 2, 2, 1614, 117, 3, 2, 2, 2, 1615, 1616, 7, 154,
	2, 2, 1616, 119, 3, 2, 2, 2, 1617, 1620, 5, 78, 40, 2, 1618, 1620, 5, 70,
	36, 2, 1619, 1617, 3, 2, 2, 2, 1619, 1618, 3, 2, 2, 2, 1620, 121, 3, 2,
	2, 2, 1621, 1622, 9, 19, 2, 2, 1622, 123, 3, 2, 2, 2, 1623, 1624, 9, 20,
	2, 2, 1624, 125, 3, 2, 2, 2, 1625, 1626, 5, 164, 83, 2, 1626, 127, 3, 2,
	2, 2, 1627, 1628, 5, 164, 83, 2, 1628, 129, 3, 2, 2, 2, 1629, 1630, 5,
	164, 83, 2, 1630, 131, 3, 2, 2, 2, 1631, 1632, 5, 164, 83, 2, 1632, 133,
	3, 2, 2, 2, 1633, 1634, 5, 164, 83, 2, 1634, 135, 3, 2, 2, 2, 1635, 1636,
	5, 164, 83, 2, 1636, 137, 3, 2, 2, 2, 1637, 1638, 5, 164, 83, 2, 1638,
	139, 3, 2, 2, 2, 1639, 1640, 5, 164, 83, 2, 1640, 141, 3, 2, 2, 2, 1641,
	1642, 5, 164, 83, 2, 1642, 143, 3, 2, 2, 2, 1643, 1644, 5, 164, 83, 2,
	1644, 145, 3, 2, 2, 2, 1645, 1646, 5, 164, 83, 2, 1646, 147, 3, 2, 2, 2,
	1647, 1648, 5, 164, 83, 2, 1648, 149, 3, 2, 2, 2, 1649, 1650, 5, 164, 83,
	2, 1650, 151, 3, 2, 2, 2, 1651, 1652, 5, 164, 83, 2, 1652, 153, 3, 2, 2,
	2, 1653, 1654, 5, 164, 83, 2, 1654, 155, 3, 2, 2, 2, 1655, 1656, 5, 164,
	83, 2, 1656, 157, 3, 2, 2, 2, 1657, 1658, 5, 164, 83, 2, 1658, 159, 3,
	2, 2, 2, 1659, 1666, 7, 151, 2, 2, 1660, 1666, 7, 154, 2, 2, 1661, 1662,
	7, 5, 2, 2, 1662, 1663, 5, 160, 81, 2, 1663, 1664, 7, 6, 2, 2, 1664, 1666,
	3, 2, 2, 2, 1665, 1659, 3, 2, 2, 2, 1665, 1660, 3, 2, 2, 2, 1665, 1661,
	3, 2, 2, 2, 1666, 161, 3, 2, 2, 2, 1667, 1668, 5, 164, 83, 2, 1668, 163,
	3, 2, 2, 2, 1669, 1677, 7, 151, 2, 2, 1670, 1677, 5, 124, 63, 2, 1671,
	1677, 7, 154, 2, 2, 1672, 1673, 7, 5, 2, 2, 1673, 1674, 5, 164, 83, 2,
	1674, 1675, 7, 6, 2, 2, 1675, 1677, 3, 2, 2, 2, 1676, 1669, 3, 2, 2, 2,
	1676, 1670, 3, 2, 2, 2, 1676, 1671, 3, 2, 2, 2, 1676, 1672, 3, 2, 2, 2,
	1677, 165, 3, 2, 2, 2, 238, 169, 177, 184, 189, 195, 201, 203, 235, 242,
	250, 253, 262, 266, 274, 278, 280, 285, 287, 290, 295, 299, 304, 313, 316,
	322, 324, 328, 334, 339, 350, 356, 360, 366, 371, 380, 387, 393, 397, 401,
	407, 412, 419, 430, 433, 435, 441, 447, 451, 458, 464, 470, 476, 481, 493,
	498, 509, 514, 517, 524, 527, 534, 543, 546, 552, 554, 558, 566, 571, 579,
	584, 592, 597, 605, 610, 615, 623, 633, 636, 642, 644, 647, 666, 672, 681,
	686, 695, 706, 713, 719, 725, 734, 741, 745, 747, 751, 758, 760, 764, 767,
	773, 783, 786, 792, 794, 797, 805, 815, 818, 824, 826, 830, 837, 846, 850,
	852, 856, 865, 870, 872, 881, 892, 899, 902, 905, 918, 932, 937, 940, 953,
	967, 972, 981, 984, 990, 992, 998, 1003, 1009, 1021, 1025, 1030, 1034,
	1037, 1055, 1060, 1065, 1073, 1078, 1087, 1094, 1098, 1114, 1117, 1125,
	1134, 1138, 1143, 1172, 1177, 1186, 1196, 1199, 1205, 1208, 1215, 1221,
	1228, 1230, 1232, 1243, 1248, 1260, 1264, 1268, 1272, 1279, 1281, 1289,
	1296, 1299, 1303, 1308, 1316, 1335, 1341, 1345, 1352, 1358, 1366, 1371,
	1374, 1379, 1388, 1393, 1407, 1410, 1412, 1417, 1421, 1424, 1431, 1436,
	1445, 1448, 1452, 1455, 1463, 1467, 1475, 1478, 1480, 1489, 1494, 1498,
	1502, 1505, 1516, 1521, 1525, 1532, 1541, 1545, 1547, 1551, 1560, 1565,
	1567, 1576, 1587, 1594, 1597, 1604, 1607, 1619, 1665, 1676,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'",
	"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'",
	"'>='", "'=='", "'!='", "'<>'",
}
var symbolicNames = []string{
	"", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR",
	"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE",
	"LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", "K_ACTION",
	"K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC",
	"K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", "K_BETWEEN", "K_BY",
	"K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT",
	"K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE",
	"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", "K_DEFAULT", "K_DEFERRABLE",
	"K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP",
	"K_EACH", "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS",
	"K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", "K_GLOB",
	"K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX",
	"K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", "K_INSTEAD", "K_INTERSECT",
	"K_INTO", "K_IS", "K_ISNULL", "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT",
	"K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF",
	"K_OFFSET", "K_ON", "K_OR", "K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA",
	"K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP",
	"K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT",
	"K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", "K_SET", "K_TABLE", "K_TEMP",
	"K_TEMPORARY", "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION",
	"K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL",
	"K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL",
	"BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT",
	"MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR",
}

var ruleNames = []string{
	"parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt",
	"attach_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt", "create_index_stmt",
	"create_table_stmt", "create_trigger_stmt", "create_view_stmt", "create_virtual_table_stmt",
	"delete_stmt", "delete_stmt_limited", "detach_stmt", "drop_index_stmt",
	"drop_table_stmt", "drop_trigger_stmt", "drop_view_stmt", "factored_select_stmt",
	"insert_stmt", "pragma_stmt", "reindex_stmt", "release_stmt", "rollback_stmt",
	"savepoint_stmt", "simple_select_stmt", "select_stmt", "select_or_values",
	"update_stmt", "update_stmt_limited", "vacuum_stmt", "column_def", "type_name",
	"column_constraint", "conflict_clause", "expr", "foreign_key_clause", "raise_function",
	"indexed_column", "table_constraint", "with_clause", "qualified_table_name",
	"ordering_term", "pragma_value", "common_table_expression", "result_column",
	"table_or_subquery", "join_clause", "join_operator", "join_constraint",
	"select_core", "compound_operator", "signed_number", "literal_value", "unary_operator",
	"error_message", "module_argument", "column_alias", "keyword", "name",
	"function_name", "database_name", "schema_name", "table_function_name",
	"table_name", "table_or_index_name", "new_table_name", "column_name", "collation_name",
	"foreign_table", "index_name", "trigger_name", "view_name", "module_name",
	"pragma_name", "savepoint_name", "table_alias", "transaction_name", "any_name",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type SQLiteParser struct {
	*antlr.BaseParser
}

func NewSQLiteParser(input antlr.TokenStream) *SQLiteParser {
	this := new(SQLiteParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SQLite.g4"

	return this
}

// SQLiteParser tokens.
const (
	SQLiteParserEOF                 = antlr.TokenEOF
	SQLiteParserSCOL                = 1
	SQLiteParserDOT                 = 2
	SQLiteParserOPEN_PAR            = 3
	SQLiteParserCLOSE_PAR           = 4
	SQLiteParserCOMMA               = 5
	SQLiteParserASSIGN              = 6
	SQLiteParserSTAR                = 7
	SQLiteParserPLUS                = 8
	SQLiteParserMINUS               = 9
	SQLiteParserTILDE               = 10
	SQLiteParserPIPE2               = 11
	SQLiteParserDIV                 = 12
	SQLiteParserMOD                 = 13
	SQLiteParserLT2                 = 14
	SQLiteParserGT2                 = 15
	SQLiteParserAMP                 = 16
	SQLiteParserPIPE                = 17
	SQLiteParserLT                  = 18
	SQLiteParserLT_EQ               = 19
	SQLiteParserGT                  = 20
	SQLiteParserGT_EQ               = 21
	SQLiteParserEQ                  = 22
	SQLiteParserNOT_EQ1             = 23
	SQLiteParserNOT_EQ2             = 24
	SQLiteParserK_ABORT             = 25
	SQLiteParserK_ACTION            = 26
	SQLiteParserK_ADD               = 27
	SQLiteParserK_AFTER             = 28
	SQLiteParserK_ALL               = 29
	SQLiteParserK_ALTER             = 30
	SQLiteParserK_ANALYZE           = 31
	SQLiteParserK_AND               = 32
	SQLiteParserK_AS                = 33
	SQLiteParserK_ASC               = 34
	SQLiteParserK_ATTACH            = 35
	SQLiteParserK_AUTOINCREMENT     = 36
	SQLiteParserK_BEFORE            = 37
	SQLiteParserK_BEGIN             = 38
	SQLiteParserK_BETWEEN           = 39
	SQLiteParserK_BY                = 40
	SQLiteParserK_CASCADE           = 41
	SQLiteParserK_CASE              = 42
	SQLiteParserK_CAST              = 43
	SQLiteParserK_CHECK             = 44
	SQLiteParserK_COLLATE           = 45
	SQLiteParserK_COLUMN            = 46
	SQLiteParserK_COMMIT            = 47
	SQLiteParserK_CONFLICT          = 48
	SQLiteParserK_CONSTRAINT        = 49
	SQLiteParserK_CREATE            = 50
	SQLiteParserK_CROSS             = 51
	SQLiteParserK_CURRENT_DATE      = 52
	SQLiteParserK_CURRENT_TIME      = 53
	SQLiteParserK_CURRENT_TIMESTAMP = 54
	SQLiteParserK_DATABASE          = 55
	SQLiteParserK_DEFAULT           = 56
	SQLiteParserK_DEFERRABLE        = 57
	SQLiteParserK_DEFERRED          = 58
	SQLiteParserK_DELETE            = 59
	SQLiteParserK_DESC              = 60
	SQLiteParserK_DETACH            = 61
	SQLiteParserK_DISTINCT          = 62
	SQLiteParserK_DROP              = 63
	SQLiteParserK_EACH              = 64
	SQLiteParserK_ELSE              = 65
	SQLiteParserK_END               = 66
	SQLiteParserK_ESCAPE            = 67
	SQLiteParserK_EXCEPT            = 68
	SQLiteParserK_EXCLUSIVE         = 69
	SQLiteParserK_EXISTS            = 70
	SQLiteParserK_EXPLAIN           = 71
	SQLiteParserK_FAIL              = 72
	SQLiteParserK_FOR               = 73
	SQLiteParserK_FOREIGN           = 74
	SQLiteParserK_FROM              = 75
	SQLiteParserK_FULL              = 76
	SQLiteParserK_GLOB              = 77
	SQLiteParserK_GROUP             = 78
	SQLiteParserK_HAVING            = 79
	SQLiteParserK_IF                = 80
	SQLiteParserK_IGNORE            = 81
	SQLiteParserK_IMMEDIATE         = 82
	SQLiteParserK_IN                = 83
	SQLiteParserK_INDEX             = 84
	SQLiteParserK_INDEXED           = 85
	SQLiteParserK_INITIALLY         = 86
	SQLiteParserK_INNER             = 87
	SQLiteParserK_INSERT            = 88
	SQLiteParserK_INSTEAD           = 89
	SQLiteParserK_INTERSECT         = 90
	SQLiteParserK_INTO              = 91
	SQLiteParserK_IS                = 92
	SQLiteParserK_ISNULL            = 93
	SQLiteParserK_JOIN              = 94
	SQLiteParserK_KEY               = 95
	SQLiteParserK_LEFT              = 96
	SQLiteParserK_LIKE              = 97
	SQLiteParserK_LIMIT             = 98
	SQLiteParserK_MATCH             = 99
	SQLiteParserK_NATURAL           = 100
	SQLiteParserK_NO                = 101
	SQLiteParserK_NOT               = 102
	SQLiteParserK_NOTNULL           = 103
	SQLiteParserK_NULL              = 104
	SQLiteParserK_OF                = 105
	SQLiteParserK_OFFSET            = 106
	SQLiteParserK_ON                = 107
	SQLiteParserK_OR                = 108
	SQLiteParserK_ORDER             = 109
	SQLiteParserK_OUTER             = 110
	SQLiteParserK_PLAN              = 111
	SQLiteParserK_PRAGMA            = 112
	SQLiteParserK_PRIMARY           = 113
	SQLiteParserK_QUERY             = 114
	SQLiteParserK_RAISE             = 115
	SQLiteParserK_RECURSIVE         = 116
	SQLiteParserK_REFERENCES        = 117
	SQLiteParserK_REGEXP            = 118
	SQLiteParserK_REINDEX           = 119
	SQLiteParserK_RELEASE           = 120
	SQLiteParserK_RENAME            = 121
	SQLiteParserK_REPLACE           = 122
	SQLiteParserK_RESTRICT          = 123
	SQLiteParserK_RIGHT             = 124
	SQLiteParserK_ROLLBACK          = 125
	SQLiteParserK_ROW               = 126
	SQLiteParserK_SAVEPOINT         = 127
	SQLiteParserK_SELECT            = 128
	SQLiteParserK_SET               = 129
	SQLiteParserK_TABLE             = 130
	SQLiteParserK_TEMP              = 131
	SQLiteParserK_TEMPORARY         = 132
	SQLiteParserK_THEN              = 133
	SQLiteParserK_TO                = 134
	SQLiteParserK_TRANSACTION       = 135
	SQLiteParserK_TRIGGER           = 136
	SQLiteParserK_UNION             = 137
	SQLiteParserK_UNIQUE            = 138
	SQLiteParserK_UPDATE            = 139
	SQLiteParserK_USING             = 140
	SQLiteParserK_VACUUM            = 141
	SQLiteParserK_VALUES            = 142
	SQLiteParserK_VIEW              = 143
	SQLiteParserK_VIRTUAL           = 144
	SQLiteParserK_WHEN              = 145
	SQLiteParserK_WHERE             = 146
	SQLiteParserK_WITH              = 147
	SQLiteParserK_WITHOUT           = 148
	SQLiteParserIDENTIFIER          = 149
	SQLiteParserNUMERIC_LITERAL     = 150
	SQLiteParserBIND_PARAMETER      = 151
	SQLiteParserSTRING_LITERAL      = 152
	SQLiteParserBLOB_LITERAL        = 153
	SQLiteParserSINGLE_LINE_COMMENT = 154
	SQLiteParserMULTILINE_COMMENT   = 155
	SQLiteParserSPACES              = 156
	SQLiteParserUNEXPECTED_CHAR     = 157
)

// SQLiteParser rules.
const (
	SQLiteParserRULE_parse                     = 0
	SQLiteParserRULE_sql_stmt_list             = 1
	SQLiteParserRULE_sql_stmt                  = 2
	SQLiteParserRULE_alter_table_stmt          = 3
	SQLiteParserRULE_analyze_stmt              = 4
	SQLiteParserRULE_attach_stmt               = 5
	SQLiteParserRULE_begin_stmt                = 6
	SQLiteParserRULE_commit_stmt               = 7
	SQLiteParserRULE_compound_select_stmt      = 8
	SQLiteParserRULE_create_index_stmt         = 9
	SQLiteParserRULE_create_table_stmt         = 10
	SQLiteParserRULE_create_trigger_stmt       = 11
	SQLiteParserRULE_create_view_stmt          = 12
	SQLiteParserRULE_create_virtual_table_stmt = 13
	SQLiteParserRULE_delete_stmt               = 14
	SQLiteParserRULE_delete_stmt_limited       = 15
	SQLiteParserRULE_detach_stmt               = 16
	SQLiteParserRULE_drop_index_stmt           = 17
	SQLiteParserRULE_drop_table_stmt           = 18
	SQLiteParserRULE_drop_trigger_stmt         = 19
	SQLiteParserRULE_drop_view_stmt            = 20
	SQLiteParserRULE_factored_select_stmt      = 21
	SQLiteParserRULE_insert_stmt               = 22
	SQLiteParserRULE_pragma_stmt               = 23
	SQLiteParserRULE_reindex_stmt              = 24
	SQLiteParserRULE_release_stmt              = 25
	SQLiteParserRULE_rollback_stmt             = 26
	SQLiteParserRULE_savepoint_stmt            = 27
	SQLiteParserRULE_simple_select_stmt        = 28
	SQLiteParserRULE_select_stmt               = 29
	SQLiteParserRULE_select_or_values          = 30
	SQLiteParserRULE_update_stmt               = 31
	SQLiteParserRULE_update_stmt_limited       = 32
	SQLiteParserRULE_vacuum_stmt               = 33
	SQLiteParserRULE_column_def                = 34
	SQLiteParserRULE_type_name                 = 35
	SQLiteParserRULE_column_constraint         = 36
	SQLiteParserRULE_conflict_clause           = 37
	SQLiteParserRULE_expr                      = 38
	SQLiteParserRULE_foreign_key_clause        = 39
	SQLiteParserRULE_raise_function            = 40
	SQLiteParserRULE_indexed_column            = 41
	SQLiteParserRULE_table_constraint          = 42
	SQLiteParserRULE_with_clause               = 43
	SQLiteParserRULE_qualified_table_name      = 44
	SQLiteParserRULE_ordering_term             = 45
	SQLiteParserRULE_pragma_value              = 46
	SQLiteParserRULE_common_table_expression   = 47
	SQLiteParserRULE_result_column             = 48
	SQLiteParserRULE_table_or_subquery         = 49
	SQLiteParserRULE_join_clause               = 50
	SQLiteParserRULE_join_operator             = 51
	SQLiteParserRULE_join_constraint           = 52
	SQLiteParserRULE_select_core               = 53
	SQLiteParserRULE_compound_operator         = 54
	SQLiteParserRULE_signed_number             = 55
	SQLiteParserRULE_literal_value             = 56
	SQLiteParserRULE_unary_operator            = 57
	SQLiteParserRULE_error_message             = 58
	SQLiteParserRULE_module_argument           = 59
	SQLiteParserRULE_column_alias              = 60
	SQLiteParserRULE_keyword                   = 61
	SQLiteParserRULE_name                      = 62
	SQLiteParserRULE_function_name             = 63
	SQLiteParserRULE_database_name             = 64
	SQLiteParserRULE_schema_name               = 65
	SQLiteParserRULE_table_function_name       = 66
	SQLiteParserRULE_table_name                = 67
	SQLiteParserRULE_table_or_index_name       = 68
	SQLiteParserRULE_new_table_name            = 69
	SQLiteParserRULE_column_name               = 70
	SQLiteParserRULE_collation_name            = 71
	SQLiteParserRULE_foreign_table             = 72
	SQLiteParserRULE_index_name                = 73
	SQLiteParserRULE_trigger_name              = 74
	SQLiteParserRULE_view_name                 = 75
	SQLiteParserRULE_module_name               = 76
	SQLiteParserRULE_pragma_name               = 77
	SQLiteParserRULE_savepoint_name            = 78
	SQLiteParserRULE_table_alias               = 79
	SQLiteParserRULE_transaction_name          = 80
	SQLiteParserRULE_any_name                  = 81
)

// IParseContext is an interface to support dynamic dispatch.
type IParseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParseContext differentiates from other interfaces.
	IsParseContext()
}

type ParseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParseContext() *ParseContext {
	var p = new(ParseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_parse
	return p
}

func (*ParseContext) IsParseContext() {}

func NewParseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParseContext {
	var p = new(ParseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_parse

	return p
}

func (s *ParseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParseContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEOF, 0)
}

func (s *ParseContext) AllSql_stmt_list() []ISql_stmt_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_stmt_listContext)(nil)).Elem())
	var tst = make([]ISql_stmt_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_stmt_listContext)
		}
	}

	return tst
}

func (s *ParseContext) Sql_stmt_list(i int) ISql_stmt_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stmt_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_stmt_listContext)
}

func (s *ParseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterParse(s)
	}
}

func (s *ParseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitParse(s)
	}
}

func (s *ParseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitParse(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Parse() (localctx IParseContext) {
	localctx = NewParseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SQLiteParserRULE_parse)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserSCOL)|(1<<SQLiteParserK_ALTER)|(1<<SQLiteParserK_ANALYZE))) != 0) || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SQLiteParserK_ATTACH-35))|(1<<(SQLiteParserK_BEGIN-35))|(1<<(SQLiteParserK_COMMIT-35))|(1<<(SQLiteParserK_CREATE-35))|(1<<(SQLiteParserK_DELETE-35))|(1<<(SQLiteParserK_DETACH-35))|(1<<(SQLiteParserK_DROP-35))|(1<<(SQLiteParserK_END-35)))) != 0) || _la == SQLiteParserK_EXPLAIN || _la == SQLiteParserK_INSERT || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(SQLiteParserK_PRAGMA-112))|(1<<(SQLiteParserK_REINDEX-112))|(1<<(SQLiteParserK_RELEASE-112))|(1<<(SQLiteParserK_REPLACE-112))|(1<<(SQLiteParserK_ROLLBACK-112))|(1<<(SQLiteParserK_SAVEPOINT-112))|(1<<(SQLiteParserK_SELECT-112))|(1<<(SQLiteParserK_UPDATE-112))|(1<<(SQLiteParserK_VACUUM-112))|(1<<(SQLiteParserK_VALUES-112)))) != 0) || _la == SQLiteParserK_WITH {
		{
			p.SetState(164)
			p.Sql_stmt_list()
		}

		p.SetState(169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(170)
		p.Match(SQLiteParserEOF)
	}

	return localctx
}

// ISql_stmt_listContext is an interface to support dynamic dispatch.
type ISql_stmt_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_stmt_listContext differentiates from other interfaces.
	IsSql_stmt_listContext()
}

type Sql_stmt_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmt_listContext() *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list
	return p
}

func (*Sql_stmt_listContext) IsSql_stmt_listContext() {}

func NewSql_stmt_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list

	return p
}

func (s *Sql_stmt_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmt_listContext) AllSql_stmt() []ISql_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_stmtContext)(nil)).Elem())
	var tst = make([]ISql_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_stmtContext)
		}
	}

	return tst
}

func (s *Sql_stmt_listContext) Sql_stmt(i int) ISql_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_stmtContext)
}

func (s *Sql_stmt_listContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSCOL)
}

func (s *Sql_stmt_listContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSCOL, i)
}

func (s *Sql_stmt_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmt_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmt_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSql_stmt_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Sql_stmt_list() (localctx ISql_stmt_listContext) {
	localctx = NewSql_stmt_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SQLiteParserRULE_sql_stmt_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserSCOL {
		{
			p.SetState(172)
			p.Match(SQLiteParserSCOL)
		}

		p.SetState(177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(178)
		p.Sql_stmt()
	}
	p.SetState(187)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(180)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == SQLiteParserSCOL {
				{
					p.SetState(179)
					p.Match(SQLiteParserSCOL)
				}

				p.SetState(182)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(184)
				p.Sql_stmt()
			}

		}
		p.SetState(189)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}
	p.SetState(193)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(190)
				p.Match(SQLiteParserSCOL)
			}

		}
		p.SetState(195)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// ISql_stmtContext is an interface to support dynamic dispatch.
type ISql_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_stmtContext differentiates from other interfaces.
	IsSql_stmtContext()
}

type Sql_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmtContext() *Sql_stmtContext {
	var p = new(Sql_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt
	return p
}

func (*Sql_stmtContext) IsSql_stmtContext() {}

func NewSql_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmtContext {
	var p = new(Sql_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt

	return p
}

func (s *Sql_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmtContext) Alter_table_stmt() IAlter_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_table_stmtContext)
}

func (s *Sql_stmtContext) Analyze_stmt() IAnalyze_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyze_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyze_stmtContext)
}

func (s *Sql_stmtContext) Attach_stmt() IAttach_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttach_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttach_stmtContext)
}

func (s *Sql_stmtContext) Begin_stmt() IBegin_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBegin_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBegin_stmtContext)
}

func (s *Sql_stmtContext) Commit_stmt() ICommit_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommit_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommit_stmtContext)
}

func (s *Sql_stmtContext) Compound_select_stmt() ICompound_select_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompound_select_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompound_select_stmtContext)
}

func (s *Sql_stmtContext) Create_index_stmt() ICreate_index_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_index_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_index_stmtContext)
}

func (s *Sql_stmtContext) Create_table_stmt() ICreate_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_stmtContext)
}

func (s *Sql_stmtContext) Create_trigger_stmt() ICreate_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_trigger_stmtContext)
}

func (s *Sql_stmtContext) Create_view_stmt() ICreate_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_view_stmtContext)
}

func (s *Sql_stmtContext) Create_virtual_table_stmt() ICreate_virtual_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_virtual_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_virtual_table_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt() IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt_limited() IDelete_stmt_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmt_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmt_limitedContext)
}

func (s *Sql_stmtContext) Detach_stmt() IDetach_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDetach_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDetach_stmtContext)
}

func (s *Sql_stmtContext) Drop_index_stmt() IDrop_index_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_index_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_index_stmtContext)
}

func (s *Sql_stmtContext) Drop_table_stmt() IDrop_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_table_stmtContext)
}

func (s *Sql_stmtContext) Drop_trigger_stmt() IDrop_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_trigger_stmtContext)
}

func (s *Sql_stmtContext) Drop_view_stmt() IDrop_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_view_stmtContext)
}

func (s *Sql_stmtContext) Factored_select_stmt() IFactored_select_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFactored_select_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFactored_select_stmtContext)
}

func (s *Sql_stmtContext) Insert_stmt() IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Sql_stmtContext) Pragma_stmt() IPragma_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragma_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragma_stmtContext)
}

func (s *Sql_stmtContext) Reindex_stmt() IReindex_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReindex_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReindex_stmtContext)
}

func (s *Sql_stmtContext) Release_stmt() IRelease_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelease_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelease_stmtContext)
}

func (s *Sql_stmtContext) Rollback_stmt() IRollback_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollback_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollback_stmtContext)
}

func (s *Sql_stmtContext) Savepoint_stmt() ISavepoint_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_stmtContext)
}

func (s *Sql_stmtContext) Simple_select_stmt() ISimple_select_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_select_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_select_stmtContext)
}

func (s *Sql_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt() IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt_limited() IUpdate_stmt_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmt_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmt_limitedContext)
}

func (s *Sql_stmtContext) Vacuum_stmt() IVacuum_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVacuum_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVacuum_stmtContext)
}

func (s *Sql_stmtContext) K_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXPLAIN, 0)
}

func (s *Sql_stmtContext) K_QUERY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_QUERY, 0)
}

func (s *Sql_stmtContext) K_PLAN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PLAN, 0)
}

func (s *Sql_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSql_stmt(s)
	}
}

func (s *Sql_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSql_stmt(s)
	}
}

func (s *Sql_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSql_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Sql_stmt() (localctx ISql_stmtContext) {
	localctx = NewSql_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SQLiteParserRULE_sql_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(201)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_EXPLAIN {
		{
			p.SetState(196)
			p.Match(SQLiteParserK_EXPLAIN)
		}
		p.SetState(199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_QUERY {
			{
				p.SetState(197)
				p.Match(SQLiteParserK_QUERY)
			}
			{
				p.SetState(198)
				p.Match(SQLiteParserK_PLAN)
			}

		}

	}
	p.SetState(233)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(203)
			p.Alter_table_stmt()
		}

	case 2:
		{
			p.SetState(204)
			p.Analyze_stmt()
		}

	case 3:
		{
			p.SetState(205)
			p.Attach_stmt()
		}

	case 4:
		{
			p.SetState(206)
			p.Begin_stmt()
		}

	case 5:
		{
			p.SetState(207)
			p.Commit_stmt()
		}

	case 6:
		{
			p.SetState(208)
			p.Compound_select_stmt()
		}

	case 7:
		{
			p.SetState(209)
			p.Create_index_stmt()
		}

	case 8:
		{
			p.SetState(210)
			p.Create_table_stmt()
		}

	case 9:
		{
			p.SetState(211)
			p.Create_trigger_stmt()
		}

	case 10:
		{
			p.SetState(212)
			p.Create_view_stmt()
		}

	case 11:
		{
			p.SetState(213)
			p.Create_virtual_table_stmt()
		}

	case 12:
		{
			p.SetState(214)
			p.Delete_stmt()
		}

	case 13:
		{
			p.SetState(215)
			p.Delete_stmt_limited()
		}

	case 14:
		{
			p.SetState(216)
			p.Detach_stmt()
		}

	case 15:
		{
			p.SetState(217)
			p.Drop_index_stmt()
		}

	case 16:
		{
			p.SetState(218)
			p.Drop_table_stmt()
		}

	case 17:
		{
			p.SetState(219)
			p.Drop_trigger_stmt()
		}

	case 18:
		{
			p.SetState(220)
			p.Drop_view_stmt()
		}

	case 19:
		{
			p.SetState(221)
			p.Factored_select_stmt()
		}

	case 20:
		{
			p.SetState(222)
			p.Insert_stmt()
		}

	case 21:
		{
			p.SetState(223)
			p.Pragma_stmt()
		}

	case 22:
		{
			p.SetState(224)
			p.Reindex_stmt()
		}

	case 23:
		{
			p.SetState(225)
			p.Release_stmt()
		}

	case 24:
		{
			p.SetState(226)
			p.Rollback_stmt()
		}

	case 25:
		{
			p.SetState(227)
			p.Savepoint_stmt()
		}

	case 26:
		{
			p.SetState(228)
			p.Simple_select_stmt()
		}

	case 27:
		{
			p.SetState(229)
			p.Select_stmt()
		}

	case 28:
		{
			p.SetState(230)
			p.Update_stmt()
		}

	case 29:
		{
			p.SetState(231)
			p.Update_stmt_limited()
		}

	case 30:
		{
			p.SetState(232)
			p.Vacuum_stmt()
		}

	}

	return localctx
}

// IAlter_table_stmtContext is an interface to support dynamic dispatch.
type IAlter_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_stmtContext differentiates from other interfaces.
	IsAlter_table_stmtContext()
}

type Alter_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_stmtContext() *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt
	return p
}

func (*Alter_table_stmtContext) IsAlter_table_stmtContext() {}

func NewAlter_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt

	return p
}

func (s *Alter_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_stmtContext) K_ALTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALTER, 0)
}

func (s *Alter_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Alter_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_table_stmtContext) K_RENAME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RENAME, 0)
}

func (s *Alter_table_stmtContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TO, 0)
}

func (s *Alter_table_stmtContext) New_table_name() INew_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INew_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INew_table_nameContext)
}

func (s *Alter_table_stmtContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ADD, 0)
}

func (s *Alter_table_stmtContext) Column_def() IColumn_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Alter_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Alter_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Alter_table_stmtContext) K_COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLUMN, 0)
}

func (s *Alter_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitAlter_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Alter_table_stmt() (localctx IAlter_table_stmtContext) {
	localctx = NewAlter_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SQLiteParserRULE_alter_table_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(235)
		p.Match(SQLiteParserK_ALTER)
	}
	{
		p.SetState(236)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(240)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(237)
			p.Database_name()
		}
		{
			p.SetState(238)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(242)
		p.Table_name()
	}
	p.SetState(251)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_RENAME:
		{
			p.SetState(243)
			p.Match(SQLiteParserK_RENAME)
		}
		{
			p.SetState(244)
			p.Match(SQLiteParserK_TO)
		}
		{
			p.SetState(245)
			p.New_table_name()
		}

	case SQLiteParserK_ADD:
		{
			p.SetState(246)
			p.Match(SQLiteParserK_ADD)
		}
		p.SetState(248)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(247)
				p.Match(SQLiteParserK_COLUMN)
			}

		}
		{
			p.SetState(250)
			p.Column_def()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAnalyze_stmtContext is an interface to support dynamic dispatch.
type IAnalyze_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyze_stmtContext differentiates from other interfaces.
	IsAnalyze_stmtContext()
}

type Analyze_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_stmtContext() *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_analyze_stmt
	return p
}

func (*Analyze_stmtContext) IsAnalyze_stmtContext() {}

func NewAnalyze_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_analyze_stmt

	return p
}

func (s *Analyze_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_stmtContext) K_ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ANALYZE, 0)
}

func (s *Analyze_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Analyze_stmtContext) Table_or_index_name() ITable_or_index_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_index_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_or_index_nameContext)
}

func (s *Analyze_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Analyze_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analyze_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitAnalyze_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Analyze_stmt() (localctx IAnalyze_stmtContext) {
	localctx = NewAnalyze_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SQLiteParserRULE_analyze_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(253)
		p.Match(SQLiteParserK_ANALYZE)
	}
	p.SetState(260)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(254)
			p.Database_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(255)
			p.Table_or_index_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(256)
			p.Database_name()
		}
		{
			p.SetState(257)
			p.Match(SQLiteParserDOT)
		}
		{
			p.SetState(258)
			p.Table_or_index_name()
		}

	}

	return localctx
}

// IAttach_stmtContext is an interface to support dynamic dispatch.
type IAttach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttach_stmtContext differentiates from other interfaces.
	IsAttach_stmtContext()
}

type Attach_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttach_stmtContext() *Attach_stmtContext {
	var p = new(Attach_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_attach_stmt
	return p
}

func (*Attach_stmtContext) IsAttach_stmtContext() {}

func NewAttach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attach_stmtContext {
	var p = new(Attach_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_attach_stmt

	return p
}

func (s *Attach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Attach_stmtContext) K_ATTACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ATTACH, 0)
}

func (s *Attach_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Attach_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Attach_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Attach_stmtContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DATABASE, 0)
}

func (s *Attach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitAttach_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Attach_stmt() (localctx IAttach_stmtContext) {
	localctx = NewAttach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SQLiteParserRULE_attach_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(262)
		p.Match(SQLiteParserK_ATTACH)
	}
	p.SetState(264)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(263)
			p.Match(SQLiteParserK_DATABASE)
		}

	}
	{
		p.SetState(266)
		p.expr(0)
	}
	{
		p.SetState(267)
		p.Match(SQLiteParserK_AS)
	}
	{
		p.SetState(268)
		p.Database_name()
	}

	return localctx
}

// IBegin_stmtContext is an interface to support dynamic dispatch.
type IBegin_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBegin_stmtContext differentiates from other interfaces.
	IsBegin_stmtContext()
}

type Begin_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_stmtContext() *Begin_stmtContext {
	var p = new(Begin_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_begin_stmt
	return p
}

func (*Begin_stmtContext) IsBegin_stmtContext() {}

func NewBegin_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_stmtContext {
	var p = new(Begin_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_begin_stmt

	return p
}

func (s *Begin_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_stmtContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEGIN, 0)
}

func (s *Begin_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *Begin_stmtContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRED, 0)
}

func (s *Begin_stmtContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IMMEDIATE, 0)
}

func (s *Begin_stmtContext) K_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCLUSIVE, 0)
}

func (s *Begin_stmtContext) Transaction_name() ITransaction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Begin_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitBegin_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Begin_stmt() (localctx IBegin_stmtContext) {
	localctx = NewBegin_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SQLiteParserRULE_begin_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(270)
		p.Match(SQLiteParserK_BEGIN)
	}
	p.SetState(272)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(SQLiteParserK_DEFERRED-58))|(1<<(SQLiteParserK_EXCLUSIVE-58))|(1<<(SQLiteParserK_IMMEDIATE-58)))) != 0 {
		{
			p.SetState(271)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(SQLiteParserK_DEFERRED-58))|(1<<(SQLiteParserK_EXCLUSIVE-58))|(1<<(SQLiteParserK_IMMEDIATE-58)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(278)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TRANSACTION {
		{
			p.SetState(274)
			p.Match(SQLiteParserK_TRANSACTION)
		}
		p.SetState(276)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(275)
				p.Transaction_name()
			}

		}

	}

	return localctx
}

// ICommit_stmtContext is an interface to support dynamic dispatch.
type ICommit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommit_stmtContext differentiates from other interfaces.
	IsCommit_stmtContext()
}

type Commit_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_stmtContext() *Commit_stmtContext {
	var p = new(Commit_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_commit_stmt
	return p
}

func (*Commit_stmtContext) IsCommit_stmtContext() {}

func NewCommit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_stmtContext {
	var p = new(Commit_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_commit_stmt

	return p
}

func (s *Commit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_stmtContext) K_COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COMMIT, 0)
}

func (s *Commit_stmtContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *Commit_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *Commit_stmtContext) Transaction_name() ITransaction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Commit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCommit_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Commit_stmt() (localctx ICommit_stmtContext) {
	localctx = NewCommit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SQLiteParserRULE_commit_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(280)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_COMMIT || _la == SQLiteParserK_END) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TRANSACTION {
		{
			p.SetState(281)
			p.Match(SQLiteParserK_TRANSACTION)
		}
		p.SetState(283)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(282)
				p.Transaction_name()
			}

		}

	}

	return localctx
}

// ICompound_select_stmtContext is an interface to support dynamic dispatch.
type ICompound_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_select_stmtContext differentiates from other interfaces.
	IsCompound_select_stmtContext()
}

type Compound_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_select_stmtContext() *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_select_stmt
	return p
}

func (*Compound_select_stmtContext) IsCompound_select_stmtContext() {}

func NewCompound_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_select_stmt

	return p
}

func (s *Compound_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_select_stmtContext) AllSelect_core() []ISelect_coreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem())
	var tst = make([]ISelect_coreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_coreContext)
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Compound_select_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Compound_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Compound_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Compound_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Compound_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Compound_select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Compound_select_stmtContext) AllK_UNION() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_UNION)
}

func (s *Compound_select_stmtContext) K_UNION(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNION, i)
}

func (s *Compound_select_stmtContext) AllK_INTERSECT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_INTERSECT)
}

func (s *Compound_select_stmtContext) K_INTERSECT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTERSECT, i)
}

func (s *Compound_select_stmtContext) AllK_EXCEPT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_EXCEPT)
}

func (s *Compound_select_stmtContext) K_EXCEPT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCEPT, i)
}

func (s *Compound_select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Compound_select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Compound_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Compound_select_stmtContext) AllK_ALL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_ALL)
}

func (s *Compound_select_stmtContext) K_ALL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, i)
}

func (s *Compound_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCompound_select_stmt(s)
	}
}

func (s *Compound_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCompound_select_stmt(s)
	}
}

func (s *Compound_select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCompound_select_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Compound_select_stmt() (localctx ICompound_select_stmtContext) {
	localctx = NewCompound_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SQLiteParserRULE_compound_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(287)
			p.With_clause()
		}

	}
	{
		p.SetState(290)
		p.Select_core()
	}
	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SQLiteParserK_EXCEPT || _la == SQLiteParserK_INTERSECT || _la == SQLiteParserK_UNION {
		p.SetState(297)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_UNION:
			{
				p.SetState(291)
				p.Match(SQLiteParserK_UNION)
			}
			p.SetState(293)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_ALL {
				{
					p.SetState(292)
					p.Match(SQLiteParserK_ALL)
				}

			}

		case SQLiteParserK_INTERSECT:
			{
				p.SetState(295)
				p.Match(SQLiteParserK_INTERSECT)
			}

		case SQLiteParserK_EXCEPT:
			{
				p.SetState(296)
				p.Match(SQLiteParserK_EXCEPT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(299)
			p.Select_core()
		}

		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(304)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(305)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(306)
			p.Ordering_term()
		}
		p.SetState(311)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(307)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(308)
				p.Ordering_term()
			}

			p.SetState(313)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(316)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(317)
			p.expr(0)
		}
		p.SetState(320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			{
				p.SetState(318)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(319)
				p.expr(0)
			}

		}

	}

	return localctx
}

// ICreate_index_stmtContext is an interface to support dynamic dispatch.
type ICreate_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_index_stmtContext differentiates from other interfaces.
	IsCreate_index_stmtContext()
}

type Create_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_index_stmtContext() *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_index_stmt
	return p
}

func (*Create_index_stmtContext) IsCreate_index_stmtContext() {}

func NewCreate_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_index_stmt

	return p
}

func (s *Create_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_index_stmtContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEX, 0)
}

func (s *Create_index_stmtContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Create_index_stmtContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Create_index_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_index_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_index_stmtContext) AllIndexed_column() []IIndexed_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem())
	var tst = make([]IIndexed_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexed_columnContext)
		}
	}

	return tst
}

func (s *Create_index_stmtContext) Indexed_column(i int) IIndexed_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Create_index_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_index_stmtContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *Create_index_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_index_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_index_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_index_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_index_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_index_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_index_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_index_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Create_index_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCreate_index_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_index_stmt() (localctx ICreate_index_stmtContext) {
	localctx = NewCreate_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SQLiteParserRULE_create_index_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(324)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_UNIQUE {
		{
			p.SetState(325)
			p.Match(SQLiteParserK_UNIQUE)
		}

	}
	{
		p.SetState(328)
		p.Match(SQLiteParserK_INDEX)
	}
	p.SetState(332)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(329)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(330)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(331)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(337)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(334)
			p.Database_name()
		}
		{
			p.SetState(335)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(339)
		p.Index_name()
	}
	{
		p.SetState(340)
		p.Match(SQLiteParserK_ON)
	}
	{
		p.SetState(341)
		p.Table_name()
	}
	{
		p.SetState(342)
		p.Match(SQLiteParserOPEN_PAR)
	}
	{
		p.SetState(343)
		p.Indexed_column()
	}
	p.SetState(348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(344)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(345)
			p.Indexed_column()
		}

		p.SetState(350)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(351)
		p.Match(SQLiteParserCLOSE_PAR)
	}
	p.SetState(354)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(352)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(353)
			p.expr(0)
		}

	}

	return localctx
}

// ICreate_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_table_stmtContext differentiates from other interfaces.
	IsCreate_table_stmtContext()
}

type Create_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_table_stmtContext() *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_table_stmt
	return p
}

func (*Create_table_stmtContext) IsCreate_table_stmtContext() {}

func NewCreate_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_table_stmt

	return p
}

func (s *Create_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Create_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_table_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_table_stmtContext) AllColumn_def() []IColumn_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_defContext)(nil)).Elem())
	var tst = make([]IColumn_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_defContext)
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Column_def(i int) IColumn_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Create_table_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_table_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Create_table_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_table_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_table_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *Create_table_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *Create_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_table_stmtContext) AllTable_constraint() []ITable_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem())
	var tst = make([]ITable_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_constraintContext)
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Table_constraint(i int) ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Create_table_stmtContext) K_WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITHOUT, 0)
}

func (s *Create_table_stmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Create_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCreate_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_table_stmt() (localctx ICreate_table_stmtContext) {
	localctx = NewCreate_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SQLiteParserRULE_create_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(356)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY {
		{
			p.SetState(357)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(360)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(364)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(361)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(362)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(363)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(369)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(366)
			p.Database_name()
		}
		{
			p.SetState(367)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(371)
		p.Table_name()
	}
	p.SetState(395)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR:
		{
			p.SetState(372)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(373)
			p.Column_def()
		}
		p.SetState(378)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())

		for _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1+1 {
				{
					p.SetState(374)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(375)
					p.Column_def()
				}

			}
			p.SetState(380)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())
		}
		p.SetState(385)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(381)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(382)
				p.Table_constraint()
			}

			p.SetState(387)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(388)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_WITHOUT {
			{
				p.SetState(389)
				p.Match(SQLiteParserK_WITHOUT)
			}
			{
				p.SetState(390)
				p.Match(SQLiteParserIDENTIFIER)
			}

		}

	case SQLiteParserK_AS:
		{
			p.SetState(393)
			p.Match(SQLiteParserK_AS)
		}
		{
			p.SetState(394)
			p.Select_stmt()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_trigger_stmtContext is an interface to support dynamic dispatch.
type ICreate_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_trigger_stmtContext differentiates from other interfaces.
	IsCreate_trigger_stmtContext()
}

type Create_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_trigger_stmtContext() *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt
	return p
}

func (*Create_trigger_stmtContext) IsCreate_trigger_stmtContext() {}

func NewCreate_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt

	return p
}

func (s *Create_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_trigger_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_trigger_stmtContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRIGGER, 0)
}

func (s *Create_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrigger_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Create_trigger_stmtContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Create_trigger_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_trigger_stmtContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEGIN, 0)
}

func (s *Create_trigger_stmtContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *Create_trigger_stmtContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *Create_trigger_stmtContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSERT, 0)
}

func (s *Create_trigger_stmtContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *Create_trigger_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_trigger_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_trigger_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_trigger_stmtContext) AllDatabase_name() []IDatabase_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem())
	var tst = make([]IDatabase_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_nameContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Database_name(i int) IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_trigger_stmtContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDOT)
}

func (s *Create_trigger_stmtContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, i)
}

func (s *Create_trigger_stmtContext) K_BEFORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEFORE, 0)
}

func (s *Create_trigger_stmtContext) K_AFTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AFTER, 0)
}

func (s *Create_trigger_stmtContext) K_INSTEAD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSTEAD, 0)
}

func (s *Create_trigger_stmtContext) AllK_OF() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_OF)
}

func (s *Create_trigger_stmtContext) K_OF(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OF, i)
}

func (s *Create_trigger_stmtContext) K_FOR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOR, 0)
}

func (s *Create_trigger_stmtContext) K_EACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EACH, 0)
}

func (s *Create_trigger_stmtContext) K_ROW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROW, 0)
}

func (s *Create_trigger_stmtContext) K_WHEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHEN, 0)
}

func (s *Create_trigger_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_trigger_stmtContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSCOL)
}

func (s *Create_trigger_stmtContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSCOL, i)
}

func (s *Create_trigger_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *Create_trigger_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *Create_trigger_stmtContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Create_trigger_stmtContext) AllUpdate_stmt() []IUpdate_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem())
	var tst = make([]IUpdate_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Update_stmt(i int) IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Create_trigger_stmtContext) AllInsert_stmt() []IInsert_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem())
	var tst = make([]IInsert_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInsert_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Insert_stmt(i int) IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Create_trigger_stmtContext) AllDelete_stmt() []IDelete_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem())
	var tst = make([]IDelete_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDelete_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Delete_stmt(i int) IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Create_trigger_stmtContext) AllSelect_stmt() []ISelect_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem())
	var tst = make([]ISelect_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Select_stmt(i int) ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_trigger_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_trigger_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCreate_trigger_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_trigger_stmt() (localctx ICreate_trigger_stmtContext) {
	localctx = NewCreate_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SQLiteParserRULE_create_trigger_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(397)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(399)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY {
		{
			p.SetState(398)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(401)
		p.Match(SQLiteParserK_TRIGGER)
	}
	p.SetState(405)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(402)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(403)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(404)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(410)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(407)
			p.Database_name()
		}
		{
			p.SetState(408)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(412)
		p.Trigger_name()
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_BEFORE:
		{
			p.SetState(413)
			p.Match(SQLiteParserK_BEFORE)
		}

	case SQLiteParserK_AFTER:
		{
			p.SetState(414)
			p.Match(SQLiteParserK_AFTER)
		}

	case SQLiteParserK_INSTEAD:
		{
			p.SetState(415)
			p.Match(SQLiteParserK_INSTEAD)
		}
		{
			p.SetState(416)
			p.Match(SQLiteParserK_OF)
		}

	case SQLiteParserK_DELETE, SQLiteParserK_INSERT, SQLiteParserK_UPDATE:

	default:
	}
	p.SetState(433)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_DELETE:
		{
			p.SetState(419)
			p.Match(SQLiteParserK_DELETE)
		}

	case SQLiteParserK_INSERT:
		{
			p.SetState(420)
			p.Match(SQLiteParserK_INSERT)
		}

	case SQLiteParserK_UPDATE:
		{
			p.SetState(421)
			p.Match(SQLiteParserK_UPDATE)
		}
		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_OF {
			{
				p.SetState(422)
				p.Match(SQLiteParserK_OF)
			}
			{
				p.SetState(423)
				p.Column_name()
			}
			p.SetState(428)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(424)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(425)
					p.Column_name()
				}

				p.SetState(430)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(435)
		p.Match(SQLiteParserK_ON)
	}
	p.SetState(439)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(436)
			p.Database_name()
		}
		{
			p.SetState(437)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(441)
		p.Table_name()
	}
	p.SetState(445)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_FOR {
		{
			p.SetState(442)
			p.Match(SQLiteParserK_FOR)
		}
		{
			p.SetState(443)
			p.Match(SQLiteParserK_EACH)
		}
		{
			p.SetState(444)
			p.Match(SQLiteParserK_ROW)
		}

	}
	p.SetState(449)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHEN {
		{
			p.SetState(447)
			p.Match(SQLiteParserK_WHEN)
		}
		{
			p.SetState(448)
			p.expr(0)
		}

	}
	{
		p.SetState(451)
		p.Match(SQLiteParserK_BEGIN)
	}
	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SQLiteParserK_DELETE || _la == SQLiteParserK_INSERT || (((_la-122)&-(0x1f+1)) == 0 && ((1<<uint((_la-122)))&((1<<(SQLiteParserK_REPLACE-122))|(1<<(SQLiteParserK_SELECT-122))|(1<<(SQLiteParserK_UPDATE-122))|(1<<(SQLiteParserK_VALUES-122))|(1<<(SQLiteParserK_WITH-122)))) != 0) {
		p.SetState(456)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(452)
				p.Update_stmt()
			}

		case 2:
			{
				p.SetState(453)
				p.Insert_stmt()
			}

		case 3:
			{
				p.SetState(454)
				p.Delete_stmt()
			}

		case 4:
			{
				p.SetState(455)
				p.Select_stmt()
			}

		}
		{
			p.SetState(458)
			p.Match(SQLiteParserSCOL)
		}

		p.SetState(462)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(464)
		p.Match(SQLiteParserK_END)
	}

	return localctx
}

// ICreate_view_stmtContext is an interface to support dynamic dispatch.
type ICreate_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_view_stmtContext differentiates from other interfaces.
	IsCreate_view_stmtContext()
}

type Create_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_view_stmtContext() *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_view_stmt
	return p
}

func (*Create_view_stmtContext) IsCreate_view_stmtContext() {}

func NewCreate_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_view_stmt

	return p
}

func (s *Create_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_view_stmtContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIEW, 0)
}

func (s *Create_view_stmtContext) View_name() IView_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Create_view_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Create_view_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_view_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_view_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_view_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_view_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_view_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_view_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *Create_view_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *Create_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCreate_view_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_view_stmt() (localctx ICreate_view_stmtContext) {
	localctx = NewCreate_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SQLiteParserRULE_create_view_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(466)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY {
		{
			p.SetState(467)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(470)
		p.Match(SQLiteParserK_VIEW)
	}
	p.SetState(474)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(471)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(472)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(473)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(479)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(476)
			p.Database_name()
		}
		{
			p.SetState(477)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(481)
		p.View_name()
	}
	{
		p.SetState(482)
		p.Match(SQLiteParserK_AS)
	}
	{
		p.SetState(483)
		p.Select_stmt()
	}

	return localctx
}

// ICreate_virtual_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_virtual_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_virtual_table_stmtContext differentiates from other interfaces.
	IsCreate_virtual_table_stmtContext()
}

type Create_virtual_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_virtual_table_stmtContext() *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt
	return p
}

func (*Create_virtual_table_stmtContext) IsCreate_virtual_table_stmtContext() {}

func NewCreate_virtual_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt

	return p
}

func (s *Create_virtual_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_virtual_table_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_virtual_table_stmtContext) K_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIRTUAL, 0)
}

func (s *Create_virtual_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Create_virtual_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_virtual_table_stmtContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_USING, 0)
}

func (s *Create_virtual_table_stmtContext) Module_name() IModule_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_nameContext)
}

func (s *Create_virtual_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_virtual_table_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_virtual_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_virtual_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_virtual_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_virtual_table_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllModule_argument() []IModule_argumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModule_argumentContext)(nil)).Elem())
	var tst = make([]IModule_argumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModule_argumentContext)
		}
	}

	return tst
}

func (s *Create_virtual_table_stmtContext) Module_argument(i int) IModule_argumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_argumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModule_argumentContext)
}

func (s *Create_virtual_table_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_virtual_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_virtual_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_virtual_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_virtual_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCreate_virtual_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_virtual_table_stmt() (localctx ICreate_virtual_table_stmtContext) {
	localctx = NewCreate_virtual_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SQLiteParserRULE_create_virtual_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(485)
		p.Match(SQLiteParserK_CREATE)
	}
	{
		p.SetState(486)
		p.Match(SQLiteParserK_VIRTUAL)
	}
	{
		p.SetState(487)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(491)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(488)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(489)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(490)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(496)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(493)
			p.Database_name()
		}
		{
			p.SetState(494)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(498)
		p.Table_name()
	}
	{
		p.SetState(499)
		p.Match(SQLiteParserK_USING)
	}
	{
		p.SetState(500)
		p.Module_name()
	}
	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(501)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(502)
			p.Module_argument()
		}
		p.SetState(507)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(503)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(504)
				p.Module_argument()
			}

			p.SetState(509)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(510)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}

	return localctx
}

// IDelete_stmtContext is an interface to support dynamic dispatch.
type IDelete_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_stmtContext differentiates from other interfaces.
	IsDelete_stmtContext()
}

type Delete_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmtContext() *Delete_stmtContext {
	var p = new(Delete_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt
	return p
}

func (*Delete_stmtContext) IsDelete_stmtContext() {}

func NewDelete_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmtContext {
	var p = new(Delete_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_delete_stmt

	return p
}

func (s *Delete_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmtContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *Delete_stmtContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Delete_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Delete_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDelete_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Delete_stmt() (localctx IDelete_stmtContext) {
	localctx = NewDelete_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SQLiteParserRULE_delete_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(514)
			p.With_clause()
		}

	}
	{
		p.SetState(517)
		p.Match(SQLiteParserK_DELETE)
	}
	{
		p.SetState(518)
		p.Match(SQLiteParserK_FROM)
	}
	{
		p.SetState(519)
		p.Qualified_table_name()
	}
	p.SetState(522)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(520)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(521)
			p.expr(0)
		}

	}

	return localctx
}

// IDelete_stmt_limitedContext is an interface to support dynamic dispatch.
type IDelete_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_stmt_limitedContext differentiates from other interfaces.
	IsDelete_stmt_limitedContext()
}

type Delete_stmt_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmt_limitedContext() *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt_limited
	return p
}

func (*Delete_stmt_limitedContext) IsDelete_stmt_limitedContext() {}

func NewDelete_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_delete_stmt_limited

	return p
}

func (s *Delete_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmt_limitedContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *Delete_stmt_limitedContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Delete_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmt_limitedContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Delete_stmt_limitedContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Delete_stmt_limitedContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmt_limitedContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Delete_stmt_limitedContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Delete_stmt_limitedContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Delete_stmt_limitedContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Delete_stmt_limitedContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Delete_stmt_limitedContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Delete_stmt_limitedContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Delete_stmt_limitedContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Delete_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDelete_stmt_limited(s)
	}
}

func (s *Delete_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDelete_stmt_limited(s)
	}
}

func (s *Delete_stmt_limitedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDelete_stmt_limited(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Delete_stmt_limited() (localctx IDelete_stmt_limitedContext) {
	localctx = NewDelete_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SQLiteParserRULE_delete_stmt_limited)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(525)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(524)
			p.With_clause()
		}

	}
	{
		p.SetState(527)
		p.Match(SQLiteParserK_DELETE)
	}
	{
		p.SetState(528)
		p.Match(SQLiteParserK_FROM)
	}
	{
		p.SetState(529)
		p.Qualified_table_name()
	}
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(530)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(531)
			p.expr(0)
		}

	}
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT || _la == SQLiteParserK_ORDER {
		p.SetState(544)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ORDER {
			{
				p.SetState(534)
				p.Match(SQLiteParserK_ORDER)
			}
			{
				p.SetState(535)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(536)
				p.Ordering_term()
			}
			p.SetState(541)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(537)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(538)
					p.Ordering_term()
				}

				p.SetState(543)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(546)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(547)
			p.expr(0)
		}
		p.SetState(550)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			{
				p.SetState(548)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(549)
				p.expr(0)
			}

		}

	}

	return localctx
}

// IDetach_stmtContext is an interface to support dynamic dispatch.
type IDetach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDetach_stmtContext differentiates from other interfaces.
	IsDetach_stmtContext()
}

type Detach_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDetach_stmtContext() *Detach_stmtContext {
	var p = new(Detach_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_detach_stmt
	return p
}

func (*Detach_stmtContext) IsDetach_stmtContext() {}

func NewDetach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Detach_stmtContext {
	var p = new(Detach_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_detach_stmt

	return p
}

func (s *Detach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Detach_stmtContext) K_DETACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DETACH, 0)
}

func (s *Detach_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Detach_stmtContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DATABASE, 0)
}

func (s *Detach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Detach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Detach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDetach_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Detach_stmt() (localctx IDetach_stmtContext) {
	localctx = NewDetach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SQLiteParserRULE_detach_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(554)
		p.Match(SQLiteParserK_DETACH)
	}
	p.SetState(556)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(555)
			p.Match(SQLiteParserK_DATABASE)
		}

	}
	{
		p.SetState(558)
		p.Database_name()
	}

	return localctx
}

// IDrop_index_stmtContext is an interface to support dynamic dispatch.
type IDrop_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_index_stmtContext differentiates from other interfaces.
	IsDrop_index_stmtContext()
}

type Drop_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_index_stmtContext() *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_index_stmt
	return p
}

func (*Drop_index_stmtContext) IsDrop_index_stmtContext() {}

func NewDrop_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_index_stmt

	return p
}

func (s *Drop_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_index_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_index_stmtContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEX, 0)
}

func (s *Drop_index_stmtContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Drop_index_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_index_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_index_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_index_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_index_stmt(s)
	}
}

func (s *Drop_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_index_stmt(s)
	}
}

func (s *Drop_index_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDrop_index_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_index_stmt() (localctx IDrop_index_stmtContext) {
	localctx = NewDrop_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SQLiteParserRULE_drop_index_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(560)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(561)
		p.Match(SQLiteParserK_INDEX)
	}
	p.SetState(564)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(562)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(563)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(569)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(566)
			p.Database_name()
		}
		{
			p.SetState(567)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(571)
		p.Index_name()
	}

	return localctx
}

// IDrop_table_stmtContext is an interface to support dynamic dispatch.
type IDrop_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_table_stmtContext differentiates from other interfaces.
	IsDrop_table_stmtContext()
}

type Drop_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_table_stmtContext() *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_table_stmt
	return p
}

func (*Drop_table_stmtContext) IsDrop_table_stmtContext() {}

func NewDrop_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_table_stmt

	return p
}

func (s *Drop_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_table_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Drop_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_table_stmt(s)
	}
}

func (s *Drop_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_table_stmt(s)
	}
}

func (s *Drop_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDrop_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_table_stmt() (localctx IDrop_table_stmtContext) {
	localctx = NewDrop_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SQLiteParserRULE_drop_table_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(573)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(574)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(575)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(576)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(582)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(579)
			p.Database_name()
		}
		{
			p.SetState(580)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(584)
		p.Table_name()
	}

	return localctx
}

// IDrop_trigger_stmtContext is an interface to support dynamic dispatch.
type IDrop_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_trigger_stmtContext differentiates from other interfaces.
	IsDrop_trigger_stmtContext()
}

type Drop_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_trigger_stmtContext() *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_trigger_stmt
	return p
}

func (*Drop_trigger_stmtContext) IsDrop_trigger_stmtContext() {}

func NewDrop_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_trigger_stmt

	return p
}

func (s *Drop_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_trigger_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_trigger_stmtContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRIGGER, 0)
}

func (s *Drop_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrigger_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Drop_trigger_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_trigger_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_trigger_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_trigger_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_trigger_stmt(s)
	}
}

func (s *Drop_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_trigger_stmt(s)
	}
}

func (s *Drop_trigger_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDrop_trigger_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_trigger_stmt() (localctx IDrop_trigger_stmtContext) {
	localctx = NewDrop_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SQLiteParserRULE_drop_trigger_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(586)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(587)
		p.Match(SQLiteParserK_TRIGGER)
	}
	p.SetState(590)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(588)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(589)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(595)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(592)
			p.Database_name()
		}
		{
			p.SetState(593)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(597)
		p.Trigger_name()
	}

	return localctx
}

// IDrop_view_stmtContext is an interface to support dynamic dispatch.
type IDrop_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_view_stmtContext differentiates from other interfaces.
	IsDrop_view_stmtContext()
}

type Drop_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_view_stmtContext() *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_view_stmt
	return p
}

func (*Drop_view_stmtContext) IsDrop_view_stmtContext() {}

func NewDrop_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_view_stmt

	return p
}

func (s *Drop_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_view_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_view_stmtContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIEW, 0)
}

func (s *Drop_view_stmtContext) View_name() IView_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Drop_view_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_view_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_view_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_view_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_view_stmt(s)
	}
}

func (s *Drop_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_view_stmt(s)
	}
}

func (s *Drop_view_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDrop_view_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_view_stmt() (localctx IDrop_view_stmtContext) {
	localctx = NewDrop_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SQLiteParserRULE_drop_view_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(599)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(600)
		p.Match(SQLiteParserK_VIEW)
	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(601)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(602)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(608)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(605)
			p.Database_name()
		}
		{
			p.SetState(606)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(610)
		p.View_name()
	}

	return localctx
}

// IFactored_select_stmtContext is an interface to support dynamic dispatch.
type IFactored_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFactored_select_stmtContext differentiates from other interfaces.
	IsFactored_select_stmtContext()
}

type Factored_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFactored_select_stmtContext() *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_factored_select_stmt
	return p
}

func (*Factored_select_stmtContext) IsFactored_select_stmtContext() {}

func NewFactored_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_factored_select_stmt

	return p
}

func (s *Factored_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Factored_select_stmtContext) AllSelect_core() []ISelect_coreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem())
	var tst = make([]ISelect_coreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_coreContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Factored_select_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Factored_select_stmtContext) AllCompound_operator() []ICompound_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem())
	var tst = make([]ICompound_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICompound_operatorContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Compound_operator(i int) ICompound_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Factored_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Factored_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Factored_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Factored_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Factored_select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Factored_select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Factored_select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Factored_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Factored_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Factored_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Factored_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterFactored_select_stmt(s)
	}
}

func (s *Factored_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitFactored_select_stmt(s)
	}
}

func (s *Factored_select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitFactored_select_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Factored_select_stmt() (localctx IFactored_select_stmtContext) {
	localctx = NewFactored_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SQLiteParserRULE_factored_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(613)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(612)
			p.With_clause()
		}

	}
	{
		p.SetState(615)
		p.Select_core()
	}
	p.SetState(621)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserK_EXCEPT || _la == SQLiteParserK_INTERSECT || _la == SQLiteParserK_UNION {
		{
			p.SetState(616)
			p.Compound_operator()
		}
		{
			p.SetState(617)
			p.Select_core()
		}

		p.SetState(623)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(634)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(624)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(625)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(626)
			p.Ordering_term()
		}
		p.SetState(631)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(627)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(628)
				p.Ordering_term()
			}

			p.SetState(633)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(636)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(637)
			p.expr(0)
		}
		p.SetState(640)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			{
				p.SetState(638)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(639)
				p.expr(0)
			}

		}

	}

	return localctx
}

// IInsert_stmtContext is an interface to support dynamic dispatch.
type IInsert_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_stmtContext differentiates from other interfaces.
	IsInsert_stmtContext()
}

type Insert_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_stmtContext() *Insert_stmtContext {
	var p = new(Insert_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_insert_stmt
	return p
}

func (*Insert_stmtContext) IsInsert_stmtContext() {}

func NewInsert_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_stmtContext {
	var p = new(Insert_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_insert_stmt

	return p
}

func (s *Insert_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_stmtContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTO, 0)
}

func (s *Insert_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Insert_stmtContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSERT, 0)
}

func (s *Insert_stmtContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Insert_stmtContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *Insert_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Insert_stmtContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Insert_stmtContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Insert_stmtContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Insert_stmtContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *Insert_stmtContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Insert_stmtContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Insert_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Insert_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Insert_stmtContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Insert_stmtContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Insert_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Insert_stmtContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, 0)
}

func (s *Insert_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Insert_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Insert_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Insert_stmtContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Insert_stmtContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Insert_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Insert_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Insert_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitInsert_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Insert_stmt() (localctx IInsert_stmtContext) {
	localctx = NewInsert_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SQLiteParserRULE_insert_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(644)
			p.With_clause()
		}

	}
	p.SetState(664)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(647)
			p.Match(SQLiteParserK_INSERT)
		}

	case 2:
		{
			p.SetState(648)
			p.Match(SQLiteParserK_REPLACE)
		}

	case 3:
		{
			p.SetState(649)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(650)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(651)
			p.Match(SQLiteParserK_REPLACE)
		}

	case 4:
		{
			p.SetState(652)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(653)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(654)
			p.Match(SQLiteParserK_ROLLBACK)
		}

	case 5:
		{
			p.SetState(655)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(656)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(657)
			p.Match(SQLiteParserK_ABORT)
		}

	case 6:
		{
			p.SetState(658)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(659)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(660)
			p.Match(SQLiteParserK_FAIL)
		}

	case 7:
		{
			p.SetState(661)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(662)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(663)
			p.Match(SQLiteParserK_IGNORE)
		}

	}
	{
		p.SetState(666)
		p.Match(SQLiteParserK_INTO)
	}
	p.SetState(670)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(667)
			p.Database_name()
		}
		{
			p.SetState(668)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(672)
		p.Table_name()
	}
	p.SetState(684)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(673)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(674)
			p.Column_name()
		}
		p.SetState(679)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(675)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(676)
				p.Column_name()
			}

			p.SetState(681)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(682)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}
	p.SetState(717)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(686)
			p.Match(SQLiteParserK_VALUES)
		}
		{
			p.SetState(687)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(688)
			p.expr(0)
		}
		p.SetState(693)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(689)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(690)
				p.expr(0)
			}

			p.SetState(695)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(696)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(711)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(697)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(698)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(699)
				p.expr(0)
			}
			p.SetState(704)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(700)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(701)
					p.expr(0)
				}

				p.SetState(706)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(707)
				p.Match(SQLiteParserCLOSE_PAR)
			}

			p.SetState(713)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(714)
			p.Select_stmt()
		}

	case 3:
		{
			p.SetState(715)
			p.Match(SQLiteParserK_DEFAULT)
		}
		{
			p.SetState(716)
			p.Match(SQLiteParserK_VALUES)
		}

	}

	return localctx
}

// IPragma_stmtContext is an interface to support dynamic dispatch.
type IPragma_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_stmtContext differentiates from other interfaces.
	IsPragma_stmtContext()
}

type Pragma_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_stmtContext() *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_stmt
	return p
}

func (*Pragma_stmtContext) IsPragma_stmtContext() {}

func NewPragma_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_stmt

	return p
}

func (s *Pragma_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_stmtContext) K_PRAGMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRAGMA, 0)
}

func (s *Pragma_stmtContext) Pragma_name() IPragma_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragma_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragma_nameContext)
}

func (s *Pragma_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Pragma_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Pragma_stmtContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, 0)
}

func (s *Pragma_stmtContext) Pragma_value() IPragma_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragma_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragma_valueContext)
}

func (s *Pragma_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Pragma_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Pragma_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitPragma_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_stmt() (localctx IPragma_stmtContext) {
	localctx = NewPragma_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SQLiteParserRULE_pragma_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(719)
		p.Match(SQLiteParserK_PRAGMA)
	}
	p.SetState(723)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(720)
			p.Database_name()
		}
		{
			p.SetState(721)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(725)
		p.Pragma_name()
	}
	p.SetState(732)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserASSIGN:
		{
			p.SetState(726)
			p.Match(SQLiteParserASSIGN)
		}
		{
			p.SetState(727)
			p.Pragma_value()
		}

	case SQLiteParserOPEN_PAR:
		{
			p.SetState(728)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(729)
			p.Pragma_value()
		}
		{
			p.SetState(730)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXPLAIN, SQLiteParserK_INSERT, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_UPDATE, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WITH:

	default:
	}

	return localctx
}

// IReindex_stmtContext is an interface to support dynamic dispatch.
type IReindex_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReindex_stmtContext differentiates from other interfaces.
	IsReindex_stmtContext()
}

type Reindex_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReindex_stmtContext() *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_reindex_stmt
	return p
}

func (*Reindex_stmtContext) IsReindex_stmtContext() {}

func NewReindex_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_reindex_stmt

	return p
}

func (s *Reindex_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reindex_stmtContext) K_REINDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REINDEX, 0)
}

func (s *Reindex_stmtContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Reindex_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Reindex_stmtContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Reindex_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Reindex_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Reindex_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reindex_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reindex_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitReindex_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Reindex_stmt() (localctx IReindex_stmtContext) {
	localctx = NewReindex_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SQLiteParserRULE_reindex_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(734)
		p.Match(SQLiteParserK_REINDEX)
	}
	p.SetState(745)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(735)
			p.Collation_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) == 2 {
		p.SetState(739)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(736)
				p.Database_name()
			}
			{
				p.SetState(737)
				p.Match(SQLiteParserDOT)
			}

		}
		p.SetState(743)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(741)
				p.Table_name()
			}

		case 2:
			{
				p.SetState(742)
				p.Index_name()
			}

		}

	}

	return localctx
}

// IRelease_stmtContext is an interface to support dynamic dispatch.
type IRelease_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelease_stmtContext differentiates from other interfaces.
	IsRelease_stmtContext()
}

type Release_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelease_stmtContext() *Release_stmtContext {
	var p = new(Release_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_release_stmt
	return p
}

func (*Release_stmtContext) IsRelease_stmtContext() {}

func NewRelease_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_stmtContext {
	var p = new(Release_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_release_stmt

	return p
}

func (s *Release_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_stmtContext) K_RELEASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RELEASE, 0)
}

func (s *Release_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Release_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *Release_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Release_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterRelease_stmt(s)
	}
}

func (s *Release_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitRelease_stmt(s)
	}
}

func (s *Release_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitRelease_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Release_stmt() (localctx IRelease_stmtContext) {
	localctx = NewRelease_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SQLiteParserRULE_release_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(747)
		p.Match(SQLiteParserK_RELEASE)
	}
	p.SetState(749)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(748)
			p.Match(SQLiteParserK_SAVEPOINT)
		}

	}
	{
		p.SetState(751)
		p.Savepoint_name()
	}

	return localctx
}

// IRollback_stmtContext is an interface to support dynamic dispatch.
type IRollback_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollback_stmtContext differentiates from other interfaces.
	IsRollback_stmtContext()
}

type Rollback_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_stmtContext() *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_rollback_stmt
	return p
}

func (*Rollback_stmtContext) IsRollback_stmtContext() {}

func NewRollback_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_rollback_stmt

	return p
}

func (s *Rollback_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Rollback_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *Rollback_stmtContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TO, 0)
}

func (s *Rollback_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Rollback_stmtContext) Transaction_name() ITransaction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Rollback_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *Rollback_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitRollback_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Rollback_stmt() (localctx IRollback_stmtContext) {
	localctx = NewRollback_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SQLiteParserRULE_rollback_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(753)
		p.Match(SQLiteParserK_ROLLBACK)
	}
	p.SetState(758)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TRANSACTION {
		{
			p.SetState(754)
			p.Match(SQLiteParserK_TRANSACTION)
		}
		p.SetState(756)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(755)
				p.Transaction_name()
			}

		}

	}
	p.SetState(765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TO {
		{
			p.SetState(760)
			p.Match(SQLiteParserK_TO)
		}
		p.SetState(762)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(761)
				p.Match(SQLiteParserK_SAVEPOINT)
			}

		}
		{
			p.SetState(764)
			p.Savepoint_name()
		}

	}

	return localctx
}

// ISavepoint_stmtContext is an interface to support dynamic dispatch.
type ISavepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepoint_stmtContext differentiates from other interfaces.
	IsSavepoint_stmtContext()
}

type Savepoint_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_stmtContext() *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt
	return p
}

func (*Savepoint_stmtContext) IsSavepoint_stmtContext() {}

func NewSavepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt

	return p
}

func (s *Savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *Savepoint_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSavepoint_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Savepoint_stmt() (localctx ISavepoint_stmtContext) {
	localctx = NewSavepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SQLiteParserRULE_savepoint_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(767)
		p.Match(SQLiteParserK_SAVEPOINT)
	}
	{
		p.SetState(768)
		p.Savepoint_name()
	}

	return localctx
}

// ISimple_select_stmtContext is an interface to support dynamic dispatch.
type ISimple_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_select_stmtContext differentiates from other interfaces.
	IsSimple_select_stmtContext()
}

type Simple_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_select_stmtContext() *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_select_stmt
	return p
}

func (*Simple_select_stmtContext) IsSimple_select_stmtContext() {}

func NewSimple_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_simple_select_stmt

	return p
}

func (s *Simple_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_select_stmtContext) Select_core() ISelect_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Simple_select_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Simple_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Simple_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Simple_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Simple_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Simple_select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Simple_select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Simple_select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Simple_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Simple_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSimple_select_stmt(s)
	}
}

func (s *Simple_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSimple_select_stmt(s)
	}
}

func (s *Simple_select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSimple_select_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Simple_select_stmt() (localctx ISimple_select_stmtContext) {
	localctx = NewSimple_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SQLiteParserRULE_simple_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(771)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(770)
			p.With_clause()
		}

	}
	{
		p.SetState(773)
		p.Select_core()
	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(774)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(775)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(776)
			p.Ordering_term()
		}
		p.SetState(781)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(777)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(778)
				p.Ordering_term()
			}

			p.SetState(783)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(786)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(787)
			p.expr(0)
		}
		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			{
				p.SetState(788)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(789)
				p.expr(0)
			}

		}

	}

	return localctx
}

// ISelect_stmtContext is an interface to support dynamic dispatch.
type ISelect_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_stmtContext differentiates from other interfaces.
	IsSelect_stmtContext()
}

type Select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_stmtContext() *Select_stmtContext {
	var p = new(Select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_stmt
	return p
}

func (*Select_stmtContext) IsSelect_stmtContext() {}

func NewSelect_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmtContext {
	var p = new(Select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_stmt

	return p
}

func (s *Select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmtContext) AllSelect_or_values() []ISelect_or_valuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_or_valuesContext)(nil)).Elem())
	var tst = make([]ISelect_or_valuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_or_valuesContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Select_or_values(i int) ISelect_or_valuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_or_valuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_or_valuesContext)
}

func (s *Select_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Select_stmtContext) AllCompound_operator() []ICompound_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem())
	var tst = make([]ICompound_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICompound_operatorContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Compound_operator(i int) ICompound_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSelect_stmt(s)
	}
}

func (s *Select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSelect_stmt(s)
	}
}

func (s *Select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSelect_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Select_stmt() (localctx ISelect_stmtContext) {
	localctx = NewSelect_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SQLiteParserRULE_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(795)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(794)
			p.With_clause()
		}

	}
	{
		p.SetState(797)
		p.Select_or_values()
	}
	p.SetState(803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserK_EXCEPT || _la == SQLiteParserK_INTERSECT || _la == SQLiteParserK_UNION {
		{
			p.SetState(798)
			p.Compound_operator()
		}
		{
			p.SetState(799)
			p.Select_or_values()
		}

		p.SetState(805)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(816)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(806)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(807)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(808)
			p.Ordering_term()
		}
		p.SetState(813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(809)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(810)
				p.Ordering_term()
			}

			p.SetState(815)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(824)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(818)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(819)
			p.expr(0)
		}
		p.SetState(822)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			{
				p.SetState(820)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(821)
				p.expr(0)
			}

		}

	}

	return localctx
}

// ISelect_or_valuesContext is an interface to support dynamic dispatch.
type ISelect_or_valuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_or_valuesContext differentiates from other interfaces.
	IsSelect_or_valuesContext()
}

type Select_or_valuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_or_valuesContext() *Select_or_valuesContext {
	var p = new(Select_or_valuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_or_values
	return p
}

func (*Select_or_valuesContext) IsSelect_or_valuesContext() {}

func NewSelect_or_valuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_or_valuesContext {
	var p = new(Select_or_valuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_or_values

	return p
}

func (s *Select_or_valuesContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_or_valuesContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SELECT, 0)
}

func (s *Select_or_valuesContext) AllResult_column() []IResult_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IResult_columnContext)(nil)).Elem())
	var tst = make([]IResult_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IResult_columnContext)
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Result_column(i int) IResult_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResult_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_or_valuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Select_or_valuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Select_or_valuesContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Select_or_valuesContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Select_or_valuesContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_or_valuesContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GROUP, 0)
}

func (s *Select_or_valuesContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Select_or_valuesContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *Select_or_valuesContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *Select_or_valuesContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Select_or_valuesContext) Join_clause() IJoin_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Select_or_valuesContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_HAVING, 0)
}

func (s *Select_or_valuesContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *Select_or_valuesContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Select_or_valuesContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Select_or_valuesContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Select_or_valuesContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Select_or_valuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_or_valuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_or_valuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSelect_or_values(s)
	}
}

func (s *Select_or_valuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSelect_or_values(s)
	}
}

func (s *Select_or_valuesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSelect_or_values(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Select_or_values() (localctx ISelect_or_valuesContext) {
	localctx = NewSelect_or_valuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SQLiteParserRULE_select_or_values)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(900)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_SELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(826)
			p.Match(SQLiteParserK_SELECT)
		}
		p.SetState(828)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(827)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserK_ALL || _la == SQLiteParserK_DISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(830)
			p.Result_column()
		}
		p.SetState(835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(831)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(832)
				p.Result_column()
			}

			p.SetState(837)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(850)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_FROM {
			{
				p.SetState(838)
				p.Match(SQLiteParserK_FROM)
			}
			p.SetState(848)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(839)
					p.Table_or_subquery()
				}
				p.SetState(844)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == SQLiteParserCOMMA {
					{
						p.SetState(840)
						p.Match(SQLiteParserCOMMA)
					}
					{
						p.SetState(841)
						p.Table_or_subquery()
					}

					p.SetState(846)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			case 2:
				{
					p.SetState(847)
					p.Join_clause()
				}

			}

		}
		p.SetState(854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_WHERE {
			{
				p.SetState(852)
				p.Match(SQLiteParserK_WHERE)
			}
			{
				p.SetState(853)
				p.expr(0)
			}

		}
		p.SetState(870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_GROUP {
			{
				p.SetState(856)
				p.Match(SQLiteParserK_GROUP)
			}
			{
				p.SetState(857)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(858)
				p.expr(0)
			}
			p.SetState(863)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(859)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(860)
					p.expr(0)
				}

				p.SetState(865)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(868)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_HAVING {
				{
					p.SetState(866)
					p.Match(SQLiteParserK_HAVING)
				}
				{
					p.SetState(867)
					p.expr(0)
				}

			}

		}

	case SQLiteParserK_VALUES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(872)
			p.Match(SQLiteParserK_VALUES)
		}
		{
			p.SetState(873)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(874)
			p.expr(0)
		}
		p.SetState(879)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(875)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(876)
				p.expr(0)
			}

			p.SetState(881)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(882)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(883)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(884)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(885)
				p.expr(0)
			}
			p.SetState(890)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(886)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(887)
					p.expr(0)
				}

				p.SetState(892)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(893)
				p.Match(SQLiteParserCLOSE_PAR)
			}

			p.SetState(899)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUpdate_stmtContext is an interface to support dynamic dispatch.
type IUpdate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_stmtContext differentiates from other interfaces.
	IsUpdate_stmtContext()
}

type Update_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmtContext() *Update_stmtContext {
	var p = new(Update_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt
	return p
}

func (*Update_stmtContext) IsUpdate_stmtContext() {}

func NewUpdate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmtContext {
	var p = new(Update_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_stmt

	return p
}

func (s *Update_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmtContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *Update_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmtContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, 0)
}

func (s *Update_stmtContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Update_stmtContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmtContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserASSIGN)
}

func (s *Update_stmtContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, i)
}

func (s *Update_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Update_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmtContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *Update_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Update_stmtContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Update_stmtContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Update_stmtContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Update_stmtContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Update_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Update_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Update_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Update_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitUpdate_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Update_stmt() (localctx IUpdate_stmtContext) {
	localctx = NewUpdate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SQLiteParserRULE_update_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(903)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(902)
			p.With_clause()
		}

	}
	{
		p.SetState(905)
		p.Match(SQLiteParserK_UPDATE)
	}
	p.SetState(916)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(906)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(907)
			p.Match(SQLiteParserK_ROLLBACK)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(908)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(909)
			p.Match(SQLiteParserK_ABORT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(910)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(911)
			p.Match(SQLiteParserK_REPLACE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(912)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(913)
			p.Match(SQLiteParserK_FAIL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(914)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(915)
			p.Match(SQLiteParserK_IGNORE)
		}

	}
	{
		p.SetState(918)
		p.Qualified_table_name()
	}
	{
		p.SetState(919)
		p.Match(SQLiteParserK_SET)
	}
	{
		p.SetState(920)
		p.Column_name()
	}
	{
		p.SetState(921)
		p.Match(SQLiteParserASSIGN)
	}
	{
		p.SetState(922)
		p.expr(0)
	}
	p.SetState(930)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(923)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(924)
			p.Column_name()
		}
		{
			p.SetState(925)
			p.Match(SQLiteParserASSIGN)
		}
		{
			p.SetState(926)
			p.expr(0)
		}

		p.SetState(932)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(933)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(934)
			p.expr(0)
		}

	}

	return localctx
}

// IUpdate_stmt_limitedContext is an interface to support dynamic dispatch.
type IUpdate_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_stmt_limitedContext differentiates from other interfaces.
	IsUpdate_stmt_limitedContext()
}

type Update_stmt_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmt_limitedContext() *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt_limited
	return p
}

func (*Update_stmt_limitedContext) IsUpdate_stmt_limitedContext() {}

func NewUpdate_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_stmt_limited

	return p
}

func (s *Update_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmt_limitedContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *Update_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmt_limitedContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, 0)
}

func (s *Update_stmt_limitedContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmt_limitedContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserASSIGN)
}

func (s *Update_stmt_limitedContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, i)
}

func (s *Update_stmt_limitedContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmt_limitedContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *Update_stmt_limitedContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Update_stmt_limitedContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Update_stmt_limitedContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Update_stmt_limitedContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Update_stmt_limitedContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Update_stmt_limitedContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Update_stmt_limitedContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Update_stmt_limitedContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Update_stmt_limitedContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Update_stmt_limitedContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Update_stmt_limitedContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Update_stmt_limitedContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Update_stmt_limitedContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Update_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterUpdate_stmt_limited(s)
	}
}

func (s *Update_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitUpdate_stmt_limited(s)
	}
}

func (s *Update_stmt_limitedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitUpdate_stmt_limited(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Update_stmt_limited() (localctx IUpdate_stmt_limitedContext) {
	localctx = NewUpdate_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SQLiteParserRULE_update_stmt_limited)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(937)
			p.With_clause()
		}

	}
	{
		p.SetState(940)
		p.Match(SQLiteParserK_UPDATE)
	}
	p.SetState(951)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(941)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(942)
			p.Match(SQLiteParserK_ROLLBACK)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(943)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(944)
			p.Match(SQLiteParserK_ABORT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(945)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(946)
			p.Match(SQLiteParserK_REPLACE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(947)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(948)
			p.Match(SQLiteParserK_FAIL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(949)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(950)
			p.Match(SQLiteParserK_IGNORE)
		}

	}
	{
		p.SetState(953)
		p.Qualified_table_name()
	}
	{
		p.SetState(954)
		p.Match(SQLiteParserK_SET)
	}
	{
		p.SetState(955)
		p.Column_name()
	}
	{
		p.SetState(956)
		p.Match(SQLiteParserASSIGN)
	}
	{
		p.SetState(957)
		p.expr(0)
	}
	p.SetState(965)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(958)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(959)
			p.Column_name()
		}
		{
			p.SetState(960)
			p.Match(SQLiteParserASSIGN)
		}
		{
			p.SetState(961)
			p.expr(0)
		}

		p.SetState(967)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(970)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(968)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(969)
			p.expr(0)
		}

	}
	p.SetState(990)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT || _la == SQLiteParserK_ORDER {
		p.SetState(982)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ORDER {
			{
				p.SetState(972)
				p.Match(SQLiteParserK_ORDER)
			}
			{
				p.SetState(973)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(974)
				p.Ordering_term()
			}
			p.SetState(979)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(975)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(976)
					p.Ordering_term()
				}

				p.SetState(981)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(984)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(985)
			p.expr(0)
		}
		p.SetState(988)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			{
				p.SetState(986)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(987)
				p.expr(0)
			}

		}

	}

	return localctx
}

// IVacuum_stmtContext is an interface to support dynamic dispatch.
type IVacuum_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVacuum_stmtContext differentiates from other interfaces.
	IsVacuum_stmtContext()
}

type Vacuum_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_stmtContext() *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt
	return p
}

func (*Vacuum_stmtContext) IsVacuum_stmtContext() {}

func NewVacuum_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt

	return p
}

func (s *Vacuum_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_stmtContext) K_VACUUM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VACUUM, 0)
}

func (s *Vacuum_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vacuum_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitVacuum_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Vacuum_stmt() (localctx IVacuum_stmtContext) {
	localctx = NewVacuum_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SQLiteParserRULE_vacuum_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(992)
		p.Match(SQLiteParserK_VACUUM)
	}

	return localctx
}

// IColumn_defContext is an interface to support dynamic dispatch.
type IColumn_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_defContext differentiates from other interfaces.
	IsColumn_defContext()
}

type Column_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_defContext() *Column_defContext {
	var p = new(Column_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_def
	return p
}

func (*Column_defContext) IsColumn_defContext() {}

func NewColumn_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_defContext {
	var p = new(Column_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_def

	return p
}

func (s *Column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_defContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_defContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Column_defContext) AllColumn_constraint() []IColumn_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_constraintContext)
		}
	}

	return tst
}

func (s *Column_defContext) Column_constraint(i int) IColumn_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_def(s)
	}
}

func (s *Column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_def(s)
	}
}

func (s *Column_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitColumn_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_def() (localctx IColumn_defContext) {
	localctx = NewColumn_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SQLiteParserRULE_column_def)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(994)
		p.Column_name()
	}
	p.SetState(996)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(995)
			p.Type_name()
		}

	}
	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SQLiteParserK_CHECK-44))|(1<<(SQLiteParserK_COLLATE-44))|(1<<(SQLiteParserK_CONSTRAINT-44))|(1<<(SQLiteParserK_DEFAULT-44)))) != 0) || (((_la-102)&-(0x1f+1)) == 0 && ((1<<uint((_la-102)))&((1<<(SQLiteParserK_NOT-102))|(1<<(SQLiteParserK_NULL-102))|(1<<(SQLiteParserK_PRIMARY-102))|(1<<(SQLiteParserK_REFERENCES-102)))) != 0) || _la == SQLiteParserK_UNIQUE {
		{
			p.SetState(998)
			p.Column_constraint()
		}

		p.SetState(1003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_type_name
	return p
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Type_nameContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Type_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Type_nameContext) AllSigned_number() []ISigned_numberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem())
	var tst = make([]ISigned_numberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISigned_numberContext)
		}
	}

	return tst
}

func (s *Type_nameContext) Signed_number(i int) ISigned_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Type_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Type_nameContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (s *Type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitType_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SQLiteParserRULE_type_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1005)
	p.GetErrorHandler().Sync(p)
	_alt = 1 + 1
	for ok := true; ok; ok = _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1 + 1:
			{
				p.SetState(1004)
				p.Name()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1007)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}
	p.SetState(1019)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1009)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1010)
			p.Signed_number()
		}
		{
			p.SetState(1011)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1013)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1014)
			p.Signed_number()
		}
		{
			p.SetState(1015)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(1016)
			p.Signed_number()
		}
		{
			p.SetState(1017)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}

	return localctx
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_constraint
	return p
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRIMARY, 0)
}

func (s *Column_constraintContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_KEY, 0)
}

func (s *Column_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConflict_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraintContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *Column_constraintContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *Column_constraintContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CHECK, 0)
}

func (s *Column_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Column_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Column_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Column_constraintContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, 0)
}

func (s *Column_constraintContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *Column_constraintContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Column_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_key_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Column_constraintContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONSTRAINT, 0)
}

func (s *Column_constraintContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Column_constraintContext) Signed_number() ISigned_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Column_constraintContext) Literal_value() ILiteral_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteral_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *Column_constraintContext) K_AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AUTOINCREMENT, 0)
}

func (s *Column_constraintContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Column_constraintContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *Column_constraintContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (s *Column_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitColumn_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SQLiteParserRULE_column_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_CONSTRAINT {
		{
			p.SetState(1021)
			p.Match(SQLiteParserK_CONSTRAINT)
		}
		{
			p.SetState(1022)
			p.Name()
		}

	}
	p.SetState(1058)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_PRIMARY:
		{
			p.SetState(1025)
			p.Match(SQLiteParserK_PRIMARY)
		}
		{
			p.SetState(1026)
			p.Match(SQLiteParserK_KEY)
		}
		p.SetState(1028)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC {
			{
				p.SetState(1027)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1030)
			p.Conflict_clause()
		}
		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_AUTOINCREMENT {
			{
				p.SetState(1031)
				p.Match(SQLiteParserK_AUTOINCREMENT)
			}

		}

	case SQLiteParserK_NOT, SQLiteParserK_NULL:
		p.SetState(1035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_NOT {
			{
				p.SetState(1034)
				p.Match(SQLiteParserK_NOT)
			}

		}
		{
			p.SetState(1037)
			p.Match(SQLiteParserK_NULL)
		}
		{
			p.SetState(1038)
			p.Conflict_clause()
		}

	case SQLiteParserK_UNIQUE:
		{
			p.SetState(1039)
			p.Match(SQLiteParserK_UNIQUE)
		}
		{
			p.SetState(1040)
			p.Conflict_clause()
		}

	case SQLiteParserK_CHECK:
		{
			p.SetState(1041)
			p.Match(SQLiteParserK_CHECK)
		}
		{
			p.SetState(1042)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1043)
			p.expr(0)
		}
		{
			p.SetState(1044)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserK_DEFAULT:
		{
			p.SetState(1046)
			p.Match(SQLiteParserK_DEFAULT)
		}
		p.SetState(1053)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1047)
				p.Signed_number()
			}

		case 2:
			{
				p.SetState(1048)
				p.Literal_value()
			}

		case 3:
			{
				p.SetState(1049)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(1050)
				p.expr(0)
			}
			{
				p.SetState(1051)
				p.Match(SQLiteParserCLOSE_PAR)
			}

		}

	case SQLiteParserK_COLLATE:
		{
			p.SetState(1055)
			p.Match(SQLiteParserK_COLLATE)
		}
		{
			p.SetState(1056)
			p.Collation_name()
		}

	case SQLiteParserK_REFERENCES:
		{
			p.SetState(1057)
			p.Foreign_key_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConflict_clauseContext is an interface to support dynamic dispatch.
type IConflict_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConflict_clauseContext differentiates from other interfaces.
	IsConflict_clauseContext()
}

type Conflict_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflict_clauseContext() *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_conflict_clause
	return p
}

func (*Conflict_clauseContext) IsConflict_clauseContext() {}

func NewConflict_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_conflict_clause

	return p
}

func (s *Conflict_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Conflict_clauseContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Conflict_clauseContext) K_CONFLICT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONFLICT, 0)
}

func (s *Conflict_clauseContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Conflict_clauseContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Conflict_clauseContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Conflict_clauseContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Conflict_clauseContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Conflict_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conflict_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conflict_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitConflict_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Conflict_clause() (localctx IConflict_clauseContext) {
	localctx = NewConflict_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SQLiteParserRULE_conflict_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ON {
		{
			p.SetState(1060)
			p.Match(SQLiteParserK_ON)
		}
		{
			p.SetState(1061)
			p.Match(SQLiteParserK_CONFLICT)
		}
		{
			p.SetState(1062)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_ABORT || _la == SQLiteParserK_FAIL || _la == SQLiteParserK_IGNORE || _la == SQLiteParserK_REPLACE || _la == SQLiteParserK_ROLLBACK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) Literal_value() ILiteral_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteral_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *ExprContext) BIND_PARAMETER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBIND_PARAMETER, 0)
}

func (s *ExprContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *ExprContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *ExprContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDOT)
}

func (s *ExprContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, i)
}

func (s *ExprContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *ExprContext) Unary_operator() IUnary_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) Function_name() IFunction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_nameContext)
}

func (s *ExprContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *ExprContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *ExprContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *ExprContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *ExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *ExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *ExprContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CAST, 0)
}

func (s *ExprContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *ExprContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *ExprContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *ExprContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *ExprContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *ExprContext) K_CASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASE, 0)
}

func (s *ExprContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *ExprContext) AllK_WHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_WHEN)
}

func (s *ExprContext) K_WHEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHEN, i)
}

func (s *ExprContext) AllK_THEN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_THEN)
}

func (s *ExprContext) K_THEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_THEN, i)
}

func (s *ExprContext) K_ELSE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ELSE, 0)
}

func (s *ExprContext) Raise_function() IRaise_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRaise_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRaise_functionContext)
}

func (s *ExprContext) PIPE2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPIPE2, 0)
}

func (s *ExprContext) DIV() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDIV, 0)
}

func (s *ExprContext) MOD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMOD, 0)
}

func (s *ExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *ExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *ExprContext) LT2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT2, 0)
}

func (s *ExprContext) GT2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT2, 0)
}

func (s *ExprContext) AMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAMP, 0)
}

func (s *ExprContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPIPE, 0)
}

func (s *ExprContext) LT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT, 0)
}

func (s *ExprContext) LT_EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT_EQ, 0)
}

func (s *ExprContext) GT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT, 0)
}

func (s *ExprContext) GT_EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT_EQ, 0)
}

func (s *ExprContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, 0)
}

func (s *ExprContext) EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEQ, 0)
}

func (s *ExprContext) NOT_EQ1() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_EQ1, 0)
}

func (s *ExprContext) NOT_EQ2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_EQ2, 0)
}

func (s *ExprContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AND, 0)
}

func (s *ExprContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *ExprContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IS, 0)
}

func (s *ExprContext) K_BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BETWEEN, 0)
}

func (s *ExprContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IN, 0)
}

func (s *ExprContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *ExprContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *ExprContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIKE, 0)
}

func (s *ExprContext) K_GLOB() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GLOB, 0)
}

func (s *ExprContext) K_REGEXP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REGEXP, 0)
}

func (s *ExprContext) K_MATCH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_MATCH, 0)
}

func (s *ExprContext) K_ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ESCAPE, 0)
}

func (s *ExprContext) K_ISNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ISNULL, 0)
}

func (s *ExprContext) K_NOTNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOTNULL, 0)
}

func (s *ExprContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (s *ExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *SQLiteParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 76
	p.EnterRecursionRule(localctx, 76, SQLiteParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1066)
			p.Literal_value()
		}

	case 2:
		{
			p.SetState(1067)
			p.Match(SQLiteParserBIND_PARAMETER)
		}

	case 3:
		p.SetState(1076)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) == 1 {
			p.SetState(1071)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1068)
					p.Database_name()
				}
				{
					p.SetState(1069)
					p.Match(SQLiteParserDOT)
				}

			}
			{
				p.SetState(1073)
				p.Table_name()
			}
			{
				p.SetState(1074)
				p.Match(SQLiteParserDOT)
			}

		}
		{
			p.SetState(1078)
			p.Column_name()
		}

	case 4:
		{
			p.SetState(1079)
			p.Unary_operator()
		}
		{
			p.SetState(1080)
			p.expr(21)
		}

	case 5:
		{
			p.SetState(1082)
			p.Function_name()
		}
		{
			p.SetState(1083)
			p.Match(SQLiteParserOPEN_PAR)
		}
		p.SetState(1096)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserK_ABORT, SQLiteParserK_ACTION, SQLiteParserK_ADD, SQLiteParserK_AFTER, SQLiteParserK_ALL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_AND, SQLiteParserK_AS, SQLiteParserK_ASC, SQLiteParserK_ATTACH, SQLiteParserK_AUTOINCREMENT, SQLiteParserK_BEFORE, SQLiteParserK_BEGIN, SQLiteParserK_BETWEEN, SQLiteParserK_BY, SQLiteParserK_CASCADE, SQLiteParserK_CASE, SQLiteParserK_CAST, SQLiteParserK_CHECK, SQLiteParserK_COLLATE, SQLiteParserK_COLUMN, SQLiteParserK_COMMIT, SQLiteParserK_CONFLICT, SQLiteParserK_CONSTRAINT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_CURRENT_DATE, SQLiteParserK_CURRENT_TIME, SQLiteParserK_CURRENT_TIMESTAMP, SQLiteParserK_DATABASE, SQLiteParserK_DEFAULT, SQLiteParserK_DEFERRABLE, SQLiteParserK_DEFERRED, SQLiteParserK_DELETE, SQLiteParserK_DESC, SQLiteParserK_DETACH, SQLiteParserK_DISTINCT, SQLiteParserK_DROP, SQLiteParserK_EACH, SQLiteParserK_ELSE, SQLiteParserK_END, SQLiteParserK_ESCAPE, SQLiteParserK_EXCEPT, SQLiteParserK_EXCLUSIVE, SQLiteParserK_EXISTS, SQLiteParserK_EXPLAIN, SQLiteParserK_FAIL, SQLiteParserK_FOR, SQLiteParserK_FOREIGN, SQLiteParserK_FROM, SQLiteParserK_FULL, SQLiteParserK_GLOB, SQLiteParserK_GROUP, SQLiteParserK_HAVING, SQLiteParserK_IF, SQLiteParserK_IGNORE, SQLiteParserK_IMMEDIATE, SQLiteParserK_IN, SQLiteParserK_INDEX, SQLiteParserK_INDEXED, SQLiteParserK_INITIALLY, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INSTEAD, SQLiteParserK_INTERSECT, SQLiteParserK_INTO, SQLiteParserK_IS, SQLiteParserK_ISNULL, SQLiteParserK_JOIN, SQLiteParserK_KEY, SQLiteParserK_LEFT, SQLiteParserK_LIKE, SQLiteParserK_LIMIT, SQLiteParserK_MATCH, SQLiteParserK_NATURAL, SQLiteParserK_NO, SQLiteParserK_NOT, SQLiteParserK_NOTNULL, SQLiteParserK_NULL, SQLiteParserK_OF, SQLiteParserK_OFFSET, SQLiteParserK_ON, SQLiteParserK_OR, SQLiteParserK_ORDER, SQLiteParserK_OUTER, SQLiteParserK_PLAN, SQLiteParserK_PRAGMA, SQLiteParserK_PRIMARY, SQLiteParserK_QUERY, SQLiteParserK_RAISE, SQLiteParserK_RECURSIVE, SQLiteParserK_REFERENCES, SQLiteParserK_REGEXP, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_RENAME, SQLiteParserK_REPLACE, SQLiteParserK_RESTRICT, SQLiteParserK_RIGHT, SQLiteParserK_ROLLBACK, SQLiteParserK_ROW, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_SET, SQLiteParserK_TABLE, SQLiteParserK_TEMP, SQLiteParserK_TEMPORARY, SQLiteParserK_THEN, SQLiteParserK_TO, SQLiteParserK_TRANSACTION, SQLiteParserK_TRIGGER, SQLiteParserK_UNION, SQLiteParserK_UNIQUE, SQLiteParserK_UPDATE, SQLiteParserK_USING, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_VIEW, SQLiteParserK_VIRTUAL, SQLiteParserK_WHEN, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserK_WITHOUT, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserBIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
			p.SetState(1085)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1084)
					p.Match(SQLiteParserK_DISTINCT)
				}

			}
			{
				p.SetState(1087)
				p.expr(0)
			}
			p.SetState(1092)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1088)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1089)
					p.expr(0)
				}

				p.SetState(1094)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case SQLiteParserSTAR:
			{
				p.SetState(1095)
				p.Match(SQLiteParserSTAR)
			}

		case SQLiteParserCLOSE_PAR:

		default:
		}
		{
			p.SetState(1098)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 6:
		{
			p.SetState(1100)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1101)
			p.expr(0)
		}
		{
			p.SetState(1102)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 7:
		{
			p.SetState(1104)
			p.Match(SQLiteParserK_CAST)
		}
		{
			p.SetState(1105)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1106)
			p.expr(0)
		}
		{
			p.SetState(1107)
			p.Match(SQLiteParserK_AS)
		}
		{
			p.SetState(1108)
			p.Type_name()
		}
		{
			p.SetState(1109)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 8:
		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_EXISTS || _la == SQLiteParserK_NOT {
			p.SetState(1112)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_NOT {
				{
					p.SetState(1111)
					p.Match(SQLiteParserK_NOT)
				}

			}
			{
				p.SetState(1114)
				p.Match(SQLiteParserK_EXISTS)
			}

		}
		{
			p.SetState(1117)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1118)
			p.Select_stmt()
		}
		{
			p.SetState(1119)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 9:
		{
			p.SetState(1121)
			p.Match(SQLiteParserK_CASE)
		}
		p.SetState(1123)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1122)
				p.expr(0)
			}

		}
		p.SetState(1130)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SQLiteParserK_WHEN {
			{
				p.SetState(1125)
				p.Match(SQLiteParserK_WHEN)
			}
			{
				p.SetState(1126)
				p.expr(0)
			}
			{
				p.SetState(1127)
				p.Match(SQLiteParserK_THEN)
			}
			{
				p.SetState(1128)
				p.expr(0)
			}

			p.SetState(1132)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ELSE {
			{
				p.SetState(1134)
				p.Match(SQLiteParserK_ELSE)
			}
			{
				p.SetState(1135)
				p.expr(0)
			}

		}
		{
			p.SetState(1138)
			p.Match(SQLiteParserK_END)
		}

	case 10:
		{
			p.SetState(1140)
			p.Raise_function()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1230)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1228)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1143)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(1144)
					p.Match(SQLiteParserPIPE2)
				}
				{
					p.SetState(1145)
					p.expr(21)
				}

			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1146)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(1147)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserSTAR)|(1<<SQLiteParserDIV)|(1<<SQLiteParserMOD))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1148)
					p.expr(20)
				}

			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1149)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(1150)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLiteParserPLUS || _la == SQLiteParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1151)
					p.expr(19)
				}

			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1152)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(1153)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserLT2)|(1<<SQLiteParserGT2)|(1<<SQLiteParserAMP)|(1<<SQLiteParserPIPE))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1154)
					p.expr(18)
				}

			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1155)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(1156)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserLT)|(1<<SQLiteParserLT_EQ)|(1<<SQLiteParserGT)|(1<<SQLiteParserGT_EQ))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1157)
					p.expr(17)
				}

			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1158)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(1159)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserASSIGN)|(1<<SQLiteParserEQ)|(1<<SQLiteParserNOT_EQ1)|(1<<SQLiteParserNOT_EQ2))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1160)
					p.expr(16)
				}

			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1161)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1162)
					p.Match(SQLiteParserK_AND)
				}
				{
					p.SetState(1163)
					p.expr(14)
				}

			case 8:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1164)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1165)
					p.Match(SQLiteParserK_OR)
				}
				{
					p.SetState(1166)
					p.expr(13)
				}

			case 9:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1167)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1168)
					p.Match(SQLiteParserK_IS)
				}
				p.SetState(1170)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1169)
						p.Match(SQLiteParserK_NOT)
					}

				}
				{
					p.SetState(1172)
					p.expr(6)
				}

			case 10:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1173)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(1175)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserK_NOT {
					{
						p.SetState(1174)
						p.Match(SQLiteParserK_NOT)
					}

				}
				{
					p.SetState(1177)
					p.Match(SQLiteParserK_BETWEEN)
				}
				{
					p.SetState(1178)
					p.expr(0)
				}
				{
					p.SetState(1179)
					p.Match(SQLiteParserK_AND)
				}
				{
					p.SetState(1180)
					p.expr(5)
				}

			case 11:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1182)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				p.SetState(1184)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserK_NOT {
					{
						p.SetState(1183)
						p.Match(SQLiteParserK_NOT)
					}

				}
				{
					p.SetState(1186)
					p.Match(SQLiteParserK_IN)
				}
				p.SetState(1206)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1187)
						p.Match(SQLiteParserOPEN_PAR)
					}
					p.SetState(1197)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1188)
							p.Select_stmt()
						}

					} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) == 2 {
						{
							p.SetState(1189)
							p.expr(0)
						}
						p.SetState(1194)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						for _la == SQLiteParserCOMMA {
							{
								p.SetState(1190)
								p.Match(SQLiteParserCOMMA)
							}
							{
								p.SetState(1191)
								p.expr(0)
							}

							p.SetState(1196)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)
						}

					}
					{
						p.SetState(1199)
						p.Match(SQLiteParserCLOSE_PAR)
					}

				case 2:
					p.SetState(1203)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1200)
							p.Database_name()
						}
						{
							p.SetState(1201)
							p.Match(SQLiteParserDOT)
						}

					}
					{
						p.SetState(1205)
						p.Table_name()
					}

				}

			case 12:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1208)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1209)
					p.Match(SQLiteParserK_COLLATE)
				}
				{
					p.SetState(1210)
					p.Collation_name()
				}

			case 13:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1211)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				p.SetState(1213)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserK_NOT {
					{
						p.SetState(1212)
						p.Match(SQLiteParserK_NOT)
					}

				}
				{
					p.SetState(1215)
					_la = p.GetTokenStream().LA(1)

					if !((((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(SQLiteParserK_GLOB-77))|(1<<(SQLiteParserK_LIKE-77))|(1<<(SQLiteParserK_MATCH-77)))) != 0) || _la == SQLiteParserK_REGEXP) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1216)
					p.expr(0)
				}
				p.SetState(1219)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1217)
						p.Match(SQLiteParserK_ESCAPE)
					}
					{
						p.SetState(1218)
						p.expr(0)
					}

				}

			case 14:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1221)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				p.SetState(1226)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLiteParserK_ISNULL:
					{
						p.SetState(1222)
						p.Match(SQLiteParserK_ISNULL)
					}

				case SQLiteParserK_NOTNULL:
					{
						p.SetState(1223)
						p.Match(SQLiteParserK_NOTNULL)
					}

				case SQLiteParserK_NOT:
					{
						p.SetState(1224)
						p.Match(SQLiteParserK_NOT)
					}
					{
						p.SetState(1225)
						p.Match(SQLiteParserK_NULL)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}

		}
		p.SetState(1232)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext())
	}

	return localctx
}

// IForeign_key_clauseContext is an interface to support dynamic dispatch.
type IForeign_key_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_key_clauseContext differentiates from other interfaces.
	IsForeign_key_clauseContext()
}

type Foreign_key_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_clauseContext() *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause
	return p
}

func (*Foreign_key_clauseContext) IsForeign_key_clauseContext() {}

func NewForeign_key_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause

	return p
}

func (s *Foreign_key_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_clauseContext) K_REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REFERENCES, 0)
}

func (s *Foreign_key_clauseContext) Foreign_table() IForeign_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeign_tableContext)
}

func (s *Foreign_key_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Foreign_key_clauseContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Foreign_key_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Foreign_key_clauseContext) K_DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRABLE, 0)
}

func (s *Foreign_key_clauseContext) AllK_ON() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_ON)
}

func (s *Foreign_key_clauseContext) K_ON(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, i)
}

func (s *Foreign_key_clauseContext) AllK_MATCH() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_MATCH)
}

func (s *Foreign_key_clauseContext) K_MATCH(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_MATCH, i)
}

func (s *Foreign_key_clauseContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Foreign_key_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Foreign_key_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Foreign_key_clauseContext) AllK_DELETE() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_DELETE)
}

func (s *Foreign_key_clauseContext) K_DELETE(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, i)
}

func (s *Foreign_key_clauseContext) AllK_UPDATE() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_UPDATE)
}

func (s *Foreign_key_clauseContext) K_UPDATE(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, i)
}

func (s *Foreign_key_clauseContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Foreign_key_clauseContext) K_INITIALLY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INITIALLY, 0)
}

func (s *Foreign_key_clauseContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRED, 0)
}

func (s *Foreign_key_clauseContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IMMEDIATE, 0)
}

func (s *Foreign_key_clauseContext) AllK_SET() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_SET)
}

func (s *Foreign_key_clauseContext) K_SET(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, i)
}

func (s *Foreign_key_clauseContext) AllK_NULL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_NULL)
}

func (s *Foreign_key_clauseContext) K_NULL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, i)
}

func (s *Foreign_key_clauseContext) AllK_DEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_DEFAULT)
}

func (s *Foreign_key_clauseContext) K_DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, i)
}

func (s *Foreign_key_clauseContext) AllK_CASCADE() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_CASCADE)
}

func (s *Foreign_key_clauseContext) K_CASCADE(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASCADE, i)
}

func (s *Foreign_key_clauseContext) AllK_RESTRICT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_RESTRICT)
}

func (s *Foreign_key_clauseContext) K_RESTRICT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RESTRICT, i)
}

func (s *Foreign_key_clauseContext) AllK_NO() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_NO)
}

func (s *Foreign_key_clauseContext) K_NO(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NO, i)
}

func (s *Foreign_key_clauseContext) AllK_ACTION() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_ACTION)
}

func (s *Foreign_key_clauseContext) K_ACTION(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ACTION, i)
}

func (s *Foreign_key_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitForeign_key_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Foreign_key_clause() (localctx IForeign_key_clauseContext) {
	localctx = NewForeign_key_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SQLiteParserRULE_foreign_key_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1233)
		p.Match(SQLiteParserK_REFERENCES)
	}
	{
		p.SetState(1234)
		p.Foreign_table()
	}
	p.SetState(1246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1235)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1236)
			p.Column_name()
		}
		p.SetState(1241)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1237)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1238)
				p.Column_name()
			}

			p.SetState(1243)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1244)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserK_MATCH || _la == SQLiteParserK_ON {
		p.SetState(1262)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_ON:
			{
				p.SetState(1248)
				p.Match(SQLiteParserK_ON)
			}
			{
				p.SetState(1249)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserK_DELETE || _la == SQLiteParserK_UPDATE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(1258)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1250)
					p.Match(SQLiteParserK_SET)
				}
				{
					p.SetState(1251)
					p.Match(SQLiteParserK_NULL)
				}

			case 2:
				{
					p.SetState(1252)
					p.Match(SQLiteParserK_SET)
				}
				{
					p.SetState(1253)
					p.Match(SQLiteParserK_DEFAULT)
				}

			case 3:
				{
					p.SetState(1254)
					p.Match(SQLiteParserK_CASCADE)
				}

			case 4:
				{
					p.SetState(1255)
					p.Match(SQLiteParserK_RESTRICT)
				}

			case 5:
				{
					p.SetState(1256)
					p.Match(SQLiteParserK_NO)
				}
				{
					p.SetState(1257)
					p.Match(SQLiteParserK_ACTION)
				}

			}

		case SQLiteParserK_MATCH:
			{
				p.SetState(1260)
				p.Match(SQLiteParserK_MATCH)
			}
			{
				p.SetState(1261)
				p.Name()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1279)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		p.SetState(1270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_NOT {
			{
				p.SetState(1269)
				p.Match(SQLiteParserK_NOT)
			}

		}
		{
			p.SetState(1272)
			p.Match(SQLiteParserK_DEFERRABLE)
		}
		p.SetState(1277)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1273)
				p.Match(SQLiteParserK_INITIALLY)
			}
			{
				p.SetState(1274)
				p.Match(SQLiteParserK_DEFERRED)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1275)
				p.Match(SQLiteParserK_INITIALLY)
			}
			{
				p.SetState(1276)
				p.Match(SQLiteParserK_IMMEDIATE)
			}

		}

	}

	return localctx
}

// IRaise_functionContext is an interface to support dynamic dispatch.
type IRaise_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRaise_functionContext differentiates from other interfaces.
	IsRaise_functionContext()
}

type Raise_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_functionContext() *Raise_functionContext {
	var p = new(Raise_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_raise_function
	return p
}

func (*Raise_functionContext) IsRaise_functionContext() {}

func NewRaise_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_functionContext {
	var p = new(Raise_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_raise_function

	return p
}

func (s *Raise_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_functionContext) K_RAISE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RAISE, 0)
}

func (s *Raise_functionContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Raise_functionContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Raise_functionContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Raise_functionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Raise_functionContext) Error_message() IError_messageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IError_messageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IError_messageContext)
}

func (s *Raise_functionContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Raise_functionContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Raise_functionContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Raise_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raise_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterRaise_function(s)
	}
}

func (s *Raise_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitRaise_function(s)
	}
}

func (s *Raise_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitRaise_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Raise_function() (localctx IRaise_functionContext) {
	localctx = NewRaise_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SQLiteParserRULE_raise_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1281)
		p.Match(SQLiteParserK_RAISE)
	}
	{
		p.SetState(1282)
		p.Match(SQLiteParserOPEN_PAR)
	}
	p.SetState(1287)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_IGNORE:
		{
			p.SetState(1283)
			p.Match(SQLiteParserK_IGNORE)
		}

	case SQLiteParserK_ABORT, SQLiteParserK_FAIL, SQLiteParserK_ROLLBACK:
		{
			p.SetState(1284)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_ABORT || _la == SQLiteParserK_FAIL || _la == SQLiteParserK_ROLLBACK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1285)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(1286)
			p.Error_message()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1289)
		p.Match(SQLiteParserCLOSE_PAR)
	}

	return localctx
}

// IIndexed_columnContext is an interface to support dynamic dispatch.
type IIndexed_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexed_columnContext differentiates from other interfaces.
	IsIndexed_columnContext()
}

type Indexed_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexed_columnContext() *Indexed_columnContext {
	var p = new(Indexed_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_indexed_column
	return p
}

func (*Indexed_columnContext) IsIndexed_columnContext() {}

func NewIndexed_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indexed_columnContext {
	var p = new(Indexed_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_indexed_column

	return p
}

func (s *Indexed_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Indexed_columnContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Indexed_columnContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *Indexed_columnContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Indexed_columnContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *Indexed_columnContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *Indexed_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indexed_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Indexed_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterIndexed_column(s)
	}
}

func (s *Indexed_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitIndexed_column(s)
	}
}

func (s *Indexed_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitIndexed_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Indexed_column() (localctx IIndexed_columnContext) {
	localctx = NewIndexed_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SQLiteParserRULE_indexed_column)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1291)
		p.Column_name()
	}
	p.SetState(1294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_COLLATE {
		{
			p.SetState(1292)
			p.Match(SQLiteParserK_COLLATE)
		}
		{
			p.SetState(1293)
			p.Collation_name()
		}

	}
	p.SetState(1297)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC {
		{
			p.SetState(1296)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Table_constraintContext) AllIndexed_column() []IIndexed_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem())
	var tst = make([]IIndexed_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexed_columnContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Indexed_column(i int) IIndexed_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Table_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Table_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConflict_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Table_constraintContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CHECK, 0)
}

func (s *Table_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_constraintContext) K_FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOREIGN, 0)
}

func (s *Table_constraintContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_KEY, 0)
}

func (s *Table_constraintContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Table_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_key_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Table_constraintContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONSTRAINT, 0)
}

func (s *Table_constraintContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_constraintContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRIMARY, 0)
}

func (s *Table_constraintContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *Table_constraintContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Table_constraintContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (s *Table_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTable_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SQLiteParserRULE_table_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1301)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_CONSTRAINT {
		{
			p.SetState(1299)
			p.Match(SQLiteParserK_CONSTRAINT)
		}
		{
			p.SetState(1300)
			p.Name()
		}

	}
	p.SetState(1339)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_PRIMARY, SQLiteParserK_UNIQUE:
		p.SetState(1306)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_PRIMARY:
			{
				p.SetState(1303)
				p.Match(SQLiteParserK_PRIMARY)
			}
			{
				p.SetState(1304)
				p.Match(SQLiteParserK_KEY)
			}

		case SQLiteParserK_UNIQUE:
			{
				p.SetState(1305)
				p.Match(SQLiteParserK_UNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1308)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1309)
			p.Indexed_column()
		}
		p.SetState(1314)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1310)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1311)
				p.Indexed_column()
			}

			p.SetState(1316)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1317)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		{
			p.SetState(1318)
			p.Conflict_clause()
		}

	case SQLiteParserK_CHECK:
		{
			p.SetState(1320)
			p.Match(SQLiteParserK_CHECK)
		}
		{
			p.SetState(1321)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1322)
			p.expr(0)
		}
		{
			p.SetState(1323)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserK_FOREIGN:
		{
			p.SetState(1325)
			p.Match(SQLiteParserK_FOREIGN)
		}
		{
			p.SetState(1326)
			p.Match(SQLiteParserK_KEY)
		}
		{
			p.SetState(1327)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1328)
			p.Column_name()
		}
		p.SetState(1333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1329)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1330)
				p.Column_name()
			}

			p.SetState(1335)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1336)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		{
			p.SetState(1337)
			p.Foreign_key_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_clause
	return p
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *With_clauseContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *With_clauseContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *With_clauseContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *With_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *With_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitWith_clause(s)
	}
}

func (s *With_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitWith_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SQLiteParserRULE_with_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1341)
		p.Match(SQLiteParserK_WITH)
	}
	p.SetState(1343)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 185, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1342)
			p.Match(SQLiteParserK_RECURSIVE)
		}

	}
	{
		p.SetState(1345)
		p.Common_table_expression()
	}
	p.SetState(1350)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1346)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(1347)
			p.Common_table_expression()
		}

		p.SetState(1352)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IQualified_table_nameContext is an interface to support dynamic dispatch.
type IQualified_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualified_table_nameContext differentiates from other interfaces.
	IsQualified_table_nameContext()
}

type Qualified_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualified_table_nameContext() *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_qualified_table_name
	return p
}

func (*Qualified_table_nameContext) IsQualified_table_nameContext() {}

func NewQualified_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_qualified_table_name

	return p
}

func (s *Qualified_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualified_table_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Qualified_table_nameContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Qualified_table_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Qualified_table_nameContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEXED, 0)
}

func (s *Qualified_table_nameContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Qualified_table_nameContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Qualified_table_nameContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Qualified_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualified_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qualified_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitQualified_table_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Qualified_table_name() (localctx IQualified_table_nameContext) {
	localctx = NewQualified_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SQLiteParserRULE_qualified_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1356)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1353)
			p.Database_name()
		}
		{
			p.SetState(1354)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(1358)
		p.Table_name()
	}
	p.SetState(1364)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_INDEXED:
		{
			p.SetState(1359)
			p.Match(SQLiteParserK_INDEXED)
		}
		{
			p.SetState(1360)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(1361)
			p.Index_name()
		}

	case SQLiteParserK_NOT:
		{
			p.SetState(1362)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(1363)
			p.Match(SQLiteParserK_INDEXED)
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXPLAIN, SQLiteParserK_INSERT, SQLiteParserK_LIMIT, SQLiteParserK_ORDER, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_SET, SQLiteParserK_UPDATE, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WHERE, SQLiteParserK_WITH:

	default:
	}

	return localctx
}

// IOrdering_termContext is an interface to support dynamic dispatch.
type IOrdering_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrdering_termContext differentiates from other interfaces.
	IsOrdering_termContext()
}

type Ordering_termContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_termContext() *Ordering_termContext {
	var p = new(Ordering_termContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_ordering_term
	return p
}

func (*Ordering_termContext) IsOrdering_termContext() {}

func NewOrdering_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_termContext {
	var p = new(Ordering_termContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_ordering_term

	return p
}

func (s *Ordering_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_termContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Ordering_termContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *Ordering_termContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Ordering_termContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *Ordering_termContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *Ordering_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterOrdering_term(s)
	}
}

func (s *Ordering_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitOrdering_term(s)
	}
}

func (s *Ordering_termContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitOrdering_term(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Ordering_term() (localctx IOrdering_termContext) {
	localctx = NewOrdering_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SQLiteParserRULE_ordering_term)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1366)
		p.expr(0)
	}
	p.SetState(1369)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_COLLATE {
		{
			p.SetState(1367)
			p.Match(SQLiteParserK_COLLATE)
		}
		{
			p.SetState(1368)
			p.Collation_name()
		}

	}
	p.SetState(1372)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC {
		{
			p.SetState(1371)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IPragma_valueContext is an interface to support dynamic dispatch.
type IPragma_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_valueContext differentiates from other interfaces.
	IsPragma_valueContext()
}

type Pragma_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_valueContext() *Pragma_valueContext {
	var p = new(Pragma_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_value
	return p
}

func (*Pragma_valueContext) IsPragma_valueContext() {}

func NewPragma_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_valueContext {
	var p = new(Pragma_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_value

	return p
}

func (s *Pragma_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_valueContext) Signed_number() ISigned_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Pragma_valueContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Pragma_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Pragma_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterPragma_value(s)
	}
}

func (s *Pragma_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitPragma_value(s)
	}
}

func (s *Pragma_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitPragma_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_value() (localctx IPragma_valueContext) {
	localctx = NewPragma_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SQLiteParserRULE_pragma_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1377)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1374)
			p.Signed_number()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1375)
			p.Name()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1376)
			p.Match(SQLiteParserSTRING_LITERAL)
		}

	}

	return localctx
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_expression
	return p
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Common_table_expressionContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Common_table_expressionContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Common_table_expressionContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Common_table_expressionContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Common_table_expressionContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Common_table_expressionContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Common_table_expressionContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Common_table_expressionContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Common_table_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Common_table_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCommon_table_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SQLiteParserRULE_common_table_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1379)
		p.Table_name()
	}
	p.SetState(1391)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1380)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1381)
			p.Column_name()
		}
		p.SetState(1386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1382)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1383)
				p.Column_name()
			}

			p.SetState(1388)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1389)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}
	{
		p.SetState(1393)
		p.Match(SQLiteParserK_AS)
	}
	{
		p.SetState(1394)
		p.Match(SQLiteParserOPEN_PAR)
	}
	{
		p.SetState(1395)
		p.Select_stmt()
	}
	{
		p.SetState(1396)
		p.Match(SQLiteParserCLOSE_PAR)
	}

	return localctx
}

// IResult_columnContext is an interface to support dynamic dispatch.
type IResult_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResult_columnContext differentiates from other interfaces.
	IsResult_columnContext()
}

type Result_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResult_columnContext() *Result_columnContext {
	var p = new(Result_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_result_column
	return p
}

func (*Result_columnContext) IsResult_columnContext() {}

func NewResult_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Result_columnContext {
	var p = new(Result_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_result_column

	return p
}

func (s *Result_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Result_columnContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Result_columnContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Result_columnContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Result_columnContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Result_columnContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Result_columnContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Result_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Result_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterResult_column(s)
	}
}

func (s *Result_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitResult_column(s)
	}
}

func (s *Result_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitResult_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Result_column() (localctx IResult_columnContext) {
	localctx = NewResult_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SQLiteParserRULE_result_column)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1410)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1398)
			p.Match(SQLiteParserSTAR)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1399)
			p.Table_name()
		}
		{
			p.SetState(1400)
			p.Match(SQLiteParserDOT)
		}
		{
			p.SetState(1401)
			p.Match(SQLiteParserSTAR)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1403)
			p.expr(0)
		}
		p.SetState(1408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_AS || _la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL {
			p.SetState(1405)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_AS {
				{
					p.SetState(1404)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1407)
				p.Column_alias()
			}

		}

	}

	return localctx
}

// ITable_or_subqueryContext is an interface to support dynamic dispatch.
type ITable_or_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_or_subqueryContext differentiates from other interfaces.
	IsTable_or_subqueryContext()
}

type Table_or_subqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_subqueryContext() *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_subquery
	return p
}

func (*Table_or_subqueryContext) IsTable_or_subqueryContext() {}

func NewTable_or_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_subquery

	return p
}

func (s *Table_or_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_subqueryContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_or_subqueryContext) Schema_name() ISchema_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Table_or_subqueryContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Table_or_subqueryContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_or_subqueryContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEXED, 0)
}

func (s *Table_or_subqueryContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Table_or_subqueryContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Table_or_subqueryContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Table_or_subqueryContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Table_or_subqueryContext) Table_function_name() ITable_function_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_function_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_function_nameContext)
}

func (s *Table_or_subqueryContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Table_or_subqueryContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Table_or_subqueryContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Table_or_subqueryContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_or_subqueryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Table_or_subqueryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Table_or_subqueryContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Table_or_subqueryContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Table_or_subqueryContext) Join_clause() IJoin_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Table_or_subqueryContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Table_or_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTable_or_subquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_or_subquery() (localctx ITable_or_subqueryContext) {
	localctx = NewTable_or_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SQLiteParserRULE_table_or_subquery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1478)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1415)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1412)
				p.Schema_name()
			}
			{
				p.SetState(1413)
				p.Match(SQLiteParserDOT)
			}

		}
		{
			p.SetState(1417)
			p.Table_name()
		}
		p.SetState(1422)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserK_AS || _la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL {
			p.SetState(1419)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_AS {
				{
					p.SetState(1418)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1421)
				p.Table_alias()
			}

		}
		p.SetState(1429)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_INDEXED:
			{
				p.SetState(1424)
				p.Match(SQLiteParserK_INDEXED)
			}
			{
				p.SetState(1425)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(1426)
				p.Index_name()
			}

		case SQLiteParserK_NOT:
			{
				p.SetState(1427)
				p.Match(SQLiteParserK_NOT)
			}
			{
				p.SetState(1428)
				p.Match(SQLiteParserK_INDEXED)
			}

		case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserCLOSE_PAR, SQLiteParserCOMMA, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXCEPT, SQLiteParserK_EXPLAIN, SQLiteParserK_GROUP, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INTERSECT, SQLiteParserK_JOIN, SQLiteParserK_LEFT, SQLiteParserK_LIMIT, SQLiteParserK_NATURAL, SQLiteParserK_ON, SQLiteParserK_ORDER, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_UNION, SQLiteParserK_UPDATE, SQLiteParserK_USING, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WHERE, SQLiteParserK_WITH:

		default:
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1434)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1431)
				p.Schema_name()
			}
			{
				p.SetState(1432)
				p.Match(SQLiteParserDOT)
			}

		}
		{
			p.SetState(1436)
			p.Table_function_name()
		}
		{
			p.SetState(1437)
			p.Match(SQLiteParserOPEN_PAR)
		}
		p.SetState(1446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserOPEN_PAR)|(1<<SQLiteParserPLUS)|(1<<SQLiteParserMINUS)|(1<<SQLiteParserTILDE)|(1<<SQLiteParserK_ABORT)|(1<<SQLiteParserK_ACTION)|(1<<SQLiteParserK_ADD)|(1<<SQLiteParserK_AFTER)|(1<<SQLiteParserK_ALL)|(1<<SQLiteParserK_ALTER)|(1<<SQLiteParserK_ANALYZE))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLiteParserK_AND-32))|(1<<(SQLiteParserK_AS-32))|(1<<(SQLiteParserK_ASC-32))|(1<<(SQLiteParserK_ATTACH-32))|(1<<(SQLiteParserK_AUTOINCREMENT-32))|(1<<(SQLiteParserK_BEFORE-32))|(1<<(SQLiteParserK_BEGIN-32))|(1<<(SQLiteParserK_BETWEEN-32))|(1<<(SQLiteParserK_BY-32))|(1<<(SQLiteParserK_CASCADE-32))|(1<<(SQLiteParserK_CASE-32))|(1<<(SQLiteParserK_CAST-32))|(1<<(SQLiteParserK_CHECK-32))|(1<<(SQLiteParserK_COLLATE-32))|(1<<(SQLiteParserK_COLUMN-32))|(1<<(SQLiteParserK_COMMIT-32))|(1<<(SQLiteParserK_CONFLICT-32))|(1<<(SQLiteParserK_CONSTRAINT-32))|(1<<(SQLiteParserK_CREATE-32))|(1<<(SQLiteParserK_CROSS-32))|(1<<(SQLiteParserK_CURRENT_DATE-32))|(1<<(SQLiteParserK_CURRENT_TIME-32))|(1<<(SQLiteParserK_CURRENT_TIMESTAMP-32))|(1<<(SQLiteParserK_DATABASE-32))|(1<<(SQLiteParserK_DEFAULT-32))|(1<<(SQLiteParserK_DEFERRABLE-32))|(1<<(SQLiteParserK_DEFERRED-32))|(1<<(SQLiteParserK_DELETE-32))|(1<<(SQLiteParserK_DESC-32))|(1<<(SQLiteParserK_DETACH-32))|(1<<(SQLiteParserK_DISTINCT-32))|(1<<(SQLiteParserK_DROP-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SQLiteParserK_EACH-64))|(1<<(SQLiteParserK_ELSE-64))|(1<<(SQLiteParserK_END-64))|(1<<(SQLiteParserK_ESCAPE-64))|(1<<(SQLiteParserK_EXCEPT-64))|(1<<(SQLiteParserK_EXCLUSIVE-64))|(1<<(SQLiteParserK_EXISTS-64))|(1<<(SQLiteParserK_EXPLAIN-64))|(1<<(SQLiteParserK_FAIL-64))|(1<<(SQLiteParserK_FOR-64))|(1<<(SQLiteParserK_FOREIGN-64))|(1<<(SQLiteParserK_FROM-64))|(1<<(SQLiteParserK_FULL-64))|(1<<(SQLiteParserK_GLOB-64))|(1<<(SQLiteParserK_GROUP-64))|(1<<(SQLiteParserK_HAVING-64))|(1<<(SQLiteParserK_IF-64))|(1<<(SQLiteParserK_IGNORE-64))|(1<<(SQLiteParserK_IMMEDIATE-64))|(1<<(SQLiteParserK_IN-64))|(1<<(SQLiteParserK_INDEX-64))|(1<<(SQLiteParserK_INDEXED-64))|(1<<(SQLiteParserK_INITIALLY-64))|(1<<(SQLiteParserK_INNER-64))|(1<<(SQLiteParserK_INSERT-64))|(1<<(SQLiteParserK_INSTEAD-64))|(1<<(SQLiteParserK_INTERSECT-64))|(1<<(SQLiteParserK_INTO-64))|(1<<(SQLiteParserK_IS-64))|(1<<(SQLiteParserK_ISNULL-64))|(1<<(SQLiteParserK_JOIN-64))|(1<<(SQLiteParserK_KEY-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SQLiteParserK_LEFT-96))|(1<<(SQLiteParserK_LIKE-96))|(1<<(SQLiteParserK_LIMIT-96))|(1<<(SQLiteParserK_MATCH-96))|(1<<(SQLiteParserK_NATURAL-96))|(1<<(SQLiteParserK_NO-96))|(1<<(SQLiteParserK_NOT-96))|(1<<(SQLiteParserK_NOTNULL-96))|(1<<(SQLiteParserK_NULL-96))|(1<<(SQLiteParserK_OF-96))|(1<<(SQLiteParserK_OFFSET-96))|(1<<(SQLiteParserK_ON-96))|(1<<(SQLiteParserK_OR-96))|(1<<(SQLiteParserK_ORDER-96))|(1<<(SQLiteParserK_OUTER-96))|(1<<(SQLiteParserK_PLAN-96))|(1<<(SQLiteParserK_PRAGMA-96))|(1<<(SQLiteParserK_PRIMARY-96))|(1<<(SQLiteParserK_QUERY-96))|(1<<(SQLiteParserK_RAISE-96))|(1<<(SQLiteParserK_RECURSIVE-96))|(1<<(SQLiteParserK_REFERENCES-96))|(1<<(SQLiteParserK_REGEXP-96))|(1<<(SQLiteParserK_REINDEX-96))|(1<<(SQLiteParserK_RELEASE-96))|(1<<(SQLiteParserK_RENAME-96))|(1<<(SQLiteParserK_REPLACE-96))|(1<<(SQLiteParserK_RESTRICT-96))|(1<<(SQLiteParserK_RIGHT-96))|(1<<(SQLiteParserK_ROLLBACK-96))|(1<<(SQLiteParserK_ROW-96))|(1<<(SQLiteParserK_SAVEPOINT-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SQLiteParserK_SELECT-128))|(1<<(SQLiteParserK_SET-128))|(1<<(SQLiteParserK_TABLE-128))|(1<<(SQLiteParserK_TEMP-128))|(1<<(SQLiteParserK_TEMPORARY-128))|(1<<(SQLiteParserK_THEN-128))|(1<<(SQLiteParserK_TO-128))|(1<<(SQLiteParserK_TRANSACTION-128))|(1<<(SQLiteParserK_TRIGGER-128))|(1<<(SQLiteParserK_UNION-128))|(1<<(SQLiteParserK_UNIQUE-128))|(1<<(SQLiteParserK_UPDATE-128))|(1<<(SQLiteParserK_USING-128))|(1<<(SQLiteParserK_VACUUM-128))|(1<<(SQLiteParserK_VALUES-128))|(1<<(SQLiteParserK_VIEW-128))|(1<<(SQLiteParserK_VIRTUAL-128))|(1<<(SQLiteParserK_WHEN-128))|(1<<(SQLiteParserK_WHERE-128))|(1<<(SQLiteParserK_WITH-128))|(1<<(SQLiteParserK_WITHOUT-128))|(1<<(SQLiteParserIDENTIFIER-128))|(1<<(SQLiteParserNUMERIC_LITERAL-128))|(1<<(SQLiteParserBIND_PARAMETER-128))|(1<<(SQLiteParserSTRING_LITERAL-128))|(1<<(SQLiteParserBLOB_LITERAL-128)))) != 0) {
			{
				p.SetState(1438)
				p.expr(0)
			}
			p.SetState(1443)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1439)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1440)
					p.expr(0)
				}

				p.SetState(1445)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1448)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(1453)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserK_AS || _la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL {
			p.SetState(1450)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_AS {
				{
					p.SetState(1449)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1452)
				p.Table_alias()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1455)
			p.Match(SQLiteParserOPEN_PAR)
		}
		p.SetState(1465)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1456)
				p.Table_or_subquery()
			}
			p.SetState(1461)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1457)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1458)
					p.Table_or_subquery()
				}

				p.SetState(1463)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(1464)
				p.Join_clause()
			}

		}
		{
			p.SetState(1467)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1469)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1470)
			p.Select_stmt()
		}
		{
			p.SetState(1471)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(1476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserK_AS || _la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL {
			p.SetState(1473)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_AS {
				{
					p.SetState(1472)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1475)
				p.Table_alias()
			}

		}

	}

	return localctx
}

// IJoin_clauseContext is an interface to support dynamic dispatch.
type IJoin_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_clauseContext differentiates from other interfaces.
	IsJoin_clauseContext()
}

type Join_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_clauseContext() *Join_clauseContext {
	var p = new(Join_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_clause
	return p
}

func (*Join_clauseContext) IsJoin_clauseContext() {}

func NewJoin_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_clauseContext {
	var p = new(Join_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_clause

	return p
}

func (s *Join_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_clauseContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Join_clauseContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Join_clauseContext) AllJoin_operator() []IJoin_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoin_operatorContext)(nil)).Elem())
	var tst = make([]IJoin_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoin_operatorContext)
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_operator(i int) IJoin_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoin_operatorContext)
}

func (s *Join_clauseContext) AllJoin_constraint() []IJoin_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoin_constraintContext)(nil)).Elem())
	var tst = make([]IJoin_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoin_constraintContext)
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_constraint(i int) IJoin_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoin_constraintContext)
}

func (s *Join_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterJoin_clause(s)
	}
}

func (s *Join_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitJoin_clause(s)
	}
}

func (s *Join_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitJoin_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_clause() (localctx IJoin_clauseContext) {
	localctx = NewJoin_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SQLiteParserRULE_join_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1480)
		p.Table_or_subquery()
	}
	p.SetState(1487)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA || _la == SQLiteParserK_CROSS || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(SQLiteParserK_INNER-87))|(1<<(SQLiteParserK_JOIN-87))|(1<<(SQLiteParserK_LEFT-87))|(1<<(SQLiteParserK_NATURAL-87)))) != 0) {
		{
			p.SetState(1481)
			p.Join_operator()
		}
		{
			p.SetState(1482)
			p.Table_or_subquery()
		}
		{
			p.SetState(1483)
			p.Join_constraint()
		}

		p.SetState(1489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IJoin_operatorContext is an interface to support dynamic dispatch.
type IJoin_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_operatorContext differentiates from other interfaces.
	IsJoin_operatorContext()
}

type Join_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_operatorContext() *Join_operatorContext {
	var p = new(Join_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_operator
	return p
}

func (*Join_operatorContext) IsJoin_operatorContext() {}

func NewJoin_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_operatorContext {
	var p = new(Join_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_operator

	return p
}

func (s *Join_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_operatorContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Join_operatorContext) K_JOIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_JOIN, 0)
}

func (s *Join_operatorContext) K_NATURAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NATURAL, 0)
}

func (s *Join_operatorContext) K_LEFT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LEFT, 0)
}

func (s *Join_operatorContext) K_INNER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INNER, 0)
}

func (s *Join_operatorContext) K_CROSS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CROSS, 0)
}

func (s *Join_operatorContext) K_OUTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OUTER, 0)
}

func (s *Join_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterJoin_operator(s)
	}
}

func (s *Join_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitJoin_operator(s)
	}
}

func (s *Join_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitJoin_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_operator() (localctx IJoin_operatorContext) {
	localctx = NewJoin_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SQLiteParserRULE_join_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1503)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserCOMMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1490)
			p.Match(SQLiteParserCOMMA)
		}

	case SQLiteParserK_CROSS, SQLiteParserK_INNER, SQLiteParserK_JOIN, SQLiteParserK_LEFT, SQLiteParserK_NATURAL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_NATURAL {
			{
				p.SetState(1491)
				p.Match(SQLiteParserK_NATURAL)
			}

		}
		p.SetState(1500)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_LEFT:
			{
				p.SetState(1494)
				p.Match(SQLiteParserK_LEFT)
			}
			p.SetState(1496)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_OUTER {
				{
					p.SetState(1495)
					p.Match(SQLiteParserK_OUTER)
				}

			}

		case SQLiteParserK_INNER:
			{
				p.SetState(1498)
				p.Match(SQLiteParserK_INNER)
			}

		case SQLiteParserK_CROSS:
			{
				p.SetState(1499)
				p.Match(SQLiteParserK_CROSS)
			}

		case SQLiteParserK_JOIN:

		default:
		}
		{
			p.SetState(1502)
			p.Match(SQLiteParserK_JOIN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJoin_constraintContext is an interface to support dynamic dispatch.
type IJoin_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_constraintContext differentiates from other interfaces.
	IsJoin_constraintContext()
}

type Join_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_constraintContext() *Join_constraintContext {
	var p = new(Join_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_constraint
	return p
}

func (*Join_constraintContext) IsJoin_constraintContext() {}

func NewJoin_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_constraintContext {
	var p = new(Join_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_constraint

	return p
}

func (s *Join_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_constraintContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Join_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Join_constraintContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_USING, 0)
}

func (s *Join_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Join_constraintContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Join_constraintContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Join_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Join_constraintContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Join_constraintContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Join_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterJoin_constraint(s)
	}
}

func (s *Join_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitJoin_constraint(s)
	}
}

func (s *Join_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitJoin_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_constraint() (localctx IJoin_constraintContext) {
	localctx = NewJoin_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SQLiteParserRULE_join_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1519)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_ON:
		{
			p.SetState(1505)
			p.Match(SQLiteParserK_ON)
		}
		{
			p.SetState(1506)
			p.expr(0)
		}

	case SQLiteParserK_USING:
		{
			p.SetState(1507)
			p.Match(SQLiteParserK_USING)
		}
		{
			p.SetState(1508)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1509)
			p.Column_name()
		}
		p.SetState(1514)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1510)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1511)
				p.Column_name()
			}

			p.SetState(1516)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1517)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserCLOSE_PAR, SQLiteParserCOMMA, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXCEPT, SQLiteParserK_EXPLAIN, SQLiteParserK_GROUP, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INTERSECT, SQLiteParserK_JOIN, SQLiteParserK_LEFT, SQLiteParserK_LIMIT, SQLiteParserK_NATURAL, SQLiteParserK_ORDER, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_UNION, SQLiteParserK_UPDATE, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WHERE, SQLiteParserK_WITH:

	default:
	}

	return localctx
}

// ISelect_coreContext is an interface to support dynamic dispatch.
type ISelect_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_coreContext differentiates from other interfaces.
	IsSelect_coreContext()
}

type Select_coreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_coreContext() *Select_coreContext {
	var p = new(Select_coreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_core
	return p
}

func (*Select_coreContext) IsSelect_coreContext() {}

func NewSelect_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_coreContext {
	var p = new(Select_coreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_core

	return p
}

func (s *Select_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_coreContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SELECT, 0)
}

func (s *Select_coreContext) AllResult_column() []IResult_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IResult_columnContext)(nil)).Elem())
	var tst = make([]IResult_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IResult_columnContext)
		}
	}

	return tst
}

func (s *Select_coreContext) Result_column(i int) IResult_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResult_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_coreContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Select_coreContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Select_coreContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Select_coreContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Select_coreContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Select_coreContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_coreContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GROUP, 0)
}

func (s *Select_coreContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Select_coreContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *Select_coreContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *Select_coreContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Select_coreContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Select_coreContext) Join_clause() IJoin_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Select_coreContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_HAVING, 0)
}

func (s *Select_coreContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *Select_coreContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Select_coreContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Select_coreContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Select_coreContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Select_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_coreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSelect_core(s)
	}
}

func (s *Select_coreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSelect_core(s)
	}
}

func (s *Select_coreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSelect_core(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Select_core() (localctx ISelect_coreContext) {
	localctx = NewSelect_coreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SQLiteParserRULE_select_core)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1595)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_SELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1521)
			p.Match(SQLiteParserK_SELECT)
		}
		p.SetState(1523)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1522)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserK_ALL || _la == SQLiteParserK_DISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1525)
			p.Result_column()
		}
		p.SetState(1530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1526)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1527)
				p.Result_column()
			}

			p.SetState(1532)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_FROM {
			{
				p.SetState(1533)
				p.Match(SQLiteParserK_FROM)
			}
			p.SetState(1543)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1534)
					p.Table_or_subquery()
				}
				p.SetState(1539)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == SQLiteParserCOMMA {
					{
						p.SetState(1535)
						p.Match(SQLiteParserCOMMA)
					}
					{
						p.SetState(1536)
						p.Table_or_subquery()
					}

					p.SetState(1541)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			case 2:
				{
					p.SetState(1542)
					p.Join_clause()
				}

			}

		}
		p.SetState(1549)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_WHERE {
			{
				p.SetState(1547)
				p.Match(SQLiteParserK_WHERE)
			}
			{
				p.SetState(1548)
				p.expr(0)
			}

		}
		p.SetState(1565)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_GROUP {
			{
				p.SetState(1551)
				p.Match(SQLiteParserK_GROUP)
			}
			{
				p.SetState(1552)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(1553)
				p.expr(0)
			}
			p.SetState(1558)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1554)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1555)
					p.expr(0)
				}

				p.SetState(1560)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(1563)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_HAVING {
				{
					p.SetState(1561)
					p.Match(SQLiteParserK_HAVING)
				}
				{
					p.SetState(1562)
					p.expr(0)
				}

			}

		}

	case SQLiteParserK_VALUES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1567)
			p.Match(SQLiteParserK_VALUES)
		}
		{
			p.SetState(1568)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1569)
			p.expr(0)
		}
		p.SetState(1574)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1570)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1571)
				p.expr(0)
			}

			p.SetState(1576)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1577)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(1592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1578)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1579)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(1580)
				p.expr(0)
			}
			p.SetState(1585)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1581)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1582)
					p.expr(0)
				}

				p.SetState(1587)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1588)
				p.Match(SQLiteParserCLOSE_PAR)
			}

			p.SetState(1594)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICompound_operatorContext is an interface to support dynamic dispatch.
type ICompound_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_operatorContext differentiates from other interfaces.
	IsCompound_operatorContext()
}

type Compound_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_operatorContext() *Compound_operatorContext {
	var p = new(Compound_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_operator
	return p
}

func (*Compound_operatorContext) IsCompound_operatorContext() {}

func NewCompound_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_operatorContext {
	var p = new(Compound_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_operator

	return p
}

func (s *Compound_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_operatorContext) K_UNION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNION, 0)
}

func (s *Compound_operatorContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *Compound_operatorContext) K_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTERSECT, 0)
}

func (s *Compound_operatorContext) K_EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCEPT, 0)
}

func (s *Compound_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCompound_operator(s)
	}
}

func (s *Compound_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCompound_operator(s)
	}
}

func (s *Compound_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCompound_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Compound_operator() (localctx ICompound_operatorContext) {
	localctx = NewCompound_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SQLiteParserRULE_compound_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1602)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1597)
			p.Match(SQLiteParserK_UNION)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1598)
			p.Match(SQLiteParserK_UNION)
		}
		{
			p.SetState(1599)
			p.Match(SQLiteParserK_ALL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1600)
			p.Match(SQLiteParserK_INTERSECT)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1601)
			p.Match(SQLiteParserK_EXCEPT)
		}

	}

	return localctx
}

// ISigned_numberContext is an interface to support dynamic dispatch.
type ISigned_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSigned_numberContext differentiates from other interfaces.
	IsSigned_numberContext()
}

type Signed_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numberContext() *Signed_numberContext {
	var p = new(Signed_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_signed_number
	return p
}

func (*Signed_numberContext) IsSigned_numberContext() {}

func NewSigned_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numberContext {
	var p = new(Signed_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_signed_number

	return p
}

func (s *Signed_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numberContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMERIC_LITERAL, 0)
}

func (s *Signed_numberContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Signed_numberContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Signed_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Signed_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSigned_number(s)
	}
}

func (s *Signed_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSigned_number(s)
	}
}

func (s *Signed_numberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSigned_number(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Signed_number() (localctx ISigned_numberContext) {
	localctx = NewSigned_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SQLiteParserRULE_signed_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserPLUS || _la == SQLiteParserMINUS {
		{
			p.SetState(1604)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserPLUS || _la == SQLiteParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1607)
		p.Match(SQLiteParserNUMERIC_LITERAL)
	}

	return localctx
}

// ILiteral_valueContext is an interface to support dynamic dispatch.
type ILiteral_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteral_valueContext differentiates from other interfaces.
	IsLiteral_valueContext()
}

type Literal_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteral_valueContext() *Literal_valueContext {
	var p = new(Literal_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_literal_value
	return p
}

func (*Literal_valueContext) IsLiteral_valueContext() {}

func NewLiteral_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Literal_valueContext {
	var p = new(Literal_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_literal_value

	return p
}

func (s *Literal_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Literal_valueContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMERIC_LITERAL, 0)
}

func (s *Literal_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Literal_valueContext) BLOB_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBLOB_LITERAL, 0)
}

func (s *Literal_valueContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *Literal_valueContext) K_CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIME, 0)
}

func (s *Literal_valueContext) K_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_DATE, 0)
}

func (s *Literal_valueContext) K_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIMESTAMP, 0)
}

func (s *Literal_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Literal_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterLiteral_value(s)
	}
}

func (s *Literal_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitLiteral_value(s)
	}
}

func (s *Literal_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitLiteral_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Literal_value() (localctx ILiteral_valueContext) {
	localctx = NewLiteral_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SQLiteParserRULE_literal_value)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1609)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SQLiteParserK_CURRENT_DATE-52))|(1<<(SQLiteParserK_CURRENT_TIME-52))|(1<<(SQLiteParserK_CURRENT_TIMESTAMP-52)))) != 0) || _la == SQLiteParserK_NULL || (((_la-150)&-(0x1f+1)) == 0 && ((1<<uint((_la-150)))&((1<<(SQLiteParserNUMERIC_LITERAL-150))|(1<<(SQLiteParserSTRING_LITERAL-150))|(1<<(SQLiteParserBLOB_LITERAL-150)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_unary_operator
	return p
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Unary_operatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Unary_operatorContext) TILDE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTILDE, 0)
}

func (s *Unary_operatorContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (s *Unary_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitUnary_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SQLiteParserRULE_unary_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1611)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserPLUS)|(1<<SQLiteParserMINUS)|(1<<SQLiteParserTILDE))) != 0) || _la == SQLiteParserK_NOT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IError_messageContext is an interface to support dynamic dispatch.
type IError_messageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsError_messageContext differentiates from other interfaces.
	IsError_messageContext()
}

type Error_messageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyError_messageContext() *Error_messageContext {
	var p = new(Error_messageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_error_message
	return p
}

func (*Error_messageContext) IsError_messageContext() {}

func NewError_messageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Error_messageContext {
	var p = new(Error_messageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_error_message

	return p
}

func (s *Error_messageContext) GetParser() antlr.Parser { return s.parser }

func (s *Error_messageContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Error_messageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Error_messageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Error_messageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterError_message(s)
	}
}

func (s *Error_messageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitError_message(s)
	}
}

func (s *Error_messageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitError_message(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Error_message() (localctx IError_messageContext) {
	localctx = NewError_messageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SQLiteParserRULE_error_message)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1613)
		p.Match(SQLiteParserSTRING_LITERAL)
	}

	return localctx
}

// IModule_argumentContext is an interface to support dynamic dispatch.
type IModule_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_argumentContext differentiates from other interfaces.
	IsModule_argumentContext()
}

type Module_argumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_argumentContext() *Module_argumentContext {
	var p = new(Module_argumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_argument
	return p
}

func (*Module_argumentContext) IsModule_argumentContext() {}

func NewModule_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_argumentContext {
	var p = new(Module_argumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_argument

	return p
}

func (s *Module_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_argumentContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Module_argumentContext) Column_def() IColumn_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Module_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterModule_argument(s)
	}
}

func (s *Module_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitModule_argument(s)
	}
}

func (s *Module_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitModule_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Module_argument() (localctx IModule_argumentContext) {
	localctx = NewModule_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SQLiteParserRULE_module_argument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1617)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1615)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1616)
			p.Column_def()
		}

	}

	return localctx
}

// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_alias
	return p
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Column_aliasContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}

func (s *Column_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitColumn_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_alias() (localctx IColumn_aliasContext) {
	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SQLiteParserRULE_column_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1619)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_keyword
	return p
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *KeywordContext) K_ACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ACTION, 0)
}

func (s *KeywordContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ADD, 0)
}

func (s *KeywordContext) K_AFTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AFTER, 0)
}

func (s *KeywordContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *KeywordContext) K_ALTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALTER, 0)
}

func (s *KeywordContext) K_ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ANALYZE, 0)
}

func (s *KeywordContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AND, 0)
}

func (s *KeywordContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *KeywordContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *KeywordContext) K_ATTACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ATTACH, 0)
}

func (s *KeywordContext) K_AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AUTOINCREMENT, 0)
}

func (s *KeywordContext) K_BEFORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEFORE, 0)
}

func (s *KeywordContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEGIN, 0)
}

func (s *KeywordContext) K_BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BETWEEN, 0)
}

func (s *KeywordContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *KeywordContext) K_CASCADE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASCADE, 0)
}

func (s *KeywordContext) K_CASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASE, 0)
}

func (s *KeywordContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CAST, 0)
}

func (s *KeywordContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CHECK, 0)
}

func (s *KeywordContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *KeywordContext) K_COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLUMN, 0)
}

func (s *KeywordContext) K_COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COMMIT, 0)
}

func (s *KeywordContext) K_CONFLICT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONFLICT, 0)
}

func (s *KeywordContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONSTRAINT, 0)
}

func (s *KeywordContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *KeywordContext) K_CROSS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CROSS, 0)
}

func (s *KeywordContext) K_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_DATE, 0)
}

func (s *KeywordContext) K_CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIME, 0)
}

func (s *KeywordContext) K_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIMESTAMP, 0)
}

func (s *KeywordContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DATABASE, 0)
}

func (s *KeywordContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, 0)
}

func (s *KeywordContext) K_DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRABLE, 0)
}

func (s *KeywordContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRED, 0)
}

func (s *KeywordContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *KeywordContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *KeywordContext) K_DETACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DETACH, 0)
}

func (s *KeywordContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *KeywordContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *KeywordContext) K_EACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EACH, 0)
}

func (s *KeywordContext) K_ELSE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ELSE, 0)
}

func (s *KeywordContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *KeywordContext) K_ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ESCAPE, 0)
}

func (s *KeywordContext) K_EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCEPT, 0)
}

func (s *KeywordContext) K_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCLUSIVE, 0)
}

func (s *KeywordContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *KeywordContext) K_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXPLAIN, 0)
}

func (s *KeywordContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *KeywordContext) K_FOR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOR, 0)
}

func (s *KeywordContext) K_FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOREIGN, 0)
}

func (s *KeywordContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *KeywordContext) K_FULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FULL, 0)
}

func (s *KeywordContext) K_GLOB() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GLOB, 0)
}

func (s *KeywordContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GROUP, 0)
}

func (s *KeywordContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_HAVING, 0)
}

func (s *KeywordContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *KeywordContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *KeywordContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IMMEDIATE, 0)
}

func (s *KeywordContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IN, 0)
}

func (s *KeywordContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEX, 0)
}

func (s *KeywordContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEXED, 0)
}

func (s *KeywordContext) K_INITIALLY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INITIALLY, 0)
}

func (s *KeywordContext) K_INNER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INNER, 0)
}

func (s *KeywordContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSERT, 0)
}

func (s *KeywordContext) K_INSTEAD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSTEAD, 0)
}

func (s *KeywordContext) K_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTERSECT, 0)
}

func (s *KeywordContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTO, 0)
}

func (s *KeywordContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IS, 0)
}

func (s *KeywordContext) K_ISNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ISNULL, 0)
}

func (s *KeywordContext) K_JOIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_JOIN, 0)
}

func (s *KeywordContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_KEY, 0)
}

func (s *KeywordContext) K_LEFT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LEFT, 0)
}

func (s *KeywordContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIKE, 0)
}

func (s *KeywordContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *KeywordContext) K_MATCH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_MATCH, 0)
}

func (s *KeywordContext) K_NATURAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NATURAL, 0)
}

func (s *KeywordContext) K_NO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NO, 0)
}

func (s *KeywordContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *KeywordContext) K_NOTNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOTNULL, 0)
}

func (s *KeywordContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *KeywordContext) K_OF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OF, 0)
}

func (s *KeywordContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *KeywordContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *KeywordContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *KeywordContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *KeywordContext) K_OUTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OUTER, 0)
}

func (s *KeywordContext) K_PLAN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PLAN, 0)
}

func (s *KeywordContext) K_PRAGMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRAGMA, 0)
}

func (s *KeywordContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRIMARY, 0)
}

func (s *KeywordContext) K_QUERY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_QUERY, 0)
}

func (s *KeywordContext) K_RAISE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RAISE, 0)
}

func (s *KeywordContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *KeywordContext) K_REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REFERENCES, 0)
}

func (s *KeywordContext) K_REGEXP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REGEXP, 0)
}

func (s *KeywordContext) K_REINDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REINDEX, 0)
}

func (s *KeywordContext) K_RELEASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RELEASE, 0)
}

func (s *KeywordContext) K_RENAME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RENAME, 0)
}

func (s *KeywordContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *KeywordContext) K_RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RESTRICT, 0)
}

func (s *KeywordContext) K_RIGHT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RIGHT, 0)
}

func (s *KeywordContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *KeywordContext) K_ROW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROW, 0)
}

func (s *KeywordContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *KeywordContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SELECT, 0)
}

func (s *KeywordContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, 0)
}

func (s *KeywordContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *KeywordContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *KeywordContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *KeywordContext) K_THEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_THEN, 0)
}

func (s *KeywordContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TO, 0)
}

func (s *KeywordContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *KeywordContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRIGGER, 0)
}

func (s *KeywordContext) K_UNION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNION, 0)
}

func (s *KeywordContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *KeywordContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *KeywordContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_USING, 0)
}

func (s *KeywordContext) K_VACUUM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VACUUM, 0)
}

func (s *KeywordContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *KeywordContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIEW, 0)
}

func (s *KeywordContext) K_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIRTUAL, 0)
}

func (s *KeywordContext) K_WHEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHEN, 0)
}

func (s *KeywordContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *KeywordContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *KeywordContext) K_WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITHOUT, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterKeyword(s)
	}
}

func (s *KeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitKeyword(s)
	}
}

func (s *KeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Keyword() (localctx IKeywordContext) {
	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SQLiteParserRULE_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1621)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(SQLiteParserK_ABORT-25))|(1<<(SQLiteParserK_ACTION-25))|(1<<(SQLiteParserK_ADD-25))|(1<<(SQLiteParserK_AFTER-25))|(1<<(SQLiteParserK_ALL-25))|(1<<(SQLiteParserK_ALTER-25))|(1<<(SQLiteParserK_ANALYZE-25))|(1<<(SQLiteParserK_AND-25))|(1<<(SQLiteParserK_AS-25))|(1<<(SQLiteParserK_ASC-25))|(1<<(SQLiteParserK_ATTACH-25))|(1<<(SQLiteParserK_AUTOINCREMENT-25))|(1<<(SQLiteParserK_BEFORE-25))|(1<<(SQLiteParserK_BEGIN-25))|(1<<(SQLiteParserK_BETWEEN-25))|(1<<(SQLiteParserK_BY-25))|(1<<(SQLiteParserK_CASCADE-25))|(1<<(SQLiteParserK_CASE-25))|(1<<(SQLiteParserK_CAST-25))|(1<<(SQLiteParserK_CHECK-25))|(1<<(SQLiteParserK_COLLATE-25))|(1<<(SQLiteParserK_COLUMN-25))|(1<<(SQLiteParserK_COMMIT-25))|(1<<(SQLiteParserK_CONFLICT-25))|(1<<(SQLiteParserK_CONSTRAINT-25))|(1<<(SQLiteParserK_CREATE-25))|(1<<(SQLiteParserK_CROSS-25))|(1<<(SQLiteParserK_CURRENT_DATE-25))|(1<<(SQLiteParserK_CURRENT_TIME-25))|(1<<(SQLiteParserK_CURRENT_TIMESTAMP-25))|(1<<(SQLiteParserK_DATABASE-25))|(1<<(SQLiteParserK_DEFAULT-25)))) != 0) || (((_la-57)&-(0x1f+1)) == 0 && ((1<<uint((_la-57)))&((1<<(SQLiteParserK_DEFERRABLE-57))|(1<<(SQLiteParserK_DEFERRED-57))|(1<<(SQLiteParserK_DELETE-57))|(1<<(SQLiteParserK_DESC-57))|(1<<(SQLiteParserK_DETACH-57))|(1<<(SQLiteParserK_DISTINCT-57))|(1<<(SQLiteParserK_DROP-57))|(1<<(SQLiteParserK_EACH-57))|(1<<(SQLiteParserK_ELSE-57))|(1<<(SQLiteParserK_END-57))|(1<<(SQLiteParserK_ESCAPE-57))|(1<<(SQLiteParserK_EXCEPT-57))|(1<<(SQLiteParserK_EXCLUSIVE-57))|(1<<(SQLiteParserK_EXISTS-57))|(1<<(SQLiteParserK_EXPLAIN-57))|(1<<(SQLiteParserK_FAIL-57))|(1<<(SQLiteParserK_FOR-57))|(1<<(SQLiteParserK_FOREIGN-57))|(1<<(SQLiteParserK_FROM-57))|(1<<(SQLiteParserK_FULL-57))|(1<<(SQLiteParserK_GLOB-57))|(1<<(SQLiteParserK_GROUP-57))|(1<<(SQLiteParserK_HAVING-57))|(1<<(SQLiteParserK_IF-57))|(1<<(SQLiteParserK_IGNORE-57))|(1<<(SQLiteParserK_IMMEDIATE-57))|(1<<(SQLiteParserK_IN-57))|(1<<(SQLiteParserK_INDEX-57))|(1<<(SQLiteParserK_INDEXED-57))|(1<<(SQLiteParserK_INITIALLY-57))|(1<<(SQLiteParserK_INNER-57))|(1<<(SQLiteParserK_INSERT-57)))) != 0) || (((_la-89)&-(0x1f+1)) == 0 && ((1<<uint((_la-89)))&((1<<(SQLiteParserK_INSTEAD-89))|(1<<(SQLiteParserK_INTERSECT-89))|(1<<(SQLiteParserK_INTO-89))|(1<<(SQLiteParserK_IS-89))|(1<<(SQLiteParserK_ISNULL-89))|(1<<(SQLiteParserK_JOIN-89))|(1<<(SQLiteParserK_KEY-89))|(1<<(SQLiteParserK_LEFT-89))|(1<<(SQLiteParserK_LIKE-89))|(1<<(SQLiteParserK_LIMIT-89))|(1<<(SQLiteParserK_MATCH-89))|(1<<(SQLiteParserK_NATURAL-89))|(1<<(SQLiteParserK_NO-89))|(1<<(SQLiteParserK_NOT-89))|(1<<(SQLiteParserK_NOTNULL-89))|(1<<(SQLiteParserK_NULL-89))|(1<<(SQLiteParserK_OF-89))|(1<<(SQLiteParserK_OFFSET-89))|(1<<(SQLiteParserK_ON-89))|(1<<(SQLiteParserK_OR-89))|(1<<(SQLiteParserK_ORDER-89))|(1<<(SQLiteParserK_OUTER-89))|(1<<(SQLiteParserK_PLAN-89))|(1<<(SQLiteParserK_PRAGMA-89))|(1<<(SQLiteParserK_PRIMARY-89))|(1<<(SQLiteParserK_QUERY-89))|(1<<(SQLiteParserK_RAISE-89))|(1<<(SQLiteParserK_RECURSIVE-89))|(1<<(SQLiteParserK_REFERENCES-89))|(1<<(SQLiteParserK_REGEXP-89))|(1<<(SQLiteParserK_REINDEX-89))|(1<<(SQLiteParserK_RELEASE-89)))) != 0) || (((_la-121)&-(0x1f+1)) == 0 && ((1<<uint((_la-121)))&((1<<(SQLiteParserK_RENAME-121))|(1<<(SQLiteParserK_REPLACE-121))|(1<<(SQLiteParserK_RESTRICT-121))|(1<<(SQLiteParserK_RIGHT-121))|(1<<(SQLiteParserK_ROLLBACK-121))|(1<<(SQLiteParserK_ROW-121))|(1<<(SQLiteParserK_SAVEPOINT-121))|(1<<(SQLiteParserK_SELECT-121))|(1<<(SQLiteParserK_SET-121))|(1<<(SQLiteParserK_TABLE-121))|(1<<(SQLiteParserK_TEMP-121))|(1<<(SQLiteParserK_TEMPORARY-121))|(1<<(SQLiteParserK_THEN-121))|(1<<(SQLiteParserK_TO-121))|(1<<(SQLiteParserK_TRANSACTION-121))|(1<<(SQLiteParserK_TRIGGER-121))|(1<<(SQLiteParserK_UNION-121))|(1<<(SQLiteParserK_UNIQUE-121))|(1<<(SQLiteParserK_UPDATE-121))|(1<<(SQLiteParserK_USING-121))|(1<<(SQLiteParserK_VACUUM-121))|(1<<(SQLiteParserK_VALUES-121))|(1<<(SQLiteParserK_VIEW-121))|(1<<(SQLiteParserK_VIRTUAL-121))|(1<<(SQLiteParserK_WHEN-121))|(1<<(SQLiteParserK_WHERE-121))|(1<<(SQLiteParserK_WITH-121))|(1<<(SQLiteParserK_WITHOUT-121)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitName(s)
	}
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SQLiteParserRULE_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1623)
		p.Any_name()
	}

	return localctx
}

// IFunction_nameContext is an interface to support dynamic dispatch.
type IFunction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_nameContext differentiates from other interfaces.
	IsFunction_nameContext()
}

type Function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_nameContext() *Function_nameContext {
	var p = new(Function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_function_name
	return p
}

func (*Function_nameContext) IsFunction_nameContext() {}

func NewFunction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_nameContext {
	var p = new(Function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_function_name

	return p
}

func (s *Function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterFunction_name(s)
	}
}

func (s *Function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitFunction_name(s)
	}
}

func (s *Function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitFunction_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Function_name() (localctx IFunction_nameContext) {
	localctx = NewFunction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SQLiteParserRULE_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1625)
		p.Any_name()
	}

	return localctx
}

// IDatabase_nameContext is an interface to support dynamic dispatch.
type IDatabase_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_nameContext differentiates from other interfaces.
	IsDatabase_nameContext()
}

type Database_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_nameContext() *Database_nameContext {
	var p = new(Database_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_database_name
	return p
}

func (*Database_nameContext) IsDatabase_nameContext() {}

func NewDatabase_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_nameContext {
	var p = new(Database_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_database_name

	return p
}

func (s *Database_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Database_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDatabase_name(s)
	}
}

func (s *Database_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDatabase_name(s)
	}
}

func (s *Database_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitDatabase_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Database_name() (localctx IDatabase_nameContext) {
	localctx = NewDatabase_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SQLiteParserRULE_database_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1627)
		p.Any_name()
	}

	return localctx
}

// ISchema_nameContext is an interface to support dynamic dispatch.
type ISchema_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_nameContext differentiates from other interfaces.
	IsSchema_nameContext()
}

type Schema_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_nameContext() *Schema_nameContext {
	var p = new(Schema_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_schema_name
	return p
}

func (*Schema_nameContext) IsSchema_nameContext() {}

func NewSchema_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_nameContext {
	var p = new(Schema_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_schema_name

	return p
}

func (s *Schema_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Schema_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Schema_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSchema_name(s)
	}
}

func (s *Schema_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSchema_name(s)
	}
}

func (s *Schema_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSchema_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Schema_name() (localctx ISchema_nameContext) {
	localctx = NewSchema_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SQLiteParserRULE_schema_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1629)
		p.Any_name()
	}

	return localctx
}

// ITable_function_nameContext is an interface to support dynamic dispatch.
type ITable_function_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_function_nameContext differentiates from other interfaces.
	IsTable_function_nameContext()
}

type Table_function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_function_nameContext() *Table_function_nameContext {
	var p = new(Table_function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_function_name
	return p
}

func (*Table_function_nameContext) IsTable_function_nameContext() {}

func NewTable_function_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_function_nameContext {
	var p = new(Table_function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_function_name

	return p
}

func (s *Table_function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_function_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_function_name(s)
	}
}

func (s *Table_function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_function_name(s)
	}
}

func (s *Table_function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTable_function_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_function_name() (localctx ITable_function_nameContext) {
	localctx = NewTable_function_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SQLiteParserRULE_table_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1631)
		p.Any_name()
	}

	return localctx
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_name
	return p
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (s *Table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTable_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SQLiteParserRULE_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1633)
		p.Any_name()
	}

	return localctx
}

// ITable_or_index_nameContext is an interface to support dynamic dispatch.
type ITable_or_index_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_or_index_nameContext differentiates from other interfaces.
	IsTable_or_index_nameContext()
}

type Table_or_index_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_index_nameContext() *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_index_name
	return p
}

func (*Table_or_index_nameContext) IsTable_or_index_nameContext() {}

func NewTable_or_index_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_index_name

	return p
}

func (s *Table_or_index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_index_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_or_index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTable_or_index_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_or_index_name() (localctx ITable_or_index_nameContext) {
	localctx = NewTable_or_index_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SQLiteParserRULE_table_or_index_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1635)
		p.Any_name()
	}

	return localctx
}

// INew_table_nameContext is an interface to support dynamic dispatch.
type INew_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNew_table_nameContext differentiates from other interfaces.
	IsNew_table_nameContext()
}

type New_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_table_nameContext() *New_table_nameContext {
	var p = new(New_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_new_table_name
	return p
}

func (*New_table_nameContext) IsNew_table_nameContext() {}

func NewNew_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_table_nameContext {
	var p = new(New_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_new_table_name

	return p
}

func (s *New_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *New_table_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *New_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterNew_table_name(s)
	}
}

func (s *New_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitNew_table_name(s)
	}
}

func (s *New_table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitNew_table_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) New_table_name() (localctx INew_table_nameContext) {
	localctx = NewNew_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SQLiteParserRULE_new_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1637)
		p.Any_name()
	}

	return localctx
}

// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name
	return p
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_name(s)
	}
}

func (s *Column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitColumn_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_name() (localctx IColumn_nameContext) {
	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SQLiteParserRULE_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1639)
		p.Any_name()
	}

	return localctx
}

// ICollation_nameContext is an interface to support dynamic dispatch.
type ICollation_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollation_nameContext differentiates from other interfaces.
	IsCollation_nameContext()
}

type Collation_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollation_nameContext() *Collation_nameContext {
	var p = new(Collation_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_collation_name
	return p
}

func (*Collation_nameContext) IsCollation_nameContext() {}

func NewCollation_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collation_nameContext {
	var p = new(Collation_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_collation_name

	return p
}

func (s *Collation_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Collation_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Collation_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collation_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collation_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCollation_name(s)
	}
}

func (s *Collation_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCollation_name(s)
	}
}

func (s *Collation_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitCollation_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Collation_name() (localctx ICollation_nameContext) {
	localctx = NewCollation_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SQLiteParserRULE_collation_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1641)
		p.Any_name()
	}

	return localctx
}

// IForeign_tableContext is an interface to support dynamic dispatch.
type IForeign_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_tableContext differentiates from other interfaces.
	IsForeign_tableContext()
}

type Foreign_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_tableContext() *Foreign_tableContext {
	var p = new(Foreign_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_table
	return p
}

func (*Foreign_tableContext) IsForeign_tableContext() {}

func NewForeign_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_tableContext {
	var p = new(Foreign_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_table

	return p
}

func (s *Foreign_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_tableContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Foreign_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterForeign_table(s)
	}
}

func (s *Foreign_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitForeign_table(s)
	}
}

func (s *Foreign_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitForeign_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Foreign_table() (localctx IForeign_tableContext) {
	localctx = NewForeign_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SQLiteParserRULE_foreign_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1643)
		p.Any_name()
	}

	return localctx
}

// IIndex_nameContext is an interface to support dynamic dispatch.
type IIndex_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_nameContext differentiates from other interfaces.
	IsIndex_nameContext()
}

type Index_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_nameContext() *Index_nameContext {
	var p = new(Index_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_index_name
	return p
}

func (*Index_nameContext) IsIndex_nameContext() {}

func NewIndex_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_nameContext {
	var p = new(Index_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_index_name

	return p
}

func (s *Index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterIndex_name(s)
	}
}

func (s *Index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitIndex_name(s)
	}
}

func (s *Index_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitIndex_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Index_name() (localctx IIndex_nameContext) {
	localctx = NewIndex_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SQLiteParserRULE_index_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1645)
		p.Any_name()
	}

	return localctx
}

// ITrigger_nameContext is an interface to support dynamic dispatch.
type ITrigger_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrigger_nameContext differentiates from other interfaces.
	IsTrigger_nameContext()
}

type Trigger_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrigger_nameContext() *Trigger_nameContext {
	var p = new(Trigger_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_trigger_name
	return p
}

func (*Trigger_nameContext) IsTrigger_nameContext() {}

func NewTrigger_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trigger_nameContext {
	var p = new(Trigger_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_trigger_name

	return p
}

func (s *Trigger_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Trigger_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Trigger_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trigger_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trigger_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTrigger_name(s)
	}
}

func (s *Trigger_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTrigger_name(s)
	}
}

func (s *Trigger_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTrigger_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Trigger_name() (localctx ITrigger_nameContext) {
	localctx = NewTrigger_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SQLiteParserRULE_trigger_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1647)
		p.Any_name()
	}

	return localctx
}

// IView_nameContext is an interface to support dynamic dispatch.
type IView_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_nameContext differentiates from other interfaces.
	IsView_nameContext()
}

type View_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_nameContext() *View_nameContext {
	var p = new(View_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_view_name
	return p
}

func (*View_nameContext) IsView_nameContext() {}

func NewView_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_nameContext {
	var p = new(View_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_view_name

	return p
}

func (s *View_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *View_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *View_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *View_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterView_name(s)
	}
}

func (s *View_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitView_name(s)
	}
}

func (s *View_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitView_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) View_name() (localctx IView_nameContext) {
	localctx = NewView_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SQLiteParserRULE_view_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1649)
		p.Any_name()
	}

	return localctx
}

// IModule_nameContext is an interface to support dynamic dispatch.
type IModule_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_nameContext differentiates from other interfaces.
	IsModule_nameContext()
}

type Module_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_nameContext() *Module_nameContext {
	var p = new(Module_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_name
	return p
}

func (*Module_nameContext) IsModule_nameContext() {}

func NewModule_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_nameContext {
	var p = new(Module_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_name

	return p
}

func (s *Module_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Module_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterModule_name(s)
	}
}

func (s *Module_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitModule_name(s)
	}
}

func (s *Module_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitModule_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Module_name() (localctx IModule_nameContext) {
	localctx = NewModule_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SQLiteParserRULE_module_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1651)
		p.Any_name()
	}

	return localctx
}

// IPragma_nameContext is an interface to support dynamic dispatch.
type IPragma_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_nameContext differentiates from other interfaces.
	IsPragma_nameContext()
}

type Pragma_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_nameContext() *Pragma_nameContext {
	var p = new(Pragma_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_name
	return p
}

func (*Pragma_nameContext) IsPragma_nameContext() {}

func NewPragma_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_nameContext {
	var p = new(Pragma_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_name

	return p
}

func (s *Pragma_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Pragma_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterPragma_name(s)
	}
}

func (s *Pragma_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitPragma_name(s)
	}
}

func (s *Pragma_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitPragma_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_name() (localctx IPragma_nameContext) {
	localctx = NewPragma_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SQLiteParserRULE_pragma_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1653)
		p.Any_name()
	}

	return localctx
}

// ISavepoint_nameContext is an interface to support dynamic dispatch.
type ISavepoint_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepoint_nameContext differentiates from other interfaces.
	IsSavepoint_nameContext()
}

type Savepoint_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_nameContext() *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_name
	return p
}

func (*Savepoint_nameContext) IsSavepoint_nameContext() {}

func NewSavepoint_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_name

	return p
}

func (s *Savepoint_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Savepoint_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitSavepoint_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Savepoint_name() (localctx ISavepoint_nameContext) {
	localctx = NewSavepoint_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SQLiteParserRULE_savepoint_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1655)
		p.Any_name()
	}

	return localctx
}

// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_alias
	return p
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Table_aliasContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Table_aliasContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Table_aliasContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_aliasContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_alias(s)
	}
}

func (s *Table_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTable_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_alias() (localctx ITable_aliasContext) {
	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SQLiteParserRULE_table_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1663)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1657)
			p.Match(SQLiteParserIDENTIFIER)
		}

	case SQLiteParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1658)
			p.Match(SQLiteParserSTRING_LITERAL)
		}

	case SQLiteParserOPEN_PAR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1659)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1660)
			p.Table_alias()
		}
		{
			p.SetState(1661)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITransaction_nameContext is an interface to support dynamic dispatch.
type ITransaction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_nameContext differentiates from other interfaces.
	IsTransaction_nameContext()
}

type Transaction_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_nameContext() *Transaction_nameContext {
	var p = new(Transaction_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_transaction_name
	return p
}

func (*Transaction_nameContext) IsTransaction_nameContext() {}

func NewTransaction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_nameContext {
	var p = new(Transaction_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_transaction_name

	return p
}

func (s *Transaction_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Transaction_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTransaction_name(s)
	}
}

func (s *Transaction_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTransaction_name(s)
	}
}

func (s *Transaction_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitTransaction_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Transaction_name() (localctx ITransaction_nameContext) {
	localctx = NewTransaction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SQLiteParserRULE_transaction_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1665)
		p.Any_name()
	}

	return localctx
}

// IAny_nameContext is an interface to support dynamic dispatch.
type IAny_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAny_nameContext differentiates from other interfaces.
	IsAny_nameContext()
}

type Any_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_nameContext() *Any_nameContext {
	var p = new(Any_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_any_name
	return p
}

func (*Any_nameContext) IsAny_nameContext() {}

func NewAny_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_nameContext {
	var p = new(Any_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_any_name

	return p
}

func (s *Any_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_nameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Any_nameContext) Keyword() IKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *Any_nameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Any_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Any_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Any_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Any_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAny_name(s)
	}
}

func (s *Any_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAny_name(s)
	}
}

func (s *Any_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteVisitor:
		return t.VisitAny_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Any_name() (localctx IAny_nameContext) {
	localctx = NewAny_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SQLiteParserRULE_any_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1674)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1667)
			p.Match(SQLiteParserIDENTIFIER)
		}

	case SQLiteParserK_ABORT, SQLiteParserK_ACTION, SQLiteParserK_ADD, SQLiteParserK_AFTER, SQLiteParserK_ALL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_AND, SQLiteParserK_AS, SQLiteParserK_ASC, SQLiteParserK_ATTACH, SQLiteParserK_AUTOINCREMENT, SQLiteParserK_BEFORE, SQLiteParserK_BEGIN, SQLiteParserK_BETWEEN, SQLiteParserK_BY, SQLiteParserK_CASCADE, SQLiteParserK_CASE, SQLiteParserK_CAST, SQLiteParserK_CHECK, SQLiteParserK_COLLATE, SQLiteParserK_COLUMN, SQLiteParserK_COMMIT, SQLiteParserK_CONFLICT, SQLiteParserK_CONSTRAINT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_CURRENT_DATE, SQLiteParserK_CURRENT_TIME, SQLiteParserK_CURRENT_TIMESTAMP, SQLiteParserK_DATABASE, SQLiteParserK_DEFAULT, SQLiteParserK_DEFERRABLE, SQLiteParserK_DEFERRED, SQLiteParserK_DELETE, SQLiteParserK_DESC, SQLiteParserK_DETACH, SQLiteParserK_DISTINCT, SQLiteParserK_DROP, SQLiteParserK_EACH, SQLiteParserK_ELSE, SQLiteParserK_END, SQLiteParserK_ESCAPE, SQLiteParserK_EXCEPT, SQLiteParserK_EXCLUSIVE, SQLiteParserK_EXISTS, SQLiteParserK_EXPLAIN, SQLiteParserK_FAIL, SQLiteParserK_FOR, SQLiteParserK_FOREIGN, SQLiteParserK_FROM, SQLiteParserK_FULL, SQLiteParserK_GLOB, SQLiteParserK_GROUP, SQLiteParserK_HAVING, SQLiteParserK_IF, SQLiteParserK_IGNORE, SQLiteParserK_IMMEDIATE, SQLiteParserK_IN, SQLiteParserK_INDEX, SQLiteParserK_INDEXED, SQLiteParserK_INITIALLY, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INSTEAD, SQLiteParserK_INTERSECT, SQLiteParserK_INTO, SQLiteParserK_IS, SQLiteParserK_ISNULL, SQLiteParserK_JOIN, SQLiteParserK_KEY, SQLiteParserK_LEFT, SQLiteParserK_LIKE, SQLiteParserK_LIMIT, SQLiteParserK_MATCH, SQLiteParserK_NATURAL, SQLiteParserK_NO, SQLiteParserK_NOT, SQLiteParserK_NOTNULL, SQLiteParserK_NULL, SQLiteParserK_OF, SQLiteParserK_OFFSET, SQLiteParserK_ON, SQLiteParserK_OR, SQLiteParserK_ORDER, SQLiteParserK_OUTER, SQLiteParserK_PLAN, SQLiteParserK_PRAGMA, SQLiteParserK_PRIMARY, SQLiteParserK_QUERY, SQLiteParserK_RAISE, SQLiteParserK_RECURSIVE, SQLiteParserK_REFERENCES, SQLiteParserK_REGEXP, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_RENAME, SQLiteParserK_REPLACE, SQLiteParserK_RESTRICT, SQLiteParserK_RIGHT, SQLiteParserK_ROLLBACK, SQLiteParserK_ROW, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_SET, SQLiteParserK_TABLE, SQLiteParserK_TEMP, SQLiteParserK_TEMPORARY, SQLiteParserK_THEN, SQLiteParserK_TO, SQLiteParserK_TRANSACTION, SQLiteParserK_TRIGGER, SQLiteParserK_UNION, SQLiteParserK_UNIQUE, SQLiteParserK_UPDATE, SQLiteParserK_USING, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_VIEW, SQLiteParserK_VIRTUAL, SQLiteParserK_WHEN, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserK_WITHOUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1668)
			p.Keyword()
		}

	case SQLiteParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1669)
			p.Match(SQLiteParserSTRING_LITERAL)
		}

	case SQLiteParserOPEN_PAR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1670)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1671)
			p.Any_name()
		}
		{
			p.SetState(1672)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

func (p *SQLiteParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 38:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SQLiteParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 6)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
